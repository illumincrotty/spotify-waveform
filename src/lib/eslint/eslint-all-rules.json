[
	[
		"accessor-pairs",
		"# Enforces getter/setter pairs in objects (accessor-pairs)\n\nIt's a common mistake in JavaScript to create an object with just a setter for a property but never have a corresponding getter defined for it. Without a getter, you cannot read the property, so it ends up not being used.\n\nHere are some examples:\n\n```js\n// Bad\nvar o = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\n// Good\nvar o = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\n```\n\nThis rule warns if setters are defined without getters. Using an option `getWithoutSet`, it will warn if you have a getter without a setter also.\n\n## Rule Details\n\nThis rule enforces a style where it requires to have a getter for every property which has a setter defined.\n\nBy activating the option `getWithoutSet` it enforces the presence of a setter for every property which has a getter defined.\n\n## Options\n\n* `setWithoutGet` set to `true` will warn for setters without getters (Default `true`).\n* `getWithoutSet` set to `true` will warn for getters without setters (Default `false`).\n\n### setWithoutGet\n\nExamples of **incorrect** code for the default `{ \"setWithoutGet\": true }` option:\n\n```js\n/*eslint accessor-pairs: \"error\"*/\n\nvar o = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    }\n});\n```\n\nExamples of **correct** code for the default `{ \"setWithoutGet\": true }` option:\n\n```js\n/*eslint accessor-pairs: \"error\"*/\n\nvar o = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    },\n    get: function() {\n        return this.val;\n    }\n});\n\n```\n\n### getWithoutSet\n\nExamples of **incorrect** code for the `{ \"getWithoutSet\": true }` option:\n\n```js\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true }]*/\n\nvar o = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\nvar o = {\n    get a() {\n        return this.val;\n    }\n};\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    }\n});\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    get: function() {\n        return this.val;\n    }\n});\n```\n\nExamples of **correct** code for the `{ \"getWithoutSet\": true }` option:\n\n```js\n/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true }]*/\nvar o = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nvar o = {d: 1};\nObject.defineProperty(o, 'c', {\n    set: function(value) {\n        this.val = value;\n    },\n    get: function() {\n        return this.val;\n    }\n});\n\n```\n\n## Known Limitations\n\nDue to the limits of static analysis, this rule does not account for possible side effects and in certain cases\nmight not report a missing pair for a getter/setter that has a computed key, like in the following example:\n\n```js\n/*eslint accessor-pairs: \"error\"*/\n\nvar a = 1;\n\n// no warnings\nvar o = {\n    get [a++]() {\n        return this.val;\n    },\n    set [a++](value) {\n        this.val = value;\n    }\n};\n```\n\nAlso, this rule does not disallow duplicate keys in object literals, and in certain cases with duplicate keys\nmight not report a missing pair for a getter/setter, like in the following example:\n\n```js\n/*eslint accessor-pairs: \"error\"*/\n\n// no warnings\nvar o = {\n    get a() {\n        return this.val;\n    },\n    a: 1,\n    set a(value) {\n        this.val = value;\n    }\n};\n```\n\nThe code above creates an object with just a setter for the property `\"a\"`.\n\nSee [no-dupe-keys](no-dupe-keys.md) if you also want to disallow duplicate keys in object literals.\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the simultaneous presence of setters and getters on objects.\n\n## Further Reading\n\n* [Object Setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)\n* [Object Getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)\n* [Working with Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects)\n"
	],
	[
		"array-bracket-newline",
		"# enforce line breaks after opening and before closing array brackets (array-bracket-newline)\n\nA number of style guides require or disallow line breaks inside of array brackets.\n\n## Rule Details\n\nThis rule enforces line breaks after opening and before closing array brackets.\n\n## Options\n\nThis rule has either a string option:\n\n* `\"always\"` requires line breaks inside brackets\n* `\"never\"` disallows line breaks inside brackets\n* `\"consistent\"` requires consistent usage of linebreaks for each pair of brackets. It reports an error if one bracket in the pair has a linebreak inside it and the other bracket does not.\n\nOr an object option (Requires line breaks if any of properties is satisfied. Otherwise, disallows line breaks):\n\n* `\"multiline\": true` (default) requires line breaks if there are line breaks inside elements or between elements. If this is false, this condition is disabled.\n* `\"minItems\": null` (default) requires line breaks if the number of elements is at least the given integer. If this is 0, this condition will act the same as the option `\"always\"`. If this is `null` (the default), this condition is disabled.\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", \"always\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1,\n    2];\nvar e = [function foo() {\n    dosomething();\n}];\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", \"always\"]*/\n\nvar a = [\n];\nvar b = [\n    1\n];\nvar c = [\n    1, 2\n];\nvar d = [\n    1,\n    2\n];\nvar e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", \"never\"]*/\n\nvar a = [\n];\nvar b = [\n    1\n];\nvar c = [\n    1, 2\n];\nvar d = [\n    1,\n    2\n];\nvar e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", \"never\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1,\n    2];\nvar e = [function foo() {\n    dosomething();\n}];\n```\n\n### consistent\n\nExamples of **incorrect** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", \"consistent\"]*/\n\nvar a = [1\n];\nvar b = [\n    1];\nvar c = [function foo() {\n    dosomething();\n}\n]\nvar d = [\n    function foo() {\n        dosomething();\n    }]\n```\n\nExamples of **correct** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", \"consistent\"]*/\n\nvar a = [];\nvar b = [\n];\nvar c = [1];\nvar d = [\n    1\n];\nvar e = [function foo() {\n    dosomething();\n}];\nvar f = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n### multiline\n\nExamples of **incorrect** code for this rule with the default `{ \"multiline\": true }` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true }]*/\n\nvar a = [\n];\nvar b = [\n    1\n];\nvar c = [\n    1, 2\n];\nvar d = [1,\n    2];\nvar e = [function foo() {\n    dosomething();\n}];\n```\n\nExamples of **correct** code for this rule with the default `{ \"multiline\": true }` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [\n    1,\n    2\n];\nvar e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n### minItems\n\nExamples of **incorrect** code for this rule with the `{ \"minItems\": 2 }` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", { \"minItems\": 2 }]*/\n\nvar a = [\n];\nvar b = [\n    1\n];\nvar c = [1, 2];\nvar d = [1,\n    2];\nvar e = [\n  function foo() {\n    dosomething();\n  }\n];\n```\n\nExamples of **correct** code for this rule with the `{ \"minItems\": 2 }` option:\n\n```js\n/*eslint array-bracket-newline: [\"error\", { \"minItems\": 2 }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [\n    1, 2\n];\nvar d = [\n    1,\n    2\n];\nvar e = [function foo() {\n    dosomething();\n}];\n```\n\n### multiline and minItems\n\nExamples of **incorrect** code for this rule with the `{ \"multiline\": true, \"minItems\": 2 }` options:\n\n```js\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true, \"minItems\": 2 }]*/\n\nvar a = [\n];\nvar b = [\n    1\n];\nvar c = [1, 2];\nvar d = [1,\n    2];\nvar e = [function foo() {\n    dosomething();\n}];\n```\n\nExamples of **correct** code for this rule with the `{ \"multiline\": true, \"minItems\": 2 }` options:\n\n```js\n/*eslint array-bracket-newline: [\"error\", { \"multiline\": true, \"minItems\": 2 }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [\n    1, 2\n];\nvar d = [\n    1,\n    2\n];\nvar e = [\n    function foo() {\n        dosomething();\n    }\n];\n```\n\n\n## When Not To Use It\n\nIf you don't want to enforce line breaks after opening and before closing array brackets, don't enable this rule.\n\n## Compatibility\n\n* **JSCS:** [validateNewlineAfterArrayElements](https://jscs-dev.github.io/rule/validateNewlineAfterArrayElements)\n\n## Related Rules\n\n* [array-bracket-spacing](array-bracket-spacing.md)\n"
	],
	[
		"array-bracket-spacing",
		"# Disallow or enforce spaces inside of brackets (array-bracket-spacing)\n\nA number of style guides require or disallow spaces between array brackets and other tokens. This rule\napplies to both array literals and destructuring assignments (ECMAScript 6).\n\n```js\n/*eslint-env es6*/\n\nvar arr = [ 'foo', 'bar' ];\nvar [ x, y ] = z;\n\nvar arr = ['foo', 'bar'];\nvar [x,y] = z;\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing inside array brackets.\n\n## Options\n\nThis rule has a string option:\n\n* `\"never\"` (default) disallows spaces inside array brackets\n* `\"always\"` requires one or more spaces or newlines inside array brackets\n\nThis rule has an object option for exceptions to the `\"never\"` option:\n\n* `\"singleValue\": true` requires one or more spaces or newlines inside brackets of array literals that contain a single element\n* `\"objectsInArrays\": true` requires one or more spaces or newlines between brackets of array literals and braces of their object literal elements `[ {` or `} ]`\n* `\"arraysInArrays\": true` requires one or more spaces or newlines between brackets of array literals and brackets of their array literal elements `[ [` or `] ]`\n\nThis rule has an object option for exceptions to the `\"always\"` option:\n\n* `\"singleValue\": false` disallows spaces inside brackets of array literals that contain a single element\n* `\"objectsInArrays\": false` disallows spaces between brackets of array literals and braces of their object literal elements `[{` or `}]`\n* `\"arraysInArrays\": false` disallows spaces between brackets of array literals and brackets of their array literal elements `[[` or `]]`\n\nThis rule has built-in exceptions:\n\n* `\"never\"` (and also the exceptions to the `\"always\"` option) allows newlines inside array brackets, because this is a common pattern\n* `\"always\"` does not require spaces or newlines in empty array literals `[]`\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nvar arr = [ 'foo', 'bar' ];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar'];\nvar arr = [[ 'foo' ], 'bar'];\nvar arr = [ 'foo',\n  'bar'\n];\nvar [ x, y ] = z;\nvar [ x,y ] = z;\nvar [ x, ...y ] = z;\nvar [ ,,x, ] = z;\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nvar arr = [];\nvar arr = ['foo', 'bar', 'baz'];\nvar arr = [['foo'], 'bar', 'baz'];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\nvar arr = ['foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar'];\n\nvar [x, y] = z;\nvar [x,y] = z;\nvar [x, ...y] = z;\nvar [,,x,] = z;\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar arr = ['foo', 'bar'];\nvar arr = ['foo', 'bar' ];\nvar arr = [ ['foo'], 'bar' ];\nvar arr = ['foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar'];\n\nvar [x, y] = z;\nvar [x,y] = z;\nvar [x, ...y] = z;\nvar [,,x,] = z;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar arr = [];\nvar arr = [ 'foo', 'bar', 'baz' ];\nvar arr = [ [ 'foo' ], 'bar', 'baz' ];\nvar arr = [ 'foo',\n  'bar'\n];\nvar arr = [\n  'foo',\n  'bar' ];\nvar arr = [\n  'foo',\n  'bar',\n  'baz'\n];\n\nvar [ x, y ] = z;\nvar [ x,y ] = z;\nvar [ x, ...y ] = z;\nvar [ ,,x, ] = z;\n```\n\n### singleValue\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"singleValue\": false }` options:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"singleValue\": false }]*/\n\nvar foo = [ 'foo' ];\nvar foo = [ 'foo'];\nvar foo = ['foo' ];\nvar foo = [ 1 ];\nvar foo = [ 1];\nvar foo = [1 ];\nvar foo = [ [ 1, 2 ] ];\nvar foo = [ { 'foo': 'bar' } ];\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"singleValue\": false }` options:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"singleValue\": false }]*/\n\nvar foo = ['foo'];\nvar foo = [1];\nvar foo = [[ 1, 1 ]];\nvar foo = [{ 'foo': 'bar' }];\n```\n\n### objectsInArrays\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"objectsInArrays\": false }` options:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"objectsInArrays\": false }]*/\n\nvar arr = [ { 'foo': 'bar' } ];\nvar arr = [ {\n  'foo': 'bar'\n} ]\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"objectsInArrays\": false }` options:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"objectsInArrays\": false }]*/\n\nvar arr = [{ 'foo': 'bar' }];\nvar arr = [{\n  'foo': 'bar'\n}];\n```\n\n### arraysInArrays\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"arraysInArrays\": false }` options:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"arraysInArrays\": false }]*/\n\nvar arr = [ [ 1, 2 ], 2, 3, 4 ];\nvar arr = [ [ 1, 2 ], 2, [ 3, 4 ] ];\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"arraysInArrays\": false }` options:\n\n```js\n/*eslint array-bracket-spacing: [\"error\", \"always\", { \"arraysInArrays\": false }]*/\n\nvar arr = [[ 1, 2 ], 2, 3, 4 ];\nvar arr = [[ 1, 2 ], 2, [ 3, 4 ]];\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing between array brackets.\n\n## Related Rules\n\n* [space-in-parens](space-in-parens.md)\n* [object-curly-spacing](object-curly-spacing.md)\n* [computed-property-spacing](computed-property-spacing.md)\n"
	],
	[
		"array-callback-return",
		"# Enforces return statements in callbacks of array's methods (array-callback-return)\n\n`Array` has several methods for filtering, mapping, and folding.\nIf we forget to write `return` statement in a callback of those, it's probably a mistake. If you don't want to use a return or don't need the returned results, consider using [.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) instead.\n\n```js\n// example: convert ['a', 'b', 'c'] --> {a: 0, b: 1, c: 2}\nvar indexMap = myArray.reduce(function(memo, item, index) {\n  memo[item] = index;\n}, {}); // Error: cannot set property 'b' of undefined\n```\n\nThis rule enforces usage of `return` statement in callbacks of array's methods.\n\n## Rule Details\n\nThis rule finds callback functions of the following methods, then checks usage of `return` statement.\n\n* [`Array.from`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.from)\n* [`Array.prototype.every`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.every)\n* [`Array.prototype.filter`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.filter)\n* [`Array.prototype.find`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.find)\n* [`Array.prototype.findIndex`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.findIndex )\n* [`Array.prototype.map`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.map)\n* [`Array.prototype.reduce`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.reduce)\n* [`Array.prototype.reduceRight`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.reduceRight)\n* [`Array.prototype.some`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.some)\n* [`Array.prototype.sort`](https://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.sort)\n* And above of typed arrays.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint array-callback-return: \"error\"*/\n\nvar indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n}, {});\n\nvar foo = Array.from(nodes, function(node) {\n    if (node.tagName === \"DIV\") {\n        return true;\n    }\n});\n\nvar bar = foo.filter(function(x) {\n    if (x) {\n        return true;\n    } else {\n        return;\n    }\n});\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint array-callback-return: \"error\"*/\n\nvar indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n    return memo;\n}, {});\n\nvar foo = Array.from(nodes, function(node) {\n    if (node.tagName === \"DIV\") {\n        return true;\n    }\n    return false;\n});\n\nvar bar = foo.map(node => node.getAttribute(\"id\"));\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"allowImplicit\": false` (default) When set to true, allows implicitly returning `undefined` with a `return` statement containing no expression.\n\nExamples of **correct** code for the `{ \"allowImplicit\": true }` option:\n\n```js\n/*eslint array-callback-return: [\"error\", { allowImplicit: true }]*/\nvar undefAllTheThings = myArray.map(function(item) {\n    return;\n});\n```\n\n## Known Limitations\n\nThis rule checks callback functions of methods with the given names, *even if* the object which has the method is *not* an array.\n\n## When Not To Use It\n\nIf you don't want to warn about usage of `return` statement in callbacks of array's methods, then it's safe to disable this rule.\n"
	],
	[
		"array-element-newline",
		"# enforce line breaks between array elements (array-element-newline)\n\nA number of style guides require or disallow line breaks between array elements.\n\n## Rule Details\n\nThis rule enforces line breaks between array elements.\n\n## Options\n\nThis rule has either a string option:\n\n* `\"always\"` (default) requires line breaks between array elements\n* `\"never\"` disallows line breaks between array elements\n* `\"consistent\"` requires consistent usage of linebreaks between array elements\n\nOr an object option (Requires line breaks if any of properties is satisfied. Otherwise, disallows line breaks):\n\n* `\"multiline\": <boolean>` requires line breaks if there are line breaks inside elements. If this is false, this condition is disabled.\n* `\"minItems\": <number>` requires line breaks if the number of elements is at least the given integer. If this is 0, this condition will act the same as the option `\"always\"`. If this is `null` (the default), this condition is disabled.\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint array-element-newline: [\"error\", \"always\"]*/\n\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint array-element-newline: [\"error\", \"always\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1,\n    2];\nvar d = [1,\n    2,\n    3];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint array-element-newline: [\"error\", \"never\"]*/\n\nvar c = [\n    1,\n    2\n];\nvar d = [\n    1,\n    2,\n    3\n];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint array-element-newline: [\"error\", \"never\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\n### consistent\n\nExamples of **incorrect** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint array-element-newline: [\"error\", \"consistent\"]*/\n\nvar a = [\n    1, 2,\n    3\n];\nvar b = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    },\n    function baz() {\n        dosomething();\n    }\n];\n```\n\nExamples of **correct** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint array-element-newline: [\"error\", \"consistent\"]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [\n    1,\n    2\n];\nvar f = [\n    1,\n    2,\n    3\n];\nvar g = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }, function baz() {\n        dosomething();\n    }\n];\nvar h = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    },\n    function baz() {\n        dosomething();\n    }\n];\n```\n\n### multiline\n\nExamples of **incorrect** code for this rule with the `{ \"multiline\": true }` option:\n\n```js\n/*eslint array-element-newline: [\"error\", { \"multiline\": true }]*/\n\nvar d = [1,\n    2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\nExamples of **correct** code for this rule with the `{ \"multiline\": true }` option:\n\n```js\n/*eslint array-element-newline: [\"error\", { \"multiline\": true }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n### minItems\n\nExamples of **incorrect** code for this rule with the `{ \"minItems\": 3 }` option:\n\n```js\n/*eslint array-element-newline: [\"error\", { \"minItems\": 3 }]*/\n\nvar c = [1,\n    2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\nExamples of **correct** code for this rule with the `{ \"minItems\": 3 }` option:\n\n```js\n/*eslint array-element-newline: [\"error\", { \"minItems\": 3 }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1,\n    2,\n    3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\n### multiline and minItems\n\nExamples of **incorrect** code for this rule with the `{ \"multiline\": true, \"minItems\": 3 }` options:\n\n```js\n/*eslint array-element-newline: [\"error\", { \"multiline\": true, \"minItems\": 3 }]*/\n\nvar c = [1,\n2];\nvar d = [1, 2, 3];\nvar e = [\n    function foo() {\n        dosomething();\n    }, function bar() {\n        dosomething();\n    }\n];\n```\n\nExamples of **correct** code for this rule with the `{ \"multiline\": true, \"minItems\": 3 }` options:\n\n```js\n/*eslint array-element-newline: [\"error\", { \"multiline\": true, \"minItems\": 3 }]*/\n\nvar a = [];\nvar b = [1];\nvar c = [1, 2];\nvar d = [1,\n    2,\n    3];\nvar e = [\n    function foo() {\n        dosomething();\n    },\n    function bar() {\n        dosomething();\n    }\n];\n```\n\n\n## When Not To Use It\n\nIf you don't want to enforce linebreaks between array elements, don't enable this rule.\n\n## Compatibility\n\n* **JSCS:** [validateNewlineAfterArrayElements](https://jscs-dev.github.io/rule/validateNewlineAfterArrayElements)\n\n## Related Rules\n\n* [array-bracket-spacing](array-bracket-spacing.md)\n* [array-bracket-newline](array-bracket-newline.md)\n* [object-property-newline](object-property-newline.md)\n* [object-curly-spacing](object-curly-spacing.md)\n* [object-curly-newline](object-curly-newline.md)\n* [max-statements-per-line](max-statements-per-line.md)\n* [block-spacing](block-spacing.md)\n* [brace-style](brace-style.md)\n"
	],
	[
		"arrow-body-style",
		"# Require braces in arrow function body (arrow-body-style)\n\nArrow functions have two syntactic forms for their function bodies.  They may be defined with a *block* body (denoted by curly braces) `() => { ... }` or with a single expression `() => ...`, whose value is implicitly returned.\n\n## Rule Details\n\nThis rule can enforce or disallow the use of braces around arrow function body.\n\n## Options\n\nThe rule takes one or two options. The first is a string, which can be:\n\n* `\"always\"` enforces braces around the function body\n* `\"as-needed\"` enforces no braces where they can be omitted (default)\n* `\"never\"` enforces no braces around the function body (constrains arrow functions to the role of returning an expression)\n\nThe second one is an object for more fine-grained configuration when the first option is `\"as-needed\"`. Currently, the only available option is `requireReturnForObjectLiteral`, a boolean property. It's `false` by default. If set to `true`, it requires braces and an explicit return for object literals.\n\n```json\n\"arrow-body-style\": [\"error\", \"always\"]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint arrow-body-style: [\"error\", \"always\"]*/\n/*eslint-env es6*/\nlet foo = () => 0;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\nlet foo = () => {\n    return 0;\n};\nlet foo = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\n```\n\n### as-needed\n\nExamples of **incorrect** code for this rule with the default `\"as-needed\"` option:\n\n```js\n/*eslint arrow-body-style: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\nlet foo = () => {\n    return 0;\n};\nlet foo = () => {\n    return {\n       bar: {\n            foo: 1,\n            bar: 2,\n        }\n    };\n};\n```\n\nExamples of **correct** code for this rule with the default `\"as-needed\"` option:\n\n```js\n/*eslint arrow-body-style: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\nlet foo = () => 0;\nlet foo = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\nlet foo = () => ({\n    bar: {\n        foo: 1,\n        bar: 2,\n    }\n});\nlet foo = () => { bar(); };\nlet foo = () => {};\nlet foo = () => { /* do nothing */ };\nlet foo = () => {\n    // do nothing.\n};\nlet foo = () => ({ bar: 0 });\n```\n\n#### requireReturnForObjectLiteral\n\n> This option is only applicable when used in conjunction with the `\"as-needed\"` option.\n\nExamples of **incorrect** code for this rule with the `{ \"requireReturnForObjectLiteral\": true }` option:\n\n```js\n/*eslint arrow-body-style: [\"error\", \"as-needed\", { \"requireReturnForObjectLiteral\": true }]*/\n/*eslint-env es6*/\nlet foo = () => ({});\nlet foo = () => ({ bar: 0 });\n```\n\nExamples of **correct** code for this rule with the `{ \"requireReturnForObjectLiteral\": true }` option:\n\n```js\n/*eslint arrow-body-style: [\"error\", \"as-needed\", { \"requireReturnForObjectLiteral\": true }]*/\n/*eslint-env es6*/\n\nlet foo = () => {};\nlet foo = () => { return { bar: 0 }; };\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint arrow-body-style: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nlet foo = () => {\n    return 0;\n};\nlet foo = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint arrow-body-style: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nlet foo = () => 0;\nlet foo = () => ({ foo: 0 });\n```\n"
	],
	[
		"arrow-parens",
		"# Require parens in arrow function arguments (arrow-parens)\n\nArrow functions can omit parentheses when they have exactly one parameter. In all other cases the parameter(s) must\nbe wrapped in parentheses. This rule enforces the consistent use of parentheses in arrow functions.\n\n## Rule Details\n\nThis rule enforces parentheses around arrow function parameters regardless of arity. For example:\n\n```js\n/*eslint-env es6*/\n\n// Bad\na => {}\n\n// Good\n(a) => {}\n```\n\nFollowing this style will help you find arrow functions (`=>`) which may be mistakenly included in a condition\nwhen a comparison such as `>=` was the intent.\n\n\n```js\n/*eslint-env es6*/\n\n// Bad\nif (a => 2) {\n}\n\n// Good\nif (a >= 2) {\n}\n```\n\nThe rule can also be configured to discourage the use of parens when they are not required:\n\n```js\n/*eslint-env es6*/\n\n// Bad\n(a) => {}\n\n// Good\na => {}\n```\n\n## Options\n\nThis rule has a string option and an object one.\n\nString options are:\n\n* `\"always\"` (default) requires parens around arguments in all cases.\n* `\"as-needed\"` enforces no braces where they can be omitted.\n\nObject properties for variants of the `\"as-needed\"` option:\n\n* `\"requireForBlockBody\": true` modifies the as-needed rule in order to require parens if the function body is in an instructions block (surrounded by braces).\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint arrow-parens: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\na => {};\na => a;\na => {'\\n'};\na.then(foo => {});\na.then(foo => a);\na(foo => { if (true) {} });\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint arrow-parens: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\n() => {};\n(a) => {};\n(a) => a;\n(a) => {'\\n'}\na.then((foo) => {});\na.then((foo) => { if (true) {} });\n```\n\n#### If Statements\n\nOne of benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:\n\n```js\n/*eslint-env es6*/\n\nvar a = 1;\nvar b = 2;\n// ...\nif (a => b) {\n console.log('bigger');\n} else {\n console.log('smaller');\n}\n// outputs 'bigger', not smaller as expected\n```\n\nThe contents of the `if` statement is an arrow function, not a comparison.\n\nIf the arrow function is intentional, it should be wrapped in parens to remove ambiguity.\n\n```js\n/*eslint-env es6*/\n\nvar a = 1;\nvar b = 0;\n// ...\nif ((a) => b) {\n console.log('truthy value returned');\n} else {\n console.log('falsey value returned');\n}\n// outputs 'truthy value returned'\n```\n\nThe following is another example of this behavior:\n\n```js\n/*eslint-env es6*/\n\nvar a = 1, b = 2, c = 3, d = 4;\nvar f = a => b ? c: d;\n// f = ?\n```\n\n`f` is an arrow function which takes `a` as an argument and returns the result of `b ? c: d`.\n\nThis should be rewritten like so:\n\n```js\n/*eslint-env es6*/\n\nvar a = 1, b = 2, c = 3, d = 4;\nvar f = (a) => b ? c: d;\n```\n\n### as-needed\n\nExamples of **incorrect** code for this rule with the `\"as-needed\"` option:\n\n```js\n/*eslint arrow-parens: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\n(a) => {};\n(a) => a;\n(a) => {'\\n'};\na.then((foo) => {});\na.then((foo) => a);\na((foo) => { if (true) {} });\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\"` option:\n\n```js\n/*eslint arrow-parens: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\n() => {};\na => {};\na => a;\na => {'\\n'};\na.then(foo => {});\na.then(foo => { if (true) {} });\n(a, b, c) => a;\n(a = 10) => a;\n([a, b]) => a;\n({a, b}) => a;\n```\n\n### requireForBlockBody\n\nExamples of **incorrect** code for the `{ \"requireForBlockBody\": true }` option:\n\n```js\n/*eslint arrow-parens: [2, \"as-needed\", { \"requireForBlockBody\": true }]*/\n/*eslint-env es6*/\n\n(a) => a;\na => {};\na => {'\\n'};\na.map((x) => x * x);\na.map(x => {\n  return x * x;\n});\na.then(foo => {});\n```\n\nExamples of **correct** code for the `{ \"requireForBlockBody\": true }` option:\n\n```js\n/*eslint arrow-parens: [2, \"as-needed\", { \"requireForBlockBody\": true }]*/\n/*eslint-env es6*/\n\n(a) => {};\n(a) => {'\\n'};\na => ({});\n() => {};\na => a;\na.then((foo) => {});\na.then((foo) => { if (true) {} });\na((foo) => { if (true) {} });\n(a, b, c) => a;\n(a = 10) => a;\n([a, b]) => a;\n({a, b}) => a;\n```\n\n## Further Reading\n\n* The `\"as-needed\", { \"requireForBlockBody\": true }` rule is directly inspired by the Airbnb\n [JS Style Guide](https://github.com/airbnb/javascript#arrows--one-arg-parens).\n"
	],
	[
		"arrow-spacing",
		"# Require space before/after arrow function's arrow (arrow-spacing)\n\nThis rule normalize style of spacing before/after an arrow function's arrow(`=>`).\n\n```js\n/*eslint-env es6*/\n\n// { \"before\": true, \"after\": true }\n(a) => {}\n\n// { \"before\": false, \"after\": false }\n(a)=>{}\n```\n\n## Rule Details\n\nThis rule takes an object argument with `before` and `after` properties, each with a Boolean value.\n\nThe default configuration is `{ \"before\": true, \"after\": true }`.\n\n`true` means there should be **one or more spaces** and `false` means **no spaces**.\n\nExamples of **incorrect** code for this rule with the default `{ \"before\": true, \"after\": true }` option:\n\n```js\n/*eslint arrow-spacing: \"error\"*/\n/*eslint-env es6*/\n\n()=> {};\n() =>{};\n(a)=> {};\n(a) =>{};\na =>a;\na=> a;\n()=> {'\\n'};\n() =>{'\\n'};\n```\n\nExamples of **correct** code for this rule with the default `{ \"before\": true, \"after\": true }` option:\n\n```js\n/*eslint arrow-spacing: \"error\"*/\n/*eslint-env es6*/\n\n() => {};\n(a) => {};\na => a;\n() => {'\\n'};\n```\n\nExamples of **incorrect** code for this rule with the `{ \"before\": false, \"after\": false }` option:\n\n```js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": false }]*/\n/*eslint-env es6*/\n\n() =>{};\n(a) => {};\n()=> {'\\n'};\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": false, \"after\": false }` option:\n\n```js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": false }]*/\n/*eslint-env es6*/\n\n()=>{};\n(a)=>{};\n()=>{'\\n'};\n```\n\nExamples of **incorrect** code for this rule with the `{ \"before\": false, \"after\": true }` option:\n\n```js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n/*eslint-env es6*/\n\n() =>{};\n(a) => {};\n()=>{'\\n'};\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": false, \"after\": true }` option:\n\n```js\n/*eslint arrow-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n/*eslint-env es6*/\n\n()=> {};\n(a)=> {};\n()=> {'\\n'};\n```\n"
	],
	[
		"block-scoped-var",
		"# Treat var as Block Scoped (block-scoped-var)\n\nThe `block-scoped-var` rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.\n\n## Rule Details\n\nThis rule aims to reduce the usage of variables outside of their binding context and emulate traditional block scope from other languages. This is to help newcomers to the language avoid difficult bugs with variable hoisting.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint block-scoped-var: \"error\"*/\n\nfunction doIf() {\n    if (true) {\n        var build = true;\n    }\n\n    console.log(build);\n}\n\nfunction doIfElse() {\n    if (true) {\n        var build = true;\n    } else {\n        var build = false;\n    }\n}\n\nfunction doTryCatch() {\n    try {\n        var build = 1;\n    } catch (e) {\n        var f = build;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint block-scoped-var: \"error\"*/\n\nfunction doIf() {\n    var build;\n\n    if (true) {\n        build = true;\n    }\n\n    console.log(build);\n}\n\nfunction doIfElse() {\n    var build;\n\n    if (true) {\n        build = true;\n    } else {\n        build = false;\n    }\n}\n\nfunction doTryCatch() {\n    var build;\n    var f;\n\n    try {\n        build = 1;\n    } catch (e) {\n        f = build;\n    }\n}\n```\n\n## Further Reading\n\n* [JavaScript Scoping and Hoisting](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)\n* [var Hoisting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting)\n"
	],
	[
		"block-spacing",
		"# Disallow or enforce spaces inside of blocks after opening block and before closing block (block-spacing)\n\n## Rule Details\n\nThis rule enforces consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line.\n\n## Options\n\nThis rule has a string option:\n\n* `\"always\"` (default) requires one or more spaces\n* `\"never\"` disallows spaces\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint block-spacing: \"error\"*/\n\nfunction foo() {return true;}\nif (foo) { bar = 0;}\nfunction baz() {let i = 0;\n    return i;\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint block-spacing: \"error\"*/\n\nfunction foo() { return true; }\nif (foo) { bar = 0; }\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint block-spacing: [\"error\", \"never\"]*/\n\nfunction foo() { return true; }\nif (foo) { bar = 0;}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint block-spacing: [\"error\", \"never\"]*/\n\nfunction foo() {return true;}\nif (foo) {bar = 0;}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about spacing style inside of blocks, you can safely disable this rule.\n"
	],
	[
		"brace-style",
		"# Require Brace Style (brace-style)\n\nBrace style is closely related to [indent style](https://en.wikipedia.org/wiki/Indent_style) in programming and describes the placement of braces relative to their control statement and body. There are probably a dozen, if not more, brace styles in the world.\n\nThe *one true brace style* is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:\n\n```js\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n```\n\nOne common variant of one true brace style is called Stroustrup, in which the `else` statements in an `if-else` construct, as well as `catch` and `finally`, must be on its own line after the preceding closing brace. For example:\n\n```js\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n```\n\nAnother style is called [Allman](https://en.wikipedia.org/wiki/Indent_style#Allman_style), in which all the braces are expected to be on their own lines without any extra indentation. For example:\n\n```js\nif (foo)\n{\n  bar();\n}\nelse\n{\n  baz();\n}\n```\n\nWhile no style is considered better than the other, most developers agree that having a consistent style throughout a project is important for its long-term maintainability.\n\n## Rule Details\n\nThis rule enforces consistent brace style for blocks.\n\n## Options\n\nThis rule has a string option:\n\n* `\"1tbs\"` (default) enforces one true brace style\n* `\"stroustrup\"` enforces Stroustrup style\n* `\"allman\"` enforces Allman style\n\nThis rule has an object option for an exception:\n\n* `\"allowSingleLine\": true` (default `false`) allows the opening and closing braces for a block to be on the *same* line\n\n### 1tbs\n\nExamples of **incorrect** code for this rule with the default `\"1tbs\"` option:\n\n```js\n/*eslint brace-style: \"error\"*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule with the default `\"1tbs\"` option:\n\n```js\n/*eslint brace-style: \"error\"*/\n\nfunction foo() {\n  return true;\n}\n\nif (foo) {\n  bar();\n}\n\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n\ntry {\n  somethingRisky();\n} catch(e) {\n  handleError();\n}\n\n// when there are no braces, there are no problems\nif (foo) bar();\nelse if (baz) boom();\n```\n\nExamples of **correct** code for this rule with the `\"1tbs\", { \"allowSingleLine\": true }` options:\n\n```js\n/*eslint brace-style: [\"error\", \"1tbs\", { \"allowSingleLine\": true }]*/\n\nfunction nop() { return; }\n\nif (foo) { bar(); }\n\nif (foo) { bar(); } else { baz(); }\n\ntry { somethingRisky(); } catch(e) { handleError(); }\n```\n\n### stroustrup\n\nExamples of **incorrect** code for this rule with the `\"stroustrup\"` option:\n\n```js\n/*eslint brace-style: [\"error\", \"stroustrup\"]*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule with the `\"stroustrup\"` option:\n\n```js\n/*eslint brace-style: [\"error\", \"stroustrup\"]*/\n\nfunction foo() {\n  return true;\n}\n\nif (foo) {\n  bar();\n}\n\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n\ntry {\n  somethingRisky();\n}\ncatch(e) {\n  handleError();\n}\n\n// when there are no braces, there are no problems\nif (foo) bar();\nelse if (baz) boom();\n```\n\nExamples of **correct** code for this rule with the `\"stroustrup\", { \"allowSingleLine\": true }` options:\n\n```js\n/*eslint brace-style: [\"error\", \"stroustrup\", { \"allowSingleLine\": true }]*/\n\nfunction nop() { return; }\n\nif (foo) { bar(); }\n\nif (foo) { bar(); }\nelse { baz(); }\n\ntry { somethingRisky(); }\ncatch(e) { handleError(); }\n```\n\n### allman\n\nExamples of **incorrect** code for this rule with the `\"allman\"` option:\n\n```js\n/*eslint brace-style: [\"error\", \"allman\"]*/\n\nfunction foo() {\n  return true;\n}\n\nif (foo)\n{\n  bar(); }\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nif (foo) {\n  bar();\n} else {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule with the `\"allman\"` option:\n\n```js\n/*eslint brace-style: [\"error\", \"allman\"]*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\nif (foo)\n{\n  bar();\n}\nelse\n{\n  baz();\n}\n\ntry\n{\n  somethingRisky();\n}\ncatch(e)\n{\n  handleError();\n}\n\n// when there are no braces, there are no problems\nif (foo) bar();\nelse if (baz) boom();\n```\n\nExamples of **correct** code for this rule with the `\"allman\", { \"allowSingleLine\": true }` options:\n\n```js\n/*eslint brace-style: [\"error\", \"allman\", { \"allowSingleLine\": true }]*/\n\nfunction nop() { return; }\n\nif (foo) { bar(); }\n\nif (foo) { bar(); }\nelse { baz(); }\n\ntry { somethingRisky(); }\ncatch(e) { handleError(); }\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a particular brace style, don't enable this rule.\n\n## Further Reading\n\n* [Indent style](https://en.wikipedia.org/wiki/Indent_style)\n"
	],
	[
		"callback-return",
		"# Enforce Return After Callback (callback-return)\n\nThe callback pattern is at the heart of most I/O and event-driven programming\n in JavaScript.\n\n```js\nfunction doSomething(err, callback) {\n    if (err) {\n        return callback(err);\n    }\n    callback();\n}\n```\n\nTo prevent calling the callback multiple times it is important to `return` anytime the callback is triggered outside\n of the main function body. Neglecting this technique often leads to issues where you do something more than once.\n For example, in the case of an HTTP request, you may try to send HTTP headers more than once leading Node.js to `throw`\n a `Can't render headers after they are sent to the client.` error.\n\n## Rule Details\n\nThis rule is aimed at ensuring that callbacks used outside of the main function block are always part-of or immediately\npreceding a `return` statement. This rule decides what is a callback based on the name of the function being called.\n\n## Options\n\nThe rule takes a single option - an array of possible callback names - which may include object methods. The default callback names are `callback`, `cb`, `next`.\n\n### Default callback names\n\nExamples of **incorrect** code for this rule with the default `[\"callback\", \"cb\", \"next\"]` option:\n\n```js\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        callback(err);\n    }\n    callback();\n}\n```\n\nExamples of **correct** code for this rule with the default `[\"callback\", \"cb\", \"next\"]` option:\n\n```js\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        return callback(err);\n    }\n    callback();\n}\n```\n\n### Supplied callback names\n\nExamples of **incorrect** code for this rule with the option `[\"done\", \"send.error\", \"send.success\"]`:\n\n```js\n/*eslint callback-return: [\"error\", [\"done\", \"send.error\", \"send.success\"]]*/\n\nfunction foo(err, done) {\n    if (err) {\n        done(err);\n    }\n    done();\n}\n\nfunction bar(err, send) {\n    if (err) {\n        send.error(err);\n    }\n    send.success();\n}\n```\n\nExamples of **correct** code for this rule with the option `[\"done\", \"send.error\", \"send.success\"]`:\n\n```js\n/*eslint callback-return: [\"error\", [\"done\", \"send.error\", \"send.success\"]]*/\n\nfunction foo(err, done) {\n    if (err) {\n        return done(err);\n    }\n    done();\n}\n\nfunction bar(err, send) {\n    if (err) {\n        return send.error(err);\n    }\n    send.success();\n}\n```\n\n## Known Limitations\n\nBecause it is difficult to understand the meaning of a program through static analysis, this rule has limitations:\n\n* *false negatives* when this rule reports correct code, but the program calls the callback more than one time (which is incorrect behavior)\n* *false positives* when this rule reports incorrect code, but the program calls the callback only one time (which is correct behavior)\n\n### Passing the callback by reference\n\nThe static analysis of this rule does not detect that the program calls the callback if it is an argument of a function (for example,  `setTimeout`).\n\nExample of a *false negative* when this rule reports correct code:\n\n```js\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        setTimeout(callback, 0); // this is bad, but WILL NOT warn\n    }\n    callback();\n}\n```\n\n### Triggering the callback within a nested function\n\nThe static analysis of this rule does not detect that the program calls the callback from within a nested function or an immediately-invoked function expression (IIFE).\n\nExample of a *false negative* when this rule reports correct code:\n\n```js\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        process.nextTick(function() {\n            return callback(); // this is bad, but WILL NOT warn\n        });\n    }\n    callback();\n}\n```\n\n### If/else statements\n\nThe static analysis of this rule does not detect that the program calls the callback only one time in each branch of an `if` statement.\n\nExample of a *false positive* when this rule reports incorrect code:\n\n```js\n/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        callback(err); // this is fine, but WILL warn\n    } else {\n        callback();    // this is fine, but WILL warn\n    }\n}\n```\n\n## When Not To Use It\n\nThere are some cases where you might want to call a callback function more than once. In those cases this rule\n may lead to incorrect behavior. In those cases you may want to reserve a special name for those callbacks and\n not include that in the list of callbacks that trigger warnings.\n\n\n## Further Reading\n\n* [The Art Of Node: Callbacks](https://github.com/maxogden/art-of-node#callbacks)\n* [Nodejitsu: What are the error conventions?](https://docs.nodejitsu.com/articles/errors/what-are-the-error-conventions/)\n\n## Related Rules\n\n* [handle-callback-err](handle-callback-err.md)\n"
	],
	[
		"camelcase",
		"# Require CamelCase (camelcase)\n\nWhen it comes to naming variables, style guides generally fall into one of two camps: camelcase (`variableName`) and underscores (`variable_name`). This rule focuses on using the camelcase approach. If your style guide calls for camelCasing your variable names, then this rule is for you!\n\n## Rule Details\n\nThis rule looks for any underscores (`_`) located within the source code. It ignores leading and trailing underscores and only checks those in the middle of a variable name. If ESLint decides that the variable is a constant (all uppercase), then no warning will be thrown. Otherwise, a warning will be thrown. This rule only flags definitions and assignments but not function calls. In case of ES6 `import` statements, this rule only targets the name of the variable that will be imported into the local module scope.\n\n## Options\n\nThis rule has an object option:\n\n* `\"properties\": \"always\"` (default) enforces camelcase style for property names\n* `\"properties\": \"never\"` does not check property names\n* `\"ignoreDestructuring\": false` (default) enforces camelcase style for destructured identifiers\n* `\"ignoreDestructuring\": true` does not check destructured identifiers\n* `allow` (`string[]`) list of properties to accept. Accept regex.\n\n### properties: \"always\"\n\nExamples of **incorrect** code for this rule with the default `{ \"properties\": \"always\" }` option:\n\n```js\n/*eslint camelcase: \"error\"*/\n\nimport { no_camelcased } from \"external-module\"\n\nvar my_favorite_color = \"#112C85\";\n\nfunction do_something() {\n    // ...\n}\n\nobj.do_something = function() {\n    // ...\n};\n\nfunction foo({ no_camelcased }) {\n    // ...\n};\n\nfunction foo({ isCamelcased: no_camelcased }) {\n    // ...\n}\n\nfunction foo({ no_camelcased = 'default value' }) {\n    // ...\n};\n\nvar obj = {\n    my_pref: 1\n};\n\nvar { category_id = 1 } = query;\n\nvar { foo: no_camelcased } = bar;\n\nvar { foo: bar_baz = 1 } = quz;\n```\n\nExamples of **correct** code for this rule with the default `{ \"properties\": \"always\" }` option:\n\n```js\n/*eslint camelcase: \"error\"*/\n\nimport { no_camelcased as camelCased } from \"external-module\";\n\nvar myFavoriteColor   = \"#112C85\";\nvar _myFavoriteColor  = \"#112C85\";\nvar myFavoriteColor_  = \"#112C85\";\nvar MY_FAVORITE_COLOR = \"#112C85\";\nvar foo = bar.baz_boom;\nvar foo = { qux: bar.baz_boom };\n\nobj.do_something();\ndo_something();\nnew do_something();\n\nvar { category_id: category } = query;\n\nfunction foo({ isCamelCased }) {\n    // ...\n};\n\nfunction foo({ isCamelCased: isAlsoCamelCased }) {\n    // ...\n}\n\nfunction foo({ isCamelCased = 'default value' }) {\n    // ...\n};\n\nvar { categoryId = 1 } = query;\n\nvar { foo: isCamelCased } = bar;\n\nvar { foo: isCamelCased = 1 } = quz;\n\n```\n\n### properties: \"never\"\n\nExamples of **correct** code for this rule with the `{ \"properties\": \"never\" }` option:\n\n```js\n/*eslint camelcase: [\"error\", {properties: \"never\"}]*/\n\nvar obj = {\n    my_pref: 1\n};\n```\n\n### ignoreDestructuring: false\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreDestructuring\": false }` option:\n\n```js\n/*eslint camelcase: \"error\"*/\n\nvar { category_id } = query;\n\nvar { category_id = 1 } = query;\n\nvar { category_id: category_id } = query;\n\nvar { category_id: category_alias } = query;\n\nvar { category_id: categoryId, ...other_props } = query;\n```\n\n### ignoreDestructuring: true\n\nExamples of **incorrect** code for this rule with the `{ \"ignoreDestructuring\": true }` option:\n\n```js\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nvar { category_id: category_alias } = query;\n\nvar { category_id, ...other_props } = query;\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreDestructuring\": true }` option:\n\n```js\n/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nvar { category_id } = query;\n\nvar { category_id = 1 } = query;\n\nvar { category_id: category_id } = query;\n```\n\n## allow\n\nExamples of **correct** code for this rule with the `allow` option:\n\n```js\n/*eslint camelcase: [\"error\", {allow: [\"UNSAFE_componentWillMount\"]}]*/\n\nfunction UNSAFE_componentWillMount() {\n    // ...\n}\n```\n\n```js\n/*eslint camelcase: [\"error\", {allow: [\"^UNSAFE_\"]}]*/\n\nfunction UNSAFE_componentWillMount() {\n    // ...\n}\n\nfunction UNSAFE_componentWillMount() {\n    // ...\n}\n```\n\n## When Not To Use It\n\nIf you have established coding standards using a different naming convention (separating words with underscores), turn this rule off.\n"
	],
	[
		"capitalized-comments",
		"# enforce or disallow capitalization of the first letter of a comment (capitalized-comments)\n\nComments are useful for leaving information for future developers. In order for that information to be useful and not distracting, it is sometimes desirable for comments to follow a particular style. One element of comment formatting styles is whether the first word of a comment should be capitalized or lowercase.\n\nIn general, no comment style is any more or less valid than any others, but many developers would agree that a consistent style can improve a project's maintainability.\n\n## Rule Details\n\nThis rule aims to enforce a consistent style of comments across your codebase, specifically by either requiring or disallowing a capitalized letter as the first word character in a comment. This rule will not issue warnings when non-cased letters are used.\n\nBy default, this rule will require a non-lowercase letter at the beginning of comments.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/* eslint capitalized-comments: [\"error\"] */\n\n// lowercase comment\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n\n// Capitalized comment\n\n// 1. Non-letter at beginning of comment\n\n// 丈 Non-Latin character at beginning of comment\n\n/* eslint semi:off */\n/* eslint-env node */\n/* eslint-disable */\n/* eslint-enable */\n/* istanbul ignore next */\n/* jscs:enable */\n/* jshint asi:true */\n/* global foo */\n/* globals foo */\n/* exported myVar */\n// eslint-disable-line\n// eslint-disable-next-line\n// https://github.com\n\n```\n\n### Options\n\nThis rule has two options: a string value `\"always\"` or `\"never\"` which determines whether capitalization of the first word of a comment should be required or forbidden, and optionally an object containing more configuration parameters for the rule.\n\nHere are the supported object options:\n\n* `ignorePattern`: A string representing a regular expression pattern of words that should be ignored by this rule. If the first word of a comment matches the pattern, this rule will not report that comment.\n    * Note that the following words are always ignored by this rule: `[\"jscs\", \"jshint\", \"eslint\", \"istanbul\", \"global\", \"globals\", \"exported\"]`.\n* `ignoreInlineComments`: If this is `true`, the rule will not report on comments in the middle of code. By default, this is `false`.\n* `ignoreConsecutiveComments`: If this is `true`, the rule will not report on a comment which violates the rule, as long as the comment immediately follows another comment. By default, this is `false`.\n\nHere is an example configuration:\n\n```json\n{\n    \"capitalized-comments\": [\n        \"error\",\n        \"always\",\n        {\n            \"ignorePattern\": \"pragma|ignored\",\n            \"ignoreInlineComments\": true\n        }\n    ]\n}\n```\n\n#### `\"always\"`\n\nUsing the `\"always\"` option means that this rule will report any comments which start with a lowercase letter. This is the default configuration for this rule.\n\nNote that configuration comments and comments which start with URLs are never reported.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\"] */\n\n// lowercase comment\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\"] */\n\n// Capitalized comment\n\n// 1. Non-letter at beginning of comment\n\n// 丈 Non-Latin character at beginning of comment\n\n/* eslint semi:off */\n/* eslint-env node */\n/* eslint-disable */\n/* eslint-enable */\n/* istanbul ignore next */\n/* jscs:enable */\n/* jshint asi:true */\n/* global foo */\n/* globals foo */\n/* exported myVar */\n// eslint-disable-line\n// eslint-disable-next-line\n// https://github.com\n\n```\n\n#### `\"never\"`\n\nUsing the `\"never\"` option means that this rule will report any comments which start with an uppercase letter.\n\nExamples of **incorrect** code with the `\"never\"` option:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"never\"] */\n\n// Capitalized comment\n\n```\n\nExamples of **correct** code with the `\"never\"` option:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"never\"] */\n\n// lowercase comment\n\n// 1. Non-letter at beginning of comment\n\n// 丈 Non-Latin character at beginning of comment\n\n```\n\n#### `ignorePattern`\n\nThe `ignorePattern` object takes a string value, which is used as a regular expression applied to the first word of a comment.\n\nExamples of **correct** code with the `\"ignorePattern\"` option set to `\"pragma\"`:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignorePattern\": \"pragma\" }] */\n\nfunction foo() {\n    /* pragma wrap(true) */\n}\n\n```\n\n#### `ignoreInlineComments`\n\nSetting the `ignoreInlineComments` option to `true` means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.\n\nExamples of **correct** code with the `\"ignoreInlineComments\"` option set to `true`:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignoreInlineComments\": true }] */\n\nfunction foo(/* ignored */ a) {\n}\n\n```\n\n#### `ignoreConsecutiveComments`\n\nIf the `ignoreConsecutiveComments` option is set to `true`, then comments which otherwise violate the rule will not be reported as long as they immediately follow another comment. This can be applied more than once.\n\nExamples of **correct** code with `ignoreConsecutiveComments` set to `true`:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignoreConsecutiveComments\": true }] */\n\n// This comment is valid since it has the correct capitalization.\n// this comment is ignored since it follows another comment,\n// and this one as well because it follows yet another comment.\n\n/* Here is a block comment which has the correct capitalization, */\n/* but this one is ignored due to being consecutive; */\n/*\n * in fact, even if any of these are multi-line, that is fine too.\n */\n```\n\nExamples of **incorrect** code with `ignoreConsecutiveComments` set to `true`:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"ignoreConsecutiveComments\": true }] */\n\n// this comment is invalid, but only on this line.\n// this comment does NOT get reported, since it is a consecutive comment.\n```\n\n### Using Different Options for Line and Block Comments\n\nIf you wish to have a different configuration for line comments and block comments, you can do so by using two different object configurations (note that the capitalization option will be enforced consistently for line and block comments):\n\n```json\n{\n    \"capitalized-comments\": [\n        \"error\",\n        \"always\",\n        {\n            \"line\": {\n                \"ignorePattern\": \"pragma|ignored\",\n            },\n            \"block\": {\n                \"ignoreInlineComments\": true,\n                \"ignorePattern\": \"ignored\"\n            }\n        }\n    ]\n}\n```\n\nExamples of **incorrect** code with different line and block comment configuration:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"block\": { \"ignorePattern\": \"blockignore\" } }] */\n\n// capitalized line comment, this is incorrect, blockignore does not help here\n/* lowercased block comment, this is incorrect too */\n\n```\n\nExamples of **correct** code with different line and block comment configuration:\n\n```js\n/* eslint capitalized-comments: [\"error\", \"always\", { \"block\": { \"ignorePattern\": \"blockignore\" } }] */\n\n// Uppercase line comment, this is correct\n/* blockignore lowercase block comment, this is correct due to ignorePattern */\n\n```\n\n## When Not To Use It\n\nThis rule can be disabled if you do not care about the grammatical style of comments in your codebase.\n\n## Compatibility\n\n* **JSCS**: [requireCapitalizedComments](https://jscs-dev.github.io/rule/requireCapitalizedComments)\n* **JSCS**: [disallowCapitalizedComments](https://jscs-dev.github.io/rule/disallowCapitalizedComments)\n"
	],
	[
		"class-methods-use-this",
		"# Enforce that class methods utilize `this` (class-methods-use-this)\n\nIf a class method does not use `this`, it can *sometimes* be made into a static function. If you do convert the method into a static function, instances of the class that call that particular method have to be converted to a static call as well (`MyClass.callStaticMethod()`)\n\nIt's possible to have a class method which doesn't use `this`, such as:\n\n```js\nclass A {\n    constructor() {\n        this.a = \"hi\";\n    }\n\n    print() {\n        console.log(this.a);\n    }\n\n    sayHi() {\n        console.log(\"hi\");\n    }\n}\n\nlet a = new A();\na.sayHi(); // => \"hi\"\n```\n\nIn the example above, the `sayHi` method doesn't use `this`, so we can make it a static method:\n\n```js\nclass A {\n    constructor() {\n        this.a = \"hi\";\n    }\n\n    print() {\n        console.log(this.a);\n    }\n\n    static sayHi() {\n        console.log(\"hi\");\n    }\n}\n\nA.sayHi(); // => \"hi\"\n```\n\nAlso note in the above examples that if you switch a method to a static method, *instances* of the class that call the static method (`let a = new A(); a.sayHi();`) have to be updated to being a static call (`A.sayHi();`) instead of having the instance of the *class* call the method\n\n## Rule Details\n\nThis rule is aimed to flag class methods that do not use `this`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint class-methods-use-this: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    foo() {\n        console.log(\"Hello World\");     /*error Expected 'this' to be used by class method 'foo'.*/\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint class-methods-use-this: \"error\"*/\n/*eslint-env es6*/\nclass A {\n    foo() {\n        this.bar = \"Hello World\"; // OK, this is used\n    }\n}\n\nclass A {\n    constructor() {\n        // OK. constructor is exempt\n    }\n}\n\nclass A {\n    static foo() {\n        // OK. static methods aren't expected to use this.\n    }\n}\n```\n\n## Options\n\n### Exceptions\n\n```\n\"class-methods-use-this\": [<enabled>, { \"exceptMethods\": [<...exceptions>] }]\n```\n\nThe `exceptMethods` option allows you to pass an array of method names for which you would like to ignore warnings. For example, you might have a spec from an external library that requires you to overwrite a method as a regular function (and not as a static method) and does not use `this` inside the function body. In this case, you can add that method to ignore in the warnings.\n\nExamples of **incorrect** code for this rule when used without exceptMethods:\n\n```js\n/*eslint class-methods-use-this: \"error\"*/\n\nclass A {\n    foo() {\n    }\n}\n```\n\nExamples of **correct** code for this rule when used with exceptMethods:\n\n```js\n/*eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"foo\"] }] */\n\nclass A {\n    foo() {\n    }\n}\n```\n\n## Further Reading\n\n* [Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\n* [Static Methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static)\n"
	],
	[
		"comma-dangle",
		"# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"never\"\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)\n    * `functions` should only be enabled when linting ECMAScript 2017 or higher.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\n"
	],
	[
		"comma-spacing",
		"# Enforces spacing around commas (comma-spacing)\n\nSpacing around commas improves readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.\n\n```js\nvar foo = 1, bar = 2;\nvar foo = 1 ,bar = 2;\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing before and after commas in variable declarations, array literals, object literals, function parameters, and sequences.\n\nThis rule does not apply in an `ArrayExpression` or `ArrayPattern` in either of the following cases:\n\n* adjacent null elements\n* an initial null element, to avoid conflicts with the [`array-bracket-spacing`](array-bracket-spacing.md) rule\n\n## Options\n\nThis rule has an object option:\n\n* `\"before\": false` (default) disallows spaces before commas\n* `\"before\": true` requires one or more spaces before commas\n* `\"after\": true` (default) requires one or more spaces after commas\n* `\"after\": false` disallows spaces after commas\n\n### after\n\nExamples of **incorrect** code for this rule with the default `{ \"before\": false, \"after\": true }` options:\n\n```js\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\nvar foo = 1 ,bar = 2;\nvar arr = [1 , 2];\nvar obj = {\"foo\": \"bar\" ,\"baz\": \"qur\"};\nfoo(a ,b);\nnew Foo(a ,b);\nfunction foo(a ,b){}\na ,b\n```\n\nExamples of **correct** code for this rule with the default `{ \"before\": false, \"after\": true }` options:\n\n```js\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n\nvar foo = 1, bar = 2\n    , baz = 3;\nvar arr = [1, 2];\nvar arr = [1,, 3]\nvar obj = {\"foo\": \"bar\", \"baz\": \"qur\"};\nfoo(a, b);\nnew Foo(a, b);\nfunction foo(a, b){}\na, b\n```\n\nExample of **correct** code for this rule with initial null element for the default `{ \"before\": false, \"after\": true }` options:\n\n```js\n/*eslint comma-spacing: [\"error\", { \"before\": false, \"after\": true }]*/\n/*eslint array-bracket-spacing: [\"error\", \"always\"]*/\n\nvar arr = [ , 2, 3 ]\n```\n\n### before\n\nExamples of **incorrect** code for this rule with the `{ \"before\": true, \"after\": false }` options:\n\n```js\n/*eslint comma-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo = 1, bar = 2;\nvar arr = [1 , 2];\nvar obj = {\"foo\": \"bar\", \"baz\": \"qur\"};\nnew Foo(a,b);\nfunction foo(a,b){}\na, b\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": true, \"after\": false }` options:\n\n```js\n/*eslint comma-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo = 1 ,bar = 2 ,\n    baz = true;\nvar arr = [1 ,2];\nvar arr = [1 ,,3]\nvar obj = {\"foo\": \"bar\" ,\"baz\": \"qur\"};\nfoo(a ,b);\nnew Foo(a ,b);\nfunction foo(a ,b){}\na ,b\n```\n\nExamples of **correct** code for this rule with initial null element for the `{ \"before\": true, \"after\": false }` options:\n\n```js\n/*eslint comma-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n/*eslint array-bracket-spacing: [\"error\", \"never\"]*/\n\nvar arr = [,2 ,3]\n```\n\n## When Not To Use It\n\nIf your project will not be following a consistent comma-spacing pattern, turn this rule off.\n\n\n## Further Reading\n\n* [Javascript](http://javascript.crockford.com/code.html)\n* [Dojo Style Guide](https://dojotoolkit.org/reference-guide/1.9/developer/styleguide.html)\n\n\n## Related Rules\n\n* [array-bracket-spacing](array-bracket-spacing.md)\n* [comma-style](comma-style.md)\n* [space-in-brackets](space-in-brackets.md) (deprecated)\n* [space-in-parens](space-in-parens.md)\n* [space-infix-ops](space-infix-ops.md)\n* [space-after-keywords](space-after-keywords.md)\n* [space-unary-ops](space-unary-ops.md)\n* [space-return-throw-case](space-return-throw-case.md)\n"
	],
	[
		"comma-style",
		"# Comma style (comma-style)\n\nThe Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:\n\n* The standard style, in which commas are placed at the end of the current line\n* Comma First style, in which commas are placed at the start of the next line\n\nOne of the justifications for using Comma First style is that it can help track missing and trailing commas. These are problematic because missing commas in variable declarations can lead to the leakage of global variables and trailing commas can lead to errors in older versions of IE.\n\n## Rule Details\n\nThis rule enforce consistent comma style in array literals, object literals, and variable declarations.\n\nThis rule does not apply in either of the following cases:\n\n* comma preceded and followed by linebreak (lone comma)\n* single-line array literals, object literals, and variable declarations\n\n## Options\n\nThis rule has a string option:\n\n* `\"last\"` (default) requires a comma after and on the same line as an array element, object property, or variable declaration\n* `\"first\"` requires a comma before and on the same line as an array element, object property, or variable declaration\n\nThis rule also accepts an additional `exceptions` object:\n\n* `\"exceptions\"` has properties whose names correspond to node types in the abstract syntax tree (AST) of JavaScript code:\n\n    * `\"ArrayExpression\": true` ignores comma style in array literals\n    * `\"ArrayPattern\": true` ignores comma style in array patterns of destructuring\n    * `\"ArrowFunctionExpression\": true` ignores comma style in the parameters of arrow function expressions\n    * `\"CallExpression\": true` ignores comma style in the arguments of function calls\n    * `\"FunctionDeclaration\": true` ignores comma style in the parameters of function declarations\n    * `\"FunctionExpression\": true` ignores comma style in the parameters of function expressions\n    * `\"ImportDeclaration\": true` ignores comma style in the specifiers of import declarations\n    * `\"ObjectExpression\": true` ignores comma style in object literals\n    * `\"ObjectPattern\": true` ignores comma style in object patterns of destructuring\n    * `\"VariableDeclaration\": true` ignores comma style in variable declarations\n    * `\"NewExpression\": true` ignores comma style in the parameters of constructor expressions\n\nA way to determine the node types as defined by [ESTree](https://github.com/estree/estree) is to use the [online demo](https://eslint.org/parser).\n\n### last\n\nExamples of **incorrect** code for this rule with the default `\"last\"` option:\n\n```js\n/*eslint comma-style: [\"error\", \"last\"]*/\n\nvar foo = 1\n,\nbar = 2;\n\nvar foo = 1\n  , bar = 2;\n\nvar foo = [\"apples\"\n           , \"oranges\"];\n\nfunction bar() {\n    return {\n        \"a\": 1\n        ,\"b:\": 2\n    };\n}\n```\n\nExamples of **correct** code for this rule with the default `\"last\"` option:\n\n```js\n/*eslint comma-style: [\"error\", \"last\"]*/\n\nvar foo = 1, bar = 2;\n\nvar foo = 1,\n    bar = 2;\n\nvar foo = [\"apples\",\n           \"oranges\"];\n\nfunction bar() {\n    return {\n        \"a\": 1,\n        \"b:\": 2\n    };\n}\n```\n\n### first\n\nExamples of **incorrect** code for this rule with the `\"first\"` option:\n\n```js\n/*eslint comma-style: [\"error\", \"first\"]*/\n\nvar foo = 1,\n    bar = 2;\n\nvar foo = [\"apples\",\n           \"oranges\"];\n\nfunction bar() {\n    return {\n        \"a\": 1,\n        \"b:\": 2\n    };\n}\n```\n\nExamples of **correct** code for this rule with the `\"first\"` option:\n\n```js\n/*eslint comma-style: [\"error\", \"first\"]*/\n\nvar foo = 1, bar = 2;\n\nvar foo = 1\n    ,bar = 2;\n\nvar foo = [\"apples\"\n          ,\"oranges\"];\n\nfunction bar() {\n    return {\n        \"a\": 1\n        ,\"b:\": 2\n    };\n}\n```\n\n### exceptions\n\nAn example use case is to enforce comma style *only* in var statements.\n\nExamples of **incorrect** code for this rule with sample `\"first\", { \"exceptions\": { … } }` options:\n\n```js\n/*eslint comma-style: [\"error\", \"first\", { \"exceptions\": { \"ArrayExpression\": true, \"ObjectExpression\": true } }]*/\n\nvar o = {},\n    a = [];\n```\n\nExamples of **correct** code for this rule with sample `\"first\", { \"exceptions\": { … } }` options:\n\n```js\n/*eslint comma-style: [\"error\", \"first\", { \"exceptions\": { \"ArrayExpression\": true, \"ObjectExpression\": true } }]*/\n\nvar o = {fst:1,\n         snd: [1,\n               2]}\n  , a = [];\n```\n\n## When Not To Use It\n\nThis rule can safely be turned off if your project does not care about enforcing a consistent comma style.\n\n\n## Further Reading\n\nFor more information on the Comma First style:\n\n* [A better coding convention for lists and object literals in JavaScript by isaacs](https://gist.github.com/isaacs/357981)\n* [npm coding style guideline](https://docs.npmjs.com/misc/coding-style)\n\n\n## Related Rules\n\n* [operator-linebreak](operator-linebreak.md)\n"
	],
	[
		"complexity",
		"# Limit Cyclomatic Complexity (complexity)\n\nCyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.\n\n```js\nfunction a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is `20`).\n\nExamples of **incorrect** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n```\n\nExamples of **correct** code for a maximum of 2:\n\n```js\n/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else {\n        return 4;\n    }\n}\n```\n\n## Options\n\nOptionally, you may specify a `max` object property:\n\n```json\n\"complexity\": [\"error\", 2]\n```\n\nis equivalent to\n\n```json\n\"complexity\": [\"error\", { \"max\": 2 }]\n```\n\n**Deprecated:** the object property `maximum` is deprecated. Please use the property `max` instead.\n\n## When Not To Use It\n\nIf you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.\n\n## Further Reading\n\n* [Cyclomatic Complexity](https://en.wikipedia.org/wiki/Cyclomatic_complexity)\n* [Complexity Analysis of JavaScript Code](https://ariya.io/2012/12/complexity-analysis-of-javascript-code)\n* [More about Complexity in JavaScript](https://craftsmanshipforsoftware.com/2015/05/25/complexity-for-javascript/)\n* [About Complexity](https://web.archive.org/web/20160808115119/http://jscomplexity.org/complexity)\n* [Discussion about Complexity in ESLint and more links](https://github.com/eslint/eslint/issues/4808#issuecomment-167795140)\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-lines](max-lines.md)\n* [max-lines-per-function](max-lines-per-function.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\n"
	],
	[
		"computed-property-spacing",
		"# Disallow or enforce spaces inside of computed properties (computed-property-spacing)\n\nWhile formatting preferences are very personal, a number of style guides require\nor disallow spaces between computed properties in the following situations:\n\n```js\n/*eslint-env es6*/\n\nvar obj = { prop: \"value\" };\nvar a = \"prop\";\nvar x = obj[a]; // computed property in object member expression\n\nvar a = \"prop\";\nvar obj = {\n  [a]: \"value\" // computed property key in object literal (ECMAScript 6)\n};\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing inside computed property brackets.\n\nIt either requires or disallows spaces between the brackets and the values inside of them.\nThis rule does not apply to brackets that are separated from the adjacent value by a newline.\n\n## Options\n\nThis rule has a string option:\n\n* `\"never\"` (default) disallows spaces inside computed property brackets\n* `\"always\"` requires one or more spaces inside computed property brackets\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint computed-property-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nobj[foo ]\nobj[ 'foo']\nvar x = {[ b ]: a}\nobj[foo[ bar ]]\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint computed-property-spacing: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nobj[foo]\nobj['foo']\nvar x = {[b]: a}\nobj[foo[bar]]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint computed-property-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nobj[foo]\nvar x = {[b]: a}\nobj[ foo]\nobj['foo' ]\nobj[foo[ bar ]]\nvar x = {[ b]: a}\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint computed-property-spacing: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nobj[ foo ]\nobj[ 'foo' ]\nvar x = {[ b ]: a}\nobj[ foo[ bar ] ]\n```\n\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of computed properties.\n\n## Related Rules\n\n* [array-bracket-spacing](array-bracket-spacing.md)\n* [comma-spacing](comma-spacing.md)\n* [space-in-parens](space-in-parens.md)\n"
	],
	[
		"consistent-return",
		"# require `return` statements to either always or never specify values (consistent-return)\n\nUnlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.\n\nA confusing aspect of JavaScript is that a function returns `undefined` if any of the following are true:\n\n* it does not execute a `return` statement before it exits\n* it executes `return` which does not specify a value explicitly\n* it executes `return undefined`\n* it executes `return void` followed by an expression (for example, a function call)\n* it executes `return` followed by any other expression which evaluates to `undefined`\n\nIf any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:\n\n* a code path through the function returns a Boolean value `true`\n* another code path does not return a value explicitly, therefore returns `undefined` implicitly\n\n```js\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires `return` statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the `new` operator) return the instantiated object implicitly if they do not return another object explicitly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction Foo() {\n    if (!(this instanceof Foo)) {\n        return new Foo();\n    }\n\n    this.a = 0;\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"treatUndefinedAsUnspecified\": false` (default) always either specify values or return `undefined` implicitly only.\n* `\"treatUndefinedAsUnspecified\": true` always either specify values or return `undefined` explicitly or implicitly.\n\n### treatUndefinedAsUnspecified\n\nExamples of **incorrect** code for this rule with the default `{ \"treatUndefinedAsUnspecified\": false }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    return true;\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    return true;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"treatUndefinedAsUnspecified\": true }` option:\n\n```js\n/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": true }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}\n```\n\n## When Not To Use It\n\nIf you want to allow functions to have different `return` behavior depending on code branching, then it is safe to disable this rule.\n"
	],
	[
		"consistent-this",
		"# Require Consistent This (consistent-this)\n\nIt is often necessary to capture the current execution context in order to make it available subsequently. A prominent example of this are jQuery callbacks:\n\n```js\nvar that = this;\njQuery('li').click(function (event) {\n    // here, \"this\" is the HTMLElement where the click event occurred\n    that.setFoo(42);\n});\n```\n\nThere are many commonly used aliases for `this` such as `that`, `self` or `me`. It is desirable to ensure that whichever alias the team agrees upon is used consistently throughout the application.\n\n## Rule Details\n\nThis rule enforces two things about variables with the designated alias names for `this`:\n\n* If a variable with a designated name is declared, it *must* be either initialized (in the declaration) or assigned (in the same scope as the declaration) the value `this`.\n* If a variable is initialized or assigned the value `this`, the name of the variable *must* be a designated alias.\n\n## Options\n\nThis rule has one or more string options:\n\n* designated alias names for `this` (default `\"that\"`)\n\nExamples of **incorrect** code for this rule with the default `\"that\"` option:\n\n```js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that = 42;\n\nvar self = this;\n\nthat = 42;\n\nself = this;\n```\n\nExamples of **correct** code for this rule with the default `\"that\"` option:\n\n```js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that = this;\n\nvar self = 42;\n\nvar self;\n\nthat = this;\n\nfoo.bar = this;\n```\n\nExamples of **incorrect** code for this rule with the default `\"that\"` option, if the variable is not initialized:\n\n```js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that;\nfunction f() {\n    that = this;\n}\n```\n\nExamples of **correct** code for this rule with the default `\"that\"` option, if the variable is not initialized:\n\n```js\n/*eslint consistent-this: [\"error\", \"that\"]*/\n\nvar that;\nthat = this;\n\nvar foo, that;\nfoo = 42;\nthat = this;\n```\n\n## When Not To Use It\n\nIf you need to capture nested context, `consistent-this` is going to be problematic. Code of that nature is usually difficult to read and maintain and you should consider refactoring it.\n"
	],
	[
		"constructor-super",
		"# Verify calls of `super()` in constructors (constructor-super)\n\nConstructors of derived classes must call `super()`.\nConstructors of non derived classes must not call `super()`.\nIf this is not observed, the JavaScript engine will raise a runtime error.\n\nThis rule checks whether or not there is a valid `super()` call.\n\n## Rule Details\n\nThis rule is aimed to flag invalid/missing `super()` calls.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint constructor-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    constructor() {\n        super();  // This is a SyntaxError.\n    }\n}\n\nclass A extends B {\n    constructor() { }  // Would throw a ReferenceError.\n}\n\n// Classes which inherits from a non constructor are always problems.\nclass A extends null {\n    constructor() {\n        super();  // Would throw a TypeError.\n    }\n}\n\nclass A extends null {\n    constructor() { }  // Would throw a ReferenceError.\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint constructor-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    constructor() { }\n}\n\nclass A extends B {\n    constructor() {\n        super();\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about invalid/missing `super()` callings in constructors, you can safely disable this rule.\n"
	],
	[
		"curly",
		"# Require Following Curly Brace Conventions (curly)\n\nJavaScript allows the omission of curly braces when a block contains only one statement. However, it is considered by many to be best practice to _never_ omit curly braces around blocks, even when they are optional, because it can lead to bugs and reduces code clarity. So the following:\n\n```js\nif (foo) foo++;\n```\n\nCan be rewritten as:\n\n```js\nif (foo) {\n    foo++;\n}\n```\n\nThere are, however, some who prefer to only use braces when there is more than one statement to be executed.\n\n## Rule Details\n\nThis rule is aimed at preventing bugs and increasing code clarity by ensuring that block statements are wrapped in curly braces. It will warn when it encounters blocks that omit curly braces.\n\n## Options\n\n### all\n\nExamples of **incorrect** code for the default `\"all\"` option:\n\n```js\n/*eslint curly: \"error\"*/\n\nif (foo) foo++;\n\nwhile (bar)\n    baz();\n\nif (foo) {\n    baz();\n} else qux();\n```\n\nExamples of **correct** code for the default `\"all\"` option:\n\n```js\n/*eslint curly: \"error\"*/\n\nif (foo) {\n    foo++;\n}\n\nwhile (bar) {\n    baz();\n}\n\nif (foo) {\n    baz();\n} else {\n    qux();\n}\n```\n\n### multi\n\nBy default, this rule warns whenever `if`, `else`, `for`, `while`, or `do` are used without block statements as their body. However, you can specify that block statements should be used only when there are multiple statements in the block and warn when there is only one statement in the block.\n\nExamples of **incorrect** code for the `\"multi\"` option:\n\n```js\n/*eslint curly: [\"error\", \"multi\"]*/\n\nif (foo) {\n    foo++;\n}\n\nif (foo) bar();\nelse {\n    foo++;\n}\n\nwhile (true) {\n    doSomething();\n}\n\nfor (var i=0; i < items.length; i++) {\n    doSomething();\n}\n```\n\nExamples of **correct** code for the `\"multi\"` option:\n\n```js\n/*eslint curly: [\"error\", \"multi\"]*/\n\nif (foo) foo++;\n\nelse foo();\n\nwhile (true) {\n    doSomething();\n    doSomethingElse();\n}\n```\n\n### multi-line\n\nAlternatively, you can relax the rule to allow brace-less single-line `if`, `else if`, `else`, `for`, `while`, or `do`, while still enforcing the use of curly braces for other instances.\n\nExamples of **incorrect** code for the `\"multi-line\"` option:\n\n```js\n/*eslint curly: [\"error\", \"multi-line\"]*/\n\nif (foo)\n  doSomething();\nelse\n  doSomethingElse();\n\nif (foo) foo(\n  bar,\n  baz);\n```\n\nExamples of **correct** code for the `\"multi-line\"` option:\n\n```js\n/*eslint curly: [\"error\", \"multi-line\"]*/\n\nif (foo) foo++; else doSomething();\n\nif (foo) foo++;\nelse if (bar) baz()\nelse doSomething();\n\ndo something();\nwhile (foo);\n\nwhile (foo\n  && bar) baz();\n\nif (foo) {\n    foo++;\n}\n\nif (foo) { foo++; }\n\nwhile (true) {\n    doSomething();\n    doSomethingElse();\n}\n```\n\n### multi-or-nest\n\nYou can use another configuration that forces brace-less `if`, `else if`, `else`, `for`, `while`, or `do` if their body contains only one single-line statement. And forces braces in all other cases.\n\nExamples of **incorrect** code for the `\"multi-or-nest\"` option:\n\n```js\n/*eslint curly: [\"error\", \"multi-or-nest\"]*/\n\nif (!foo)\n    foo = {\n        bar: baz,\n        qux: foo\n    };\n\nwhile (true)\n  if(foo)\n      doSomething();\n  else\n      doSomethingElse();\n\nif (foo) {\n    foo++;\n}\n\nwhile (true) {\n    doSomething();\n}\n\nfor (var i = 0; foo; i++) {\n    doSomething();\n}\n\nif (foo)\n    // some comment\n    bar();\n```\n\nExamples of **correct** code for the `\"multi-or-nest\"` option:\n\n```js\n/*eslint curly: [\"error\", \"multi-or-nest\"]*/\n\nif (!foo) {\n    foo = {\n        bar: baz,\n        qux: foo\n    };\n}\n\nwhile (true) {\n  if(foo)\n      doSomething();\n  else\n      doSomethingElse();\n}\n\nif (foo)\n    foo++;\n\nwhile (true)\n    doSomething();\n\nfor (var i = 0; foo; i++)\n    doSomething();\n\nif (foo) {\n    // some comment\n    bar();\n}\n```\n\n### consistent\n\nWhen using any of the `multi*` options, you can add an option to enforce all bodies of a `if`,\n`else if` and `else` chain to be with or without braces.\n\nExamples of **incorrect** code for the `\"multi\", \"consistent\"` options:\n\n```js\n/*eslint curly: [\"error\", \"multi\", \"consistent\"]*/\n\nif (foo) {\n    bar();\n    baz();\n} else\n    buz();\n\nif (foo)\n    bar();\nelse if (faa)\n    bor();\nelse {\n    other();\n    things();\n}\n\nif (true)\n    foo();\nelse {\n    baz();\n}\n\nif (foo) {\n    foo++;\n}\n```\n\nExamples of **correct** code for the `\"multi\", \"consistent\"` options:\n\n```js\n/*eslint curly: [\"error\", \"multi\", \"consistent\"]*/\n\nif (foo) {\n    bar();\n    baz();\n} else {\n    buz();\n}\n\nif (foo) {\n    bar();\n} else if (faa) {\n    bor();\n} else {\n    other();\n    things();\n}\n\nif (true)\n    foo();\nelse\n    baz();\n\nif (foo)\n    foo++;\n\n```\n\n## When Not To Use It\n\nIf you have no strict conventions about when to use block statements and when not to, you can safely disable this rule.\n"
	],
	[
		"default-case",
		"# Require Default Case in Switch Statements (default-case)\n\nSome code conventions require that all `switch` statements have a `default` case, even if the default case is empty, such as:\n\n```js\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n        break;\n\n    default:\n        // do nothing\n}\n```\n\nThe thinking is that it's better to always explicitly state what the default behavior should be so that it's clear whether or not the developer forgot to include the default behavior by mistake.\n\nOther code conventions allow you to skip the `default` case so long as there is a comment indicating the omission is intentional, such as:\n\n```js\nswitch (foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n        break;\n\n    // no default\n}\n```\n\nOnce again, the intent here is to show that the developer intended for there to be no default behavior.\n\n## Rule Details\n\nThis rule aims to require `default` case in `switch` statements. You may optionally include a `// no default` after the last `case` if there is no `default` case. The comment may be in any desired case, such as `// No Default`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint default-case: \"error\"*/\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n}\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint default-case: \"error\"*/\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    default:\n        /* code */\n        break;\n}\n\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    // no default\n}\n\nswitch (a) {\n    case 1:\n        /* code */\n        break;\n\n    // No Default\n}\n```\n\n## Options\n\nThis rule accepts a single options argument:\n\n* Set the `commentPattern` option to a regular expression string to change the default `/^no default$/i` comment test pattern\n\n### commentPattern\n\nExamples of **correct** code for the `{ \"commentPattern\": \"^skip\\\\sdefault\" }` option:\n\n```js\n/*eslint default-case: [\"error\", { \"commentPattern\": \"^skip\\\\sdefault\" }]*/\n\nswitch(a) {\n    case 1:\n        /* code */\n        break;\n\n    // skip default\n}\n\nswitch(a) {\n    case 1:\n        /* code */\n        break;\n\n    // skip default case\n}\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a `default` case for `switch` statements, you can safely disable this rule.\n\n## Related Rules\n\n* [no-fallthrough](no-fallthrough.md)\n"
	],
	[
		"dot-location",
		"# Enforce newline before and after dot (dot-location)\n\nJavaScript allows you to place newlines before or after a dot in a member expression.\n\nConsistency in placing a newline before or after the dot can greatly increase readability.\n\n```js\nvar a = universe.\n        galaxy;\n\nvar b = universe\n       .galaxy;\n```\n\n## Rule Details\n\nThis rule aims to enforce newline consistency in member expressions. This rule prevents the use of mixed newlines around the dot in a member expression.\n\n## Options\n\nThe rule takes one option, a string:\n\n* If it is `\"object\"` (default), the dot in a member expression should be on the same line as the object portion.\n* If it is `\"property\"`, the dot in a member expression should be on the same line as the property portion.\n\n### object\n\nThe default `\"object\"` option requires the dot to be on the same line as the object.\n\nExamples of **incorrect** code for the default `\"object\"` option:\n\n```js\n/*eslint dot-location: [\"error\", \"object\"]*/\n\nvar foo = object\n.property;\n```\n\nExamples of **correct** code for the default `\"object\"` option:\n\n```js\n/*eslint dot-location: [\"error\", \"object\"]*/\n\nvar foo = object.\nproperty;\n\nvar bar = (\n    object\n).\nproperty;\n\nvar baz = object.property;\n```\n\n### property\n\nThe `\"property\"` option requires the dot to be on the same line as the property.\n\nExamples of **incorrect** code for the `\"property\"` option:\n\n```js\n/*eslint dot-location: [\"error\", \"property\"]*/\n\nvar foo = object.\nproperty;\n```\n\nExamples of **correct** code for the `\"property\"` option:\n\n```js\n/*eslint dot-location: [\"error\", \"property\"]*/\n\nvar foo = object\n.property;\nvar bar = object.property;\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of newlines before or after dots in member expressions.\n\n## Related Rules\n\n* [newline-after-var](newline-after-var.md)\n* [dot-notation](dot-notation.md)\n"
	],
	[
		"dot-notation",
		"# Require Dot Notation (dot-notation)\n\nIn JavaScript, one can access properties using the dot notation (`foo.bar`) or square-bracket notation (`foo[\"bar\"]`). However, the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.\n\n```js\nfoo[\"bar\"];\n```\n\n## Rule Details\n\nThis rule is aimed at maintaining code consistency and improving code readability by encouraging use of the dot notation style whenever possible. As such, it will warn when it encounters an unnecessary use of square-bracket notation.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint dot-notation: \"error\"*/\n\nvar x = foo[\"bar\"];\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint dot-notation: \"error\"*/\n\nvar x = foo.bar;\n\nvar x = foo[bar];    // Property name is a variable, square-bracket notation required\n```\n\n## Options\n\nThis rule accepts a single options argument:\n\n* Set the `allowKeywords` option to `false` (default is `true`) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.\n* Set the `allowPattern` option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).\n\n### allowKeywords\n\nExamples of **correct** code for the `{ \"allowKeywords\": false }` option:\n\n```js\n/*eslint dot-notation: [\"error\", { \"allowKeywords\": false }]*/\n\nvar foo = { \"class\": \"CS 101\" }\nvar x = foo[\"class\"]; // Property name is a reserved word, square-bracket notation required\n```\n\n### allowPattern\n\nFor example, when preparing data to be sent to an external API, it is often required to use property names that include underscores.  If the `camelcase` rule is in effect, these [snake case](https://en.wikipedia.org/wiki/Snake_case) properties would not be allowed.  By providing an `allowPattern` to the `dot-notation` rule, these snake case properties can be accessed with bracket notation.\n\nExamples of **correct** code for the sample `{ \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }` option:\n\n```js\n/*eslint camelcase: \"error\"*/\n/*eslint dot-notation: [\"error\", { \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" }]*/\n\nvar data = {};\ndata.foo_bar = 42;\n\nvar data = {};\ndata[\"fooBar\"] = 42;\n\nvar data = {};\ndata[\"foo_bar\"] = 42; // no warning\n```\n"
	],
	[
		"eol-last",
		"# require or disallow newline at the end of files (eol-last)\n\nTrailing newlines in non-empty files are a common UNIX idiom. Benefits of\ntrailing newlines include the ability to concatenate or append to files as well\nas output files to the terminal without interfering with shell prompts.\n\n## Rule Details\n\nThis rule enforces at least one newline (or absence thereof) at the end\nof non-empty files.\n\nPrior to v0.16.0 this rule also enforced that there was only a single line at\nthe end of the file. If you still want this behavior, consider enabling\n[no-multiple-empty-lines](no-multiple-empty-lines.md) with `maxEOF` and/or\n[no-trailing-spaces](no-trailing-spaces.md).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eol-last: [\"error\", \"always\"]*/\n\nfunction doSmth() {\n  var foo = 2;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint eol-last: [\"error\", \"always\"]*/\n\nfunction doSmth() {\n  var foo = 2;\n}\\n\n```\n\n## Options\n\nThis rule has a string option:\n\n* `\"always\"` (default) enforces that files end with a newline (LF)\n* `\"never\"` enforces that files do not end with a newline\n* `\"unix\"` (deprecated) is identical to \"always\"\n* `\"windows\"` (deprecated) is identical to \"always\", but will use a CRLF character when autofixing\n\n**Deprecated:** The options `\"unix\"` and `\"windows\"` are deprecated. If you need to enforce a specific linebreak style, use this rule in conjunction with `linebreak-style`.\n"
	],
	[
		"eqeqeq",
		"# Require === and !== (eqeqeq)\n\nIt is considered good practice to use the type-safe equality operators `===` and `!==` instead of their regular counterparts `==` and `!=`.\n\nThe reason for this is that `==` and `!=` do type coercion which follows the rather obscure [Abstract Equality Comparison Algorithm](https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3).\nFor instance, the following statements are all considered `true`:\n\n* `[] == false`\n* `[] == ![]`\n* `3 == \"03\"`\n\nIf one of those occurs in an innocent-looking statement such as `a == b` the actual problem is very difficult to spot.\n\n## Rule Details\n\nThis rule is aimed at eliminating the type-unsafe equality operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }\n```\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a `typeof` expression, or if both operands are literals with the same type.\n\n## Options\n\n### always\n\nThe `\"always\"` option (default) enforces the use of `===` and `!==` in every situation (except when you opt-in to more specific handling of `null` [see below]).\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null\n\n```\n\nThis rule optionally takes a second argument, which should be an object with the following supported properties:\n\n* `\"null\"`: Customize how this rule treats `null` literals. Possible values:\n    * `always` (default) - Always use === or !==.\n    * `never` - Never use === or !== with `null`.\n    * `ignore` - Do not apply this rule to `null`.\n\n### smart\n\nThe `\"smart\"` option enforces the use of `===` and `!==` except for these cases:\n\n* Comparing two literal values\n* Evaluating the value of `typeof`\n* Comparing against `null`\n\nExamples of **incorrect** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\n// comparing two variables requires ===\na == b\n\n// only one side is a literal\nfoo == true\nbananas != 1\n\n// comparing to undefined requires ===\nvalue == undefined\n```\n\nExamples of **correct** code for the `\"smart\"` option:\n\n```js\n/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null\n```\n\n### allow-null\n\n**Deprecated:** Instead of using this option use \"always\" and pass a \"null\" option property with value \"ignore\". This will tell ESLint to always enforce strict equality except when comparing with the `null` literal.\n\n```js\n[\"error\", \"always\", {\"null\": \"ignore\"}]\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a style for using equality operators, then it's safe to disable this rule.\n"
	],
	[
		"for-direction",
		"# Enforce \"for\" loop update clause moving the counter in the right direction. (for-direction)\n\n## Rule Details\n\nA `for` loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as `while` loops. More typically, an infinite for loop is a bug.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint for-direction: \"error\"*/\nfor (var i = 0; i < 10; i--) {\n}\n\nfor (var i = 10; i >= 0; i++) {\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint for-direction: \"error\"*/\nfor (var i = 0; i < 10; i++) {\n}\n```\n"
	],
	[
		"func-call-spacing",
		"# require or disallow spacing between function identifiers and their invocations (func-call-spacing)\n\nWhen calling a function, developers may insert optional whitespace between the function's name and the parentheses that invoke it. The following pairs of function calls are equivalent:\n\n```js\nalert('Hello');\nalert ('Hello');\n\nconsole.log(42);\nconsole.log (42);\n\nnew Date();\nnew Date ();\n```\n\n## Rule Details\n\nThis rule requires or disallows spaces between the function name and the opening parenthesis that calls it.\n\n## options\n\nThis rule has a string option:\n\n- `\"never\"` (default) disallows space between the function name and the opening parenthesis.\n- `\"always\"` requires space between the function name and the opening parenthesis.\n\nFurther, in `\"always\"` mode, a second object option is available that contains a single boolean `allowNewlines` property.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint func-call-spacing: [\"error\", \"never\"]*/\n\nfn ();\n\nfn\n();\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint func-call-spacing: [\"error\", \"never\"]*/\n\nfn();\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint func-call-spacing: [\"error\", \"always\"]*/\n\nfn();\n\nfn\n();\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint func-call-spacing: [\"error\", \"always\"]*/\n\nfn ();\n```\n\n#### allowNewlines\n\nBy default, `\"always\"` does not allow newlines. To permit newlines when in `\"always\"` mode, set the `allowNewlines` option to `true`. Newlines are never required.\n\nExamples of **incorrect** code for this rule with `allowNewlines` option enabled:\n\n```js\n/*eslint func-call-spacing: [\"error\", \"always\", { \"allowNewlines\": true }]*/\n\nfn();\n```\n\nExamples of **correct** code for this rule with the `allowNewlines` option enabled:\n\n```js\n/*eslint func-call-spacing: [\"error\", \"always\", { \"allowNewlines\": true }]*/\n\nfn (); // Newlines are never required.\n\nfn\n();\n```\n\n## When Not To Use It\n\nThis rule can safely be turned off if your project does not care about enforcing a consistent style for spacing within function calls.\n\n## Related Rules\n\n- [no-spaced-func](no-spaced-func.md) (deprecated)\n\n## Compatibility\n\n- **JSCS**: [disallowSpacesInCallExpression](https://jscs-dev.github.io/rule/disallowSpacesInCallExpression)\n- **JSCS**: [requireSpacesInCallExpression](https://jscs-dev.github.io/rule/requireSpacesInCallExpression)\n"
	],
	[
		"func-name-matching",
		"# require function names to match the name of the variable or property to which they are assigned (func-name-matching)\n\n## Rule Details\n\nThis rule requires function names to match the name of the variable or property to which they are assigned. The rule will ignore property assignments where the property name is a literal that is not a valid identifier in the ECMAScript version specified in your configuration (default ES5).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint func-name-matching: \"error\"*/\n\nvar foo = function bar() {};\nfoo = function bar() {};\nobj.foo = function bar() {};\nobj['foo'] = function bar() {};\nvar obj = {foo: function bar() {}};\n({['foo']: function bar() {}});\n```\n\n```js\n/*eslint func-name-matching: [\"error\", \"never\"] */\n\nvar foo = function foo() {};\nfoo = function foo() {};\nobj.foo = function foo() {};\nobj['foo'] = function foo() {};\nvar obj = {foo: function foo() {}};\n({['foo']: function foo() {}});\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint func-name-matching: \"error\"*/\n/*eslint func-name-matching: [\"error\", \"always\"]*/ // these are equivalent\n/*eslint-env es6*/\n\nvar foo = function foo() {};\nvar foo = function() {};\nvar foo = () => {};\nfoo = function foo() {};\n\nobj.foo = function foo() {};\nobj['foo'] = function foo() {};\nobj['foo//bar'] = function foo() {};\nobj[foo] = function bar() {};\n\nvar obj = {foo: function foo() {}};\nvar obj = {[foo]: function bar() {}};\nvar obj = {'foo//bar': function foo() {}};\nvar obj = {foo: function() {}};\n\nobj['x' + 2] = function bar(){};\nvar [ bar ] = [ function bar(){} ];\n({[foo]: function bar() {}})\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n```js\n/*eslint func-name-matching: [\"error\", \"never\"] */\n/*eslint-env es6*/\n\nvar foo = function bar() {};\nvar foo = function() {};\nvar foo = () => {};\nfoo = function bar() {};\n\nobj.foo = function bar() {};\nobj['foo'] = function bar() {};\nobj['foo//bar'] = function foo() {};\nobj[foo] = function foo() {};\n\nvar obj = {foo: function bar() {}};\nvar obj = {[foo]: function foo() {}};\nvar obj = {'foo//bar': function foo() {}};\nvar obj = {foo: function() {}};\n\nobj['x' + 2] = function bar(){};\nvar [ bar ] = [ function bar(){} ];\n({[foo]: function bar() {}})\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n## Options\n\nThis rule takes an optional string of \"always\" or \"never\" (when omitted, it defaults to \"always\"), and an optional options object with two properties `considerPropertyDescriptor` and `includeCommonJSModuleExports`.\n\n### considerPropertyDescriptor\n\nA boolean value that defaults to `false`. If `considerPropertyDescriptor` is set to true, the check will take into account the use of `Object.create`, `Object.defineProperty`, `Object.defineProperties`, and `Reflect.defineProperty`.\n\nExamples of **correct** code for the `{ considerPropertyDescriptor: true }` option:\n\n```js\n/*eslint func-name-matching: [\"error\", { \"considerPropertyDescriptor\": true }]*/\n/*eslint func-name-matching: [\"error\", \"always\", { \"considerPropertyDescriptor\": true }]*/ // these are equivalent\nvar obj = {};\nObject.create(obj, {foo:{value: function foo() {}}});\nObject.defineProperty(obj, 'bar', {value: function bar() {}});\nObject.defineProperties(obj, {baz:{value: function baz() {} }});\nReflect.defineProperty(obj, 'foo', {value: function foo() {}});\n```\n\nExamples of **incorrect** code for the `{ considerPropertyDescriptor: true }` option:\n\n```js\n/*eslint func-name-matching: [\"error\", { \"considerPropertyDescriptor\": true }]*/\n/*eslint func-name-matching: [\"error\", \"always\", { \"considerPropertyDescriptor\": true }]*/ // these are equivalent\nvar obj = {};\nObject.create(obj, {foo:{value: function bar() {}}});\nObject.defineProperty(obj, 'bar', {value: function baz() {}});\nObject.defineProperties(obj, {baz:{value: function foo() {} }});\nReflect.defineProperty(obj, 'foo', {value: function value() {}});\n```\n\n### includeCommonJSModuleExports\n\nA boolean value that defaults to `false`. If `includeCommonJSModuleExports` is set to true, `module.exports` and `module[\"exports\"]` will be checked by this rule.\n\nExamples of **incorrect** code for the `{ includeCommonJSModuleExports: true }` option:\n\n```js\n/*eslint func-name-matching: [\"error\", { \"includeCommonJSModuleExports\": true }]*/\n/*eslint func-name-matching: [\"error\", \"always\", { \"includeCommonJSModuleExports\": true }]*/ // these are equivalent\n\nmodule.exports = function foo(name) {};\nmodule['exports'] = function foo(name) {};\n```\n\n## When Not To Use It\n\nDo not use this rule if you want to allow named functions to have different names from the variable or property to which they are assigned.\n\n## Compatibility\n\n* **JSCS**: [requireMatchingFunctionName](https://jscs-dev.github.io/rule/requireMatchingFunctionName)\n"
	],
	[
		"func-names",
		"# Require or disallow named `function` expressions (func-names)\n\nA pattern that's becoming more common is to give function expressions names to aid in debugging. For example:\n\n```js\nFoo.prototype.bar = function bar() {};\n```\n\nAdding the second `bar` in the above example is optional.  If you leave off the function name then when the function throws an exception you are likely to get something similar to `anonymous function` in the stack trace.  If you provide the optional name for a function expression then you will get the name of the function expression in the stack trace.\n\n## Rule Details\n\nThis rule can enforce or disallow the use of named function expressions.\n\n## Options\n\nThis rule has a string option:\n\n* `\"always\"` (default) requires function expressions to have a name\n* `\"as-needed\"` requires function expressions to have a name, if the name cannot be assigned automatically in an ES6 environment\n* `\"never\"` disallows named function expressions, except in recursive functions, where a name is needed\n\nThis rule has an object option:\n\n* `\"generators\": \"always\" | \"as-needed\" | \"never\"`\n    * `\"always\"` require named generators\n    * `\"as-needed\"` require named generators if the name cannot be assigned automatically in an ES6 environment.\n    * `\"never\"` disallow named generators where possible.\n\nWhen a value for `generators` is not provided the behavior for generator functions falls back to the base option.\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint func-names: [\"error\", \"always\"]*/\n\nFoo.prototype.bar = function() {};\n\nconst cat = {\n  meow: function() {}\n}\n\n(function() {\n    // ...\n}())\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint func-names: [\"error\", \"always\"]*/\n\nFoo.prototype.bar = function bar() {};\n\nconst cat = {\n  meow() {}\n}\n\n(function bar() {\n    // ...\n}())\n```\n\n### as-needed\n\nECMAScript 6 introduced a `name` property on all functions. The value of `name` is determined by evaluating the code around the function to see if a name can be inferred. For example, a function assigned to a variable will automatically have a `name` property equal to the name of the variable. The value of `name` is then used in stack traces for easier debugging.\n\nExamples of **incorrect** code for this rule with the `\"as-needed\"` option:\n\n```js\n/*eslint func-names: [\"error\", \"as-needed\"]*/\n\nFoo.prototype.bar = function() {};\n\n(function() {\n    // ...\n}())\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\"` option:\n\n```js\n/*eslint func-names: [\"error\", \"as-needed\"]*/\n\nvar bar = function() {};\n\nconst cat = {\n  meow: function() {}\n}\n\n(function bar() {\n    // ...\n}())\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint func-names: [\"error\", \"never\"]*/\n\nFoo.prototype.bar = function bar() {};\n\n(function bar() {\n    // ...\n}())\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint func-names: [\"error\", \"never\"]*/\n\nFoo.prototype.bar = function() {};\n\n(function() {\n    // ...\n}())\n```\n\n### generators\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"generators\": \"as-needed\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"as-needed\" }]*/\n\n(function*() {\n    // ...\n}())\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"generators\": \"as-needed\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"as-needed\" }]*/\n\nvar foo = function*() {};\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"generators\": \"never\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *baz() {});\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"generators\": \"never\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"always\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *() {});\n```\n\nExamples of **incorrect** code for this rule with the `\"as-needed\", { \"generators\": \"never\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"as-needed\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *baz() {});\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\", { \"generators\": \"never\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"as-needed\", { \"generators\": \"never\" }]*/\n\nvar foo = bar(function *() {});\n```\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"generators\": \"always\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"never\", { \"generators\": \"always\" }]*/\n\nvar foo = bar(function *() {});\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"generators\": \"always\" }` options:\n\n```js\n/*eslint func-names: [\"error\", \"never\", { \"generators\": \"always\" }]*/\n\nvar foo = bar(function *baz() {});\n```\n\n## Further Reading\n\n* [Functions Explained](http://markdaggett.com/blog/2013/02/15/functions-explained/)\n* [Function Names in ES6](http://2ality.com/2015/09/function-names-es6.html)\n\n## Compatibility\n\n* **JSCS**: [requireAnonymousFunctions](https://jscs-dev.github.io/rule/requireAnonymousFunctions)\n* **JSCS**: [disallowAnonymousFunctions](https://jscs-dev.github.io/rule/disallowAnonymousFunctions)\n"
	],
	[
		"func-style",
		"# enforce the consistent use of either `function` declarations or expressions (func-style)\n\nThere are two ways of defining functions in JavaScript: `function` declarations and `function` expressions. Declarations contain the `function` keyword first, followed by a name and then its arguments and the function body, for example:\n\n```js\nfunction doSomething() {\n    // ...\n}\n```\n\nEquivalent function expressions begin with the `var` keyword, followed by a name and then the function itself, such as:\n\n```js\nvar doSomething = function() {\n    // ...\n};\n```\n\nThe primary difference between `function` declarations and `function expressions` is that declarations are *hoisted* to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:\n\n```js\ndoSomething();\n\nfunction doSomething() {\n    // ...\n}\n```\n\nAlthough this code might seem like an error, it actually works fine because JavaScript engines hoist the `function` declarations to the top of the scope. That means this code is treated as if the declaration came before the invocation.\n\nFor `function` expressions, you must define the function before it is used, otherwise it causes an error. Example:\n\n```js\ndoSomething();  // error!\n\nvar doSomething = function() {\n    // ...\n};\n```\n\nIn this case, `doSomething()` is undefined at the time of invocation and so causes a runtime error.\n\nDue to these different behaviors, it is common to have guidelines as to which style of function should be used. There is really no correct or incorrect choice here, it is just a preference.\n\n## Rule Details\n\nThis rule enforces a particular type of `function` style throughout a JavaScript file, either declarations or expressions. You can specify which you prefer in the configuration.\n\n## Options\n\nThis rule has a string option:\n\n* `\"expression\"` (default) requires the use of function expressions instead of function declarations\n* `\"declaration\"` requires the use of function declarations instead of function expressions\n\nThis rule has an object option for an exception:\n\n* `\"allowArrowFunctions\": true` (default `false`) allows the use of arrow functions (honoured only when using `declaration`)\n\n### expression\n\nExamples of **incorrect** code for this rule with the default `\"expression\"` option:\n\n```js\n/*eslint func-style: [\"error\", \"expression\"]*/\n\nfunction foo() {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule with the default `\"expression\"` option:\n\n```js\n/*eslint func-style: [\"error\", \"expression\"]*/\n\nvar foo = function() {\n    // ...\n};\n```\n\n### declaration\n\nExamples of **incorrect** code for this rule with the `\"declaration\"` option:\n\n```js\n/*eslint func-style: [\"error\", \"declaration\"]*/\n\nvar foo = function() {\n    // ...\n};\n\nvar foo = () => {};\n```\n\nExamples of **correct** code for this rule with the `\"declaration\"` option:\n\n```js\n/*eslint func-style: [\"error\", \"declaration\"]*/\n\nfunction foo() {\n    // ...\n}\n\n// Methods (functions assigned to objects) are not checked by this rule\nSomeObject.foo = function() {\n    // ...\n};\n```\n\n### allowArrowFunctions\n\nExamples of additional **correct** code for this rule with the `\"declaration\", { \"allowArrowFunctions\": true }` options:\n\n```js\n/*eslint func-style: [\"error\", \"declaration\", { \"allowArrowFunctions\": true }]*/\n\nvar foo = () => {};\n```\n\n## When Not To Use It\n\nIf you want to allow developers to each decide how they want to write functions on their own, then you can disable this rule.\n\n## Further Reading\n\n* [JavaScript Scoping and Hoisting](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)\n"
	],
	[
		"function-call-argument-newline",
		"# enforce line breaks between arguments of a function call (function-call-argument-newline)\n\nA number of style guides require or disallow line breaks between arguments of a function call.\n\n## Rule Details\n\nThis rule enforces line breaks between arguments of a function call.\n\n## Options\n\nThis rule has a string option:\n\n* `\"always\"` (default) requires line breaks between arguments\n* `\"never\"` disallows line breaks between arguments\n* `\"consistent\"` requires consistent usage of line breaks between arguments\n\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint function-call-argument-newline: [\"error\", \"always\"]*/\n\nfoo(\"one\", \"two\", \"three\");\n\nbar(\"one\", \"two\", {\n    one: 1,\n    two: 2\n});\n\nbaz(\"one\", \"two\", (x) => {\n    console.log(x);\n});\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint function-call-argument-newline: [\"error\", \"always\"]*/\n\nfoo(\n    \"one\",\n    \"two\",\n    \"three\"\n);\n\nbar(\n    \"one\",\n    \"two\",\n    { one: 1, two: 2 }\n);\n// or\nbar(\n    \"one\",\n    \"two\",\n    {\n        one: 1,\n        two: 2\n    }\n);\n\nbaz(\n    \"one\",\n    \"two\",\n    (x) => {\n        console.log(x);\n    }\n);\n```\n\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint function-call-argument-newline: [\"error\", \"never\"]*/\n\nfoo(\n    \"one\",\n    \"two\", \"three\"\n);\n\nbar(\n    \"one\",\n    \"two\", {\n        one: 1,\n        two: 2\n    }\n);\n\nbaz(\n    \"one\",\n    \"two\", (x) => {\n        console.log(x);\n    }\n);\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint function-call-argument-newline: [\"error\", \"never\"]*/\n\nfoo(\"one\", \"two\", \"three\");\n// or\nfoo(\n    \"one\", \"two\", \"three\"\n);\n\nbar(\"one\", \"two\", { one: 1, two: 2 });\n// or\nbar(\"one\", \"two\", {\n    one: 1,\n    two: 2\n});\n\nbaz(\"one\", \"two\", (x) => {\n    console.log(x);\n});\n```\n\n### consistent\n\nExamples of **incorrect** code for this rule with the default `\"consistent\"` option:\n\n```js\n/*eslint function-call-argument-newline: [\"error\", \"consistent\"]*/\n\nfoo(\"one\", \"two\",\n    \"three\");\n//or\nfoo(\"one\",\n    \"two\", \"three\");\n\nbar(\"one\", \"two\",\n    { one: 1, two: 2}\n);\n\nbaz(\"one\", \"two\",\n    (x) => { console.log(x); }\n);\n```\n\nExamples of **correct** code for this rule with the default `\"consistent\"` option:\n\n```js\n/*eslint function-call-argument-newline: [\"error\", \"consistent\"]*/\n\nfoo(\"one\", \"two\", \"three\");\n// or\nfoo(\n    \"one\",\n    \"two\",\n    \"three\"\n);\n\nbar(\"one\", \"two\", {\n    one: 1,\n    two: 2\n});\n// or\nbar(\n    \"one\",\n    \"two\",\n    { one: 1, two: 2 }\n);\n// or\nbar(\n    \"one\",\n    \"two\",\n    {\n        one: 1,\n        two: 2\n    }\n);\n\nbaz(\"one\", \"two\", (x) => {\n    console.log(x);\n});\n// or\nbaz(\n    \"one\",\n    \"two\",\n    (x) => {\n        console.log(x);\n    }\n);\n```\n\n\n## When Not To Use It\n\nIf you don't want to enforce line breaks between arguments, don't enable this rule.\n\n## Related Rules\n\n* [function-paren-newline](function-paren-newline.md)\n* [func-call-spacing](func-call-spacing.md)\n* [object-property-newline](object-property-newline.md)\n* [array-element-newline](array-element-newline.md)\n"
	],
	[
		"function-paren-newline",
		"# enforce consistent line breaks inside function parentheses (function-paren-newline)\n\nMany style guides require or disallow newlines inside of function parentheses.\n\n## Rule Details\n\nThis rule enforces consistent line breaks inside parentheses of function parameters or arguments.\n\n### Options\n\nThis rule has a single option, which can either be a string or an object.\n\n* `\"always\"` requires line breaks inside all function parentheses.\n* `\"never\"` disallows line breaks inside all function parentheses.\n* `\"multiline\"` (default) requires linebreaks inside function parentheses if any of the parameters/arguments have a line break between them. Otherwise, it disallows linebreaks.\n* `\"multiline-arguments\"` works like `multiline` but allows linebreaks inside function parentheses if there is only one parameter/argument.\n* `\"consistent\"` requires consistent usage of linebreaks for each pair of parentheses. It reports an error if one parenthesis in the pair has a linebreak inside it and the other parenthesis does not.\n* `{ \"minItems\": value }` requires linebreaks inside function parentheses if the number of parameters/arguments is at least `value`. Otherwise, it disallows linebreaks.\n\nExample configurations:\n\n```json\n{\n  \"rules\": {\n    \"function-paren-newline\": [\"error\", \"never\"]\n  }\n}\n```\n\n```json\n{\n  \"rules\": {\n    \"function-paren-newline\": [\"error\", { \"minItems\": 3 }]\n  }\n}\n```\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"always\"] */\n\nfunction foo(bar, baz) {}\n\nvar foo = function(bar, baz) {};\n\nvar foo = (bar, baz) => {};\n\nfoo(bar, baz);\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"always\"] */\n\nfunction foo(\n  bar,\n  baz\n) {}\n\nvar foo = function(\n  bar, baz\n) {};\n\nvar foo = (\n  bar,\n  baz\n) => {};\n\nfoo(\n  bar,\n  baz\n);\n```\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"never\"] */\n\nfunction foo(\n  bar,\n  baz\n) {}\n\nvar foo = function(\n  bar, baz\n) {};\n\nvar foo = (\n  bar,\n  baz\n) => {};\n\nfoo(\n  bar,\n  baz\n);\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"never\"] */\n\nfunction foo(bar, baz) {}\n\nfunction foo(bar,\n             baz) {}\n\nvar foo = function(bar, baz) {};\n\nvar foo = (bar, baz) => {};\n\nfoo(bar, baz);\n\nfoo(bar,\n  baz);\n```\n\nExamples of **incorrect** code for this rule with the default `\"multiline\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"multiline\"] */\n\nfunction foo(bar,\n  baz\n) {}\n\nvar foo = function(\n  bar, baz\n) {};\n\nvar foo = (\n  bar,\n  baz) => {};\n\nfoo(bar,\n  baz);\n\nfoo(\n  function() {\n    return baz;\n  }\n);\n```\n\nExamples of **correct** code for this rule with the default `\"multiline\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"multiline\"] */\n\nfunction foo(bar, baz) {}\n\nvar foo = function(\n  bar,\n  baz\n) {};\n\nvar foo = (bar, baz) => {};\n\nfoo(bar, baz, qux);\n\nfoo(\n  bar,\n  baz,\n  qux\n);\n\nfoo(function() {\n  return baz;\n});\n```\n\nExamples of **incorrect** code for this rule with the `\"consistent\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"consistent\"] */\n\nfunction foo(bar,\n  baz\n) {}\n\nvar foo = function(bar,\n  baz\n) {};\n\nvar foo = (\n  bar,\n  baz) => {};\n\nfoo(\n  bar,\n  baz);\n\nfoo(\n  function() {\n    return baz;\n  });\n```\n\nExamples of **correct** code for this rule with the `\"consistent\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"consistent\"] */\n\nfunction foo(bar,\n  baz) {}\n\nvar foo = function(bar, baz) {};\n\nvar foo = (\n  bar,\n  baz\n) => {};\n\nfoo(\n  bar, baz\n);\n\nfoo(\n  function() {\n    return baz;\n  }\n);\n```\n\nExamples of **incorrect** code for this rule with the `\"multiline-arguments\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"multiline-arguments\"] */\n\nfunction foo(bar,\n  baz\n) {}\n\nvar foo = function(bar,\n  baz\n) {};\n\nvar foo = (\n  bar,\n  baz) => {};\n\nfoo(\n  bar,\n  baz);\n\nfoo(\n  bar, qux,\n  baz\n);\n```\n\nExamples of **correct** code for this rule with the consistent `\"multiline-arguments\"` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", \"multiline-arguments\"] */\n\nfunction foo(\n  bar,\n  baz\n) {}\n\nvar foo = function(bar, baz) {};\n\nvar foo = (\n  bar\n) => {};\n\nfoo(\n  function() {\n    return baz;\n  }\n);\n```\n\nExamples of **incorrect** code for this rule with the `{ \"minItems\": 3 }` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", { \"minItems\": 3 }] */\n\nfunction foo(\n  bar,\n  baz\n) {}\n\nfunction foo(bar, baz, qux) {}\n\nvar foo = function(\n  bar, baz\n) {};\n\nvar foo = (bar,\n  baz) => {};\n\nfoo(bar,\n  baz);\n```\n\nExamples of **correct** code for this rule with the `{ \"minItems\": 3 }` option:\n\n```js\n/* eslint function-paren-newline: [\"error\", { \"minItems\": 3 }] */\n\nfunction foo(bar, baz) {}\n\nvar foo = function(\n  bar,\n  baz,\n  qux\n) {};\n\nvar foo = (\n  bar, baz, qux\n) => {};\n\nfoo(bar, baz);\n\nfoo(\n  bar, baz, qux\n);\n```\n\n## When Not To Use It\n\nIf don't want to enforce consistent linebreaks inside function parentheses, do not turn on this rule.\n"
	],
	[
		"generator-star-spacing",
		"# Enforce spacing around the * in generator functions (generator-star-spacing)\n\nGenerators are a new type of function in ECMAScript 6 that can return multiple values over time.\nThese special functions are indicated by placing an `*` after the `function` keyword.\n\nHere is an example of a generator function:\n\n```js\n/*eslint-env es6*/\n\nfunction* generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nThis is also valid:\n\n```js\n/*eslint-env es6*/\n\nfunction *generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nThis is valid as well:\n\n```js\n/*eslint-env es6*/\n\nfunction * generator() {\n    yield \"44\";\n    yield \"55\";\n}\n```\n\nTo keep a sense of consistency when using generators this rule enforces a single position for the `*`.\n\n## Rule Details\n\nThis rule aims to enforce spacing around the `*` of generator functions.\n\n## Options\n\nThe rule takes one option, an object, which has two keys `before` and `after` having boolean values `true` or `false`.\n\n* `before` enforces spacing between the `*` and the `function` keyword.\n  If it is `true`, a space is required, otherwise spaces are disallowed.\n\n  In object literal shorthand methods, spacing before the `*` is not checked, as they lack a `function` keyword.\n\n* `after` enforces spacing between the `*` and the function name (or the opening parenthesis for anonymous generator functions).\n  If it is `true`, a space is required, otherwise spaces are disallowed.\n\nThe default is `{\"before\": true, \"after\": false}`.\n\nAn example configuration:\n\n```json\n\"generator-star-spacing\": [\"error\", {\"before\": true, \"after\": false}]\n```\n\nAnd the option has shorthand as a string keyword:\n\n* `{\"before\": true, \"after\": false}` → `\"before\"`\n* `{\"before\": false, \"after\": true}` → `\"after\"`\n* `{\"before\": true, \"after\": true}` → `\"both\"`\n* `{\"before\": false, \"after\": false}` → `\"neither\"`\n\nAn example of shorthand configuration:\n\n```json\n\"generator-star-spacing\": [\"error\", \"after\"]\n```\n\nAdditionally, this rule allows further configurability via overrides per function type.\n\n* `named` provides overrides for named functions\n* `anonymous` provides overrides for anonymous functions\n* `method` provides overrides for class methods or property function shorthand\n\nAn example of a configuration with overrides:\n\n```json\n\"generator-star-spacing\": [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]\n```\n\nIn the example configuration above, the top level \"before\" and \"after\" options define the default behavior of\nthe rule, while the \"anonymous\" and \"method\" options override the default behavior.\nOverrides can be either an object with \"before\" and \"after\", or a shorthand string as above.\n\n## Examples\n\n### before\n\nExamples of **correct** code for this rule with the `\"before\"` option:\n\n```js\n/*eslint generator-star-spacing: [\"error\", {\"before\": true, \"after\": false}]*/\n/*eslint-env es6*/\n\nfunction *generator() {}\n\nvar anonymous = function *() {};\n\nvar shorthand = { *generator() {} };\n```\n\n### after\n\nExamples of **correct** code for this rule with the `\"after\"` option:\n\n```js\n/*eslint generator-star-spacing: [\"error\", {\"before\": false, \"after\": true}]*/\n/*eslint-env es6*/\n\nfunction* generator() {}\n\nvar anonymous = function* () {};\n\nvar shorthand = { * generator() {} };\n```\n\n### both\n\nExamples of **correct** code for this rule with the `\"both\"` option:\n\n```js\n/*eslint generator-star-spacing: [\"error\", {\"before\": true, \"after\": true}]*/\n/*eslint-env es6*/\n\nfunction * generator() {}\n\nvar anonymous = function * () {};\n\nvar shorthand = { * generator() {} };\n```\n\n### neither\n\nExamples of **correct** code for this rule with the `\"neither\"` option:\n\n```js\n/*eslint generator-star-spacing: [\"error\", {\"before\": false, \"after\": false}]*/\n/*eslint-env es6*/\n\nfunction*generator() {}\n\nvar anonymous = function*() {};\n\nvar shorthand = { *generator() {} };\n```\n\nExamples of **incorrect** code for this rule with overrides present:\n\n```js\n/*eslint generator-star-spacing: [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]*/\n/*eslint-env es6*/\n\nfunction * generator() {}\n\nvar anonymous = function* () {};\n\nvar shorthand = { *generator() {} };\n\nclass Class { static* method() {} }\n```\n\nExamples of **correct** code for this rule with overrides present:\n\n```js\n/*eslint generator-star-spacing: [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]*/\n/*eslint-env es6*/\n\nfunction* generator() {}\n\nvar anonymous = function*() {};\n\nvar shorthand = { * generator() {} };\n\nclass Class { static * method() {} }\n```\n\n## When Not To Use It\n\nIf your project will not be using generators or you are not concerned with spacing consistency, you do not need this rule.\n\n## Further Reading\n\n* [Understanding ES6: Generators](https://leanpub.com/understandinges6/read/#leanpub-auto-generators)\n"
	],
	[
		"getter-return",
		"# Enforces that a return statement is present in property getters (getter-return)\n\nThe get syntax binds an object property to a function that will be called when that property is looked up. It was first introduced in ECMAScript 5:\n\n```js\n    var p = {\n        get name(){\n            return \"nicholas\";\n        }\n    };\n\n    Object.defineProperty(p, \"age\", {\n        get: function (){\n            return 17;\n        }\n    });\n```\n\nNote that every `getter` is expected to return a value.\n\n## Rule Details\n\nThis rule enforces that a return statement is present in property getters.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint getter-return: \"error\"*/\n\np = {\n    get name(){\n        // no returns.\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        // no returns.\n    }\n});\n\nclass P{\n    get name(){\n        // no returns.\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint getter-return: \"error\"*/\n\np = {\n    get name(){\n        return \"nicholas\";\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        return 18;\n    }\n});\n\nclass P{\n    get name(){\n        return \"nicholas\";\n    }\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"allowImplicit\": false` (default) disallows implicitly returning `undefined` with a `return` statement.\n\nExamples of **correct** code for the `{ \"allowImplicit\": true }` option:\n\n```js\n/*eslint getter-return: [\"error\", { allowImplicit: true }]*/\np = {\n    get name(){\n        return; // return undefined implicitly.\n    }\n};\n```\n\n## When Not To Use It\n\nIf your project will not be using ES5 property getters you do not need this rule.\n\n## Further Reading\n\n* [MDN: Functions getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)\n* [Understanding ES6: Accessor Properties](https://leanpub.com/understandinges6/read/#leanpub-auto-accessor-properties)\n"
	],
	[
		"global-require",
		"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\n"
	],
	[
		"guard-for-in",
		"# Require Guarding for-in (guard-for-in)\n\nLooping over objects with a `for in` loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.\n\n```js\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nNote that simply checking `foo.hasOwnProperty(key)` is likely to cause an error in some cases; see [no-prototype-builtins](no-prototype-builtins.md).\n\n## Rule Details\n\nThis rule is aimed at preventing unexpected behavior that could arise from using a `for in` loop without filtering the results in the loop. As such, it will warn when `for in` loops do not filter their results with an `if` statement.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    doSomething(key);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint guard-for-in: \"error\"*/\n\nfor (key in foo) {\n    if (Object.prototype.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n\nfor (key in foo) {\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}\n```\n\n## Related Rules\n\n* [no-prototype-builtins](no-prototype-builtins.md)\n\n## Further Reading\n\n* [Exploring JavaScript for-in loops](https://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\n* [The pitfalls of using objects as maps in JavaScript](http://2ality.com/2012/01/objects-as-maps.html)\n"
	],
	[
		"handle-callback-err",
		"# Enforce Callback Error Handling (handle-callback-err)\n\nIn Node.js, a common pattern for dealing with asynchronous behavior is called the callback pattern.\nThis pattern expects an `Error` object or `null` as the first argument of the callback.\nForgetting to handle these errors can lead to some really strange behavior in your application.\n\n```js\nfunction loadData (err, data) {\n    doSomething(); // forgot to handle error\n}\n```\n\n## Rule Details\n\nThis rule expects that when you're using the callback pattern in Node.js you'll handle the error.\n\n## Options\n\nThe rule takes a single string option: the name of the error parameter. The default is `\"err\"`.\n\nExamples of **incorrect** code for this rule with the default `\"err\"` parameter name:\n\n```js\n/*eslint handle-callback-err: \"error\"*/\n\nfunction loadData (err, data) {\n    doSomething();\n}\n\n```\n\nExamples of **correct** code for this rule with the default `\"err\"` parameter name:\n\n```js\n/*eslint handle-callback-err: \"error\"*/\n\nfunction loadData (err, data) {\n    if (err) {\n        console.log(err.stack);\n    }\n    doSomething();\n}\n\nfunction generateError (err) {\n    if (err) {}\n}\n```\n\nExamples of **correct** code for this rule with a sample `\"error\"` parameter name:\n\n```js\n/*eslint handle-callback-err: [\"error\", \"error\"]*/\n\nfunction loadData (error, data) {\n    if (error) {\n       console.log(error.stack);\n    }\n    doSomething();\n}\n```\n\n### regular expression\n\nSometimes (especially in big projects) the name of the error variable is not consistent across the project,\nso you need a more flexible configuration to ensure that the rule reports all unhandled errors.\n\nIf the configured name of the error variable begins with a `^` it is considered to be a regexp pattern.\n\n* If the option is `\"^(err|error|anySpecificError)$\"`, the rule reports unhandled errors where the parameter name can be `err`, `error` or `anySpecificError`.\n* If the option is `\"^.+Error$\"`, the rule reports unhandled errors where the parameter name ends with `Error` (for example, `connectionError` or `validationError` will match).\n* If the option is `\"^.*(e|E)rr\"`, the rule reports unhandled errors where the parameter name matches any string that contains `err` or `Err` (for example, `err`, `error`, `anyError`, `some_err` will match).\n\n## When Not To Use It\n\nThere are cases where it may be safe for your application to ignore errors, however only ignore errors if you are\nconfident that some other form of monitoring will help you catch the problem.\n\n## Further Reading\n\n* [The Art Of Node: Callbacks](https://github.com/maxogden/art-of-node#callbacks)\n* [Nodejitsu: What are the error conventions?](https://docs.nodejitsu.com/articles/errors/what-are-the-error-conventions/)\n"
	],
	[
		"id-blacklist",
		"# disallow specified identifiers (id-blacklist)\n\n> \"There are only two hard things in Computer Science: cache invalidation and naming things.\" — Phil Karlton\n\nBad names can lead to hard-to-decipher code. Generic names, such as `data`, don't infer much about the code and the values it receives. This rule allows you to configure a blacklist of bad identifier names, that you don't want to see in your code.\n\n## Rule Details\n\nThis rule disallows specified identifiers in assignments and `function` definitions.\n\nThis rule will catch blacklisted identifiers that are:\n\n- variable declarations\n- function declarations\n- object properties assigned to during object creation\n\nIt will not catch blacklisted identifiers that are:\n\n- function calls (so you can still use functions you do not have control over)\n- object properties (so you can still use objects you do not have control over)\n\n## Options\n\nThe rule takes one or more strings as options: the names of restricted identifiers.\n\nFor example, to restrict the use of common generic identifiers:\n\n```json\n{\n    \"id-blacklist\": [\"error\", \"data\", \"err\", \"e\", \"cb\", \"callback\"]\n}\n```\n\nExamples of **incorrect** code for this rule with sample `\"data\", \"callback\"` restricted identifiers:\n\n```js\n/*eslint id-blacklist: [\"error\", \"data\", \"callback\"] */\n\nvar data = {...};\n\nfunction callback() {\n    // ...\n}\n\nelement.callback = function() {\n    // ...\n};\n\nvar itemSet = {\n    data: [...]\n};\n```\n\nExamples of **correct** code for this rule with sample `\"data\", \"callback\"` restricted identifiers:\n\n```js\n/*eslint id-blacklist: [\"error\", \"data\", \"callback\"] */\n\nvar encodingOptions = {...};\n\nfunction processFileResult() {\n    // ...\n}\n\nelement.successHandler = function() {\n    // ...\n};\n\nvar itemSet = {\n    entities: [...]\n};\n\ncallback(); // all function calls are ignored\n\nfoo.callback(); // all function calls are ignored\n\nfoo.data; // all property names that are not assignments are ignored\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are happy for identifiers to be named freely.\n"
	],
	[
		"id-length",
		"# enforce minimum and maximum identifier lengths (id-length)\n\nVery short identifier names like `e`, `x`, `_t` or very long ones like `hashGeneratorResultOutputContainerObject` can make code harder to read and potentially less maintainable. To prevent this, one may enforce a minimum and/or maximum identifier length.\n\n```js\nvar x = 5; // too short; difficult to understand its purpose without context\n```\n\n## Rule Details\n\nThis rule enforces a minimum and/or maximum identifier length convention.\n\n## Options\n\nExamples of **incorrect** code for this rule with the default options:\n\n```js\n/*eslint id-length: \"error\"*/     // default is minimum 2-chars ({ \"min\": 2 })\n/*eslint-env es6*/\n\nvar x = 5;\nobj.e = document.body;\nvar foo = function (e) { };\ntry {\n    dangerousStuff();\n} catch (e) {\n    // ignore as many do\n}\nvar myObj = { a: 1 };\n(a) => { a * a };\nclass x { }\nclass Foo { x() {} }\nfunction foo(...x) { }\nvar { x } = {};\nvar { x: a} = {};\nvar { a: [x]} = {};\n({ prop: obj.x } = {});\n```\n\nExamples of **correct** code for this rule with the default options:\n\n```js\n/*eslint id-length: \"error\"*/     // default is minimum 2-chars ({ \"min\": 2 })\n/*eslint-env es6*/\n\nvar num = 5;\nfunction _f() { return 42; }\nfunction _func() { return 42; }\nobj.el = document.body;\nvar foo = function (evt) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\nvar myObj = { apple: 1 };\n(num) => { num * num };\nfunction foo(num = 0) { }\nclass MyClass { }\nclass Foo { method() {} }\nfunction foo(...args) { }\nvar { prop } = {};\nvar { prop: a } = {};\nvar { prop: [x] } = {};\n({ prop: obj.longName } = {});\nvar data = { \"x\": 1 };  // excused because of quotes\ndata[\"y\"] = 3;  // excused because of calculated property access\n```\n\nThis rule has a shorthand integer option for the `\"min\"` object property.\n\nExamples of **incorrect** code for this rule with a minimum of 4:\n\n```js\n/*eslint id-length: [\"error\", { \"min\": 4 }]*/\n/*eslint-env es6*/\n\nvar val = 5;\nobj.e = document.body;\nfunction foo (e) { };\ntry {\n    dangerousStuff();\n} catch (e) {\n    // ignore as many do\n}\nvar myObj = { a: 1 };\n(val) => { val * val };\nclass x { }\nclass Foo { x() {} }\nfunction foo(...x) { }\nvar { x } = {};\nvar { x: a} = {};\nvar { a: [x]} = {};\n({ prop: obj.x } = {});\n```\n\nExamples of **correct** code for this rule with a minimum of 4:\n\n```js\n/*eslint id-length: [\"error\", { \"min\": 4 }]*/\n/*eslint-env es6*/\n\nvar value = 5;\nfunction func() { return 42; }\nobj.element = document.body;\nvar foo = function (event) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\nvar myObj = { apple: 1 };\n(value) => { value * value };\nfunction foobar(value = 0) { }\nclass MyClass { }\nclass Foobar { method() {} }\nfunction foobar(...args) { }\nvar { prop } = {};\nvar { prop: a } = {};\nvar { prop: [x] } = {};\n({ prop: obj.name } = {});\nvar data = { \"x\": 1 };  // excused because of quotes\ndata[\"y\"] = 3;  // excused because of calculated property access\n```\n\nThis rule has an object option:\n\n* `\"min\"` (default: 2) enforces a minimum identifier length\n* `\"max\"` (default: Infinity) enforces a maximum identifier length\n* `\"properties\": always` (default) enforces identifier length convention for property names\n* `\"properties\": never` ignores identifier length convention for property names\n* `\"exceptions\"` allows an array of specified identifier names\n\n### min\n\nExamples of **incorrect** code for this rule with the `{ \"min\": 4 }` option:\n\n```js\n/*eslint id-length: [\"error\", { \"min\": 4 }]*/\n/*eslint-env es6*/\n\nvar val = 5;\nobj.e = document.body;\nfunction foo (e) { };\ntry {\n    dangerousStuff();\n} catch (e) {\n    // ignore as many do\n}\nvar myObj = { a: 1 };\n(val) => { val * val };\nclass x { }\nclass Foo { x() {} }\nfunction foo(...x) { }\nvar { x } = {};\nvar { x: a} = {};\nvar { a: [x]} = {};\n({ prop: obj.x } = {});\n```\n\nExamples of **correct** code for this rule with the `{ \"min\": 4 }` option:\n\n```js\n/*eslint id-length: [\"error\", { \"min\": 4 }]*/\n/*eslint-env es6*/\n\nvar value = 5;\nfunction func() { return 42; }\nobj.element = document.body;\nvar foo = function (event) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\nvar myObj = { apple: 1 };\n(value) => { value * value };\nfunction foobar(value = 0) { }\nclass MyClass { }\nclass Foobar { method() {} }\nfunction foobar(...args) { }\nvar { prop } = {};\nvar { prop: a } = {};\nvar { prop: [x] } = {};\n({ prop: obj.name } = {});\nvar data = { \"x\": 1 };  // excused because of quotes\ndata[\"y\"] = 3;  // excused because of calculated property access\n```\n\n### max\n\nExamples of **incorrect** code for this rule with the `{ \"max\": 10 }` option:\n\n```js\n/*eslint id-length: [\"error\", { \"max\": 10 }]*/\n/*eslint-env es6*/\n\nvar reallyLongVarName = 5;\nfunction reallyLongFuncName() { return 42; }\nobj.reallyLongPropName = document.body;\nvar foo = function (reallyLongArgName) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (reallyLongErrorName) {\n    // ignore as many do\n}\n(reallyLongArgName) => { return !reallyLongArgName; };\n```\n\nExamples of **correct** code for this rule with the `{ \"max\": 10 }` option:\n\n```js\n/*eslint id-length: [\"error\", { \"max\": 10 }]*/\n/*eslint-env es6*/\n\nvar varName = 5;\nfunction funcName() { return 42; }\nobj.propName = document.body;\nvar foo = function (arg) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\n(arg) => { return !arg; };\n```\n\n### properties\n\nExamples of **correct** code for this rule with the `{ \"properties\": \"never\" }` option:\n\n```js\n/*eslint id-length: [\"error\", { \"properties\": \"never\" }]*/\n/*eslint-env es6*/\n\nvar myObj = { a: 1 };\n({ a: obj.x.y.z } = {});\n({ prop: obj.i } = {});\n```\n\n### exceptions\n\nExamples of additional **correct** code for this rule with the `{ \"exceptions\": [\"x\"] }` option:\n\n```js\n/*eslint id-length: [\"error\", { \"exceptions\": [\"x\"] }]*/\n/*eslint-env es6*/\n\nvar x = 5;\nfunction x() { return 42; }\nobj.x = document.body;\nvar foo = function (x) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (x) {\n    // ignore as many do\n}\n(x) => { return x * x; };\n```\n\n## Related Rules\n\n* [max-len](max-len.md)\n* [new-cap](new-cap.md)\n* [func-names](func-names.md)\n* [camelcase](camelcase.md)\n"
	],
	[
		"id-match",
		"# require identifiers to match a specified regular expression (id-match)\n\n> \"There are only two hard things in Computer Science: cache invalidation and naming things.\" — Phil Karlton\n\nNaming things consistently in a project is an often underestimated aspect of code creation.\nWhen done correctly, it can save your team hours of unnecessary head scratching and misdirections.\nThis rule allows you to precisely define and enforce the variables and function names on your team should use.\nNo more limiting yourself to camelCase, snake_case, PascalCase or oHungarianNotation. Id-match has all your needs covered!\n\n## Rule Details\n\nThis rule requires identifiers in assignments and `function` definitions to match a specified regular expression.\n\n## Options\n\nThis rule has a string option for the specified regular expression.\n\nFor example, to enforce a camelcase naming convention:\n\n```json\n{\n    \"id-match\": [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]\n}\n```\n\nExamples of **incorrect** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\"` option:\n\n```js\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]*/\n\nvar my_favorite_color = \"#112C85\";\nvar _myFavoriteColor  = \"#112C85\";\nvar myFavoriteColor_  = \"#112C85\";\nvar MY_FAVORITE_COLOR = \"#112C85\";\nfunction do_something() {\n    // ...\n}\nobj.do_something = function() {\n    // ...\n};\n```\n\nExamples of **correct** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\"` option:\n\n```js\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\"]*/\n\nvar myFavoriteColor   = \"#112C85\";\nvar foo = bar.baz_boom;\nvar foo = { qux: bar.baz_boom };\ndo_something();\nvar obj = {\n    my_pref: 1\n};\n```\n\nThis rule has an object option:\n\n* `\"properties\": true` requires object properties to match the specified regular expression\n* `\"onlyDeclarations\": true` requires only `var`, `function`, and `class` declarations to match the specified regular expression\n* `\"onlyDeclarations\": false` requires all variable names to match the specified regular expression\n* `\"ignoreDestructuring\": false` (default) enforces `id-match` for destructured identifiers\n* `\"ignoreDestructuring\": true` does not check destructured identifiers\n\n### properties\n\nExamples of **incorrect** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\", { \"properties\": true }` options:\n\n```js\n/*eslint id-match: [\"error\", \"^[a-z]+([A-Z][a-z]+)*$\", { \"properties\": true }]*/\n\nvar obj = {\n    my_pref: 1\n};\n```\n\n### onlyDeclarations\n\nExamples of **correct** code for this rule with the `\"^[a-z]+([A-Z][a-z]+)*$\", { \"onlyDeclarations\": true }` options:\n\n```js\n/*eslint id-match: [2, \"^[a-z]+([A-Z][a-z]+)*$\", { \"onlyDeclarations\": true }]*/\n\ndo_something(__dirname);\n```\n\n### ignoreDestructuring: false\n\nExamples of **incorrect** code for this rule with the default `\"^[^_]+$\", { \"ignoreDestructuring\": false }` option:\n\n```js\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": false }]*/\n\nvar { category_id } = query;\n\nvar { category_id = 1 } = query;\n\nvar { category_id: category_id } = query;\n\nvar { category_id: category_alias } = query;\n\nvar { category_id: categoryId, ...other_props } = query;\n```\n\n### ignoreDestructuring: true\n\nExamples of **incorrect** code for this rule with the `\"^[^_]+$\", { \"ignoreDestructuring\": true }` option:\n\n```js\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": true }]*/\n\nvar { category_id: category_alias } = query;\n\nvar { category_id, ...other_props } = query;\n```\n\nExamples of **correct** code for this rule with the `\"^[^_]+$\", { \"ignoreDestructuring\": true }` option:\n\n```js\n/*eslint id-match: [2, \"^[^_]+$\", { \"ignoreDestructuring\": true }]*/\n\nvar { category_id } = query;\n\nvar { category_id = 1 } = query;\n\nvar { category_id: category_id } = query;\n```\n\n## When Not To Use It\n\nIf you don't want to enforce any particular naming convention for all identifiers, or your naming convention is too complex to be enforced by configuring this rule, then you should not enable this rule.\n"
	],
	[
		"implicit-arrow-linebreak",
		"# Enforce the location of arrow function bodies with implicit returns (implicit-arrow-linebreak)\n\nAn arrow function body can contain an implicit return as an expression instead of a block body. It can be useful to enforce a consistent location for the implicitly returned expression.\n\n## Rule Details\n\nThis rule aims to enforce a consistent location for an arrow function containing an implicit return.\n\nSee Also:\n\n- [`brace-style`](https://eslint.org/docs/rules/brace-style) which enforces this behavior for arrow functions with block bodies.\n\n### Options\n\nThis rule accepts a string option:\n\n- `\"beside\"` (default) disallows a newline before an arrow function body.\n- `\"below\"` requires a newline before an arrow function body.\n\nExamples of **incorrect** code for this rule with the default `\"beside\"` option:\n\n```js\n/* eslint implicit-arrow-linebreak: [\"error\", \"beside\"] */\n\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n(foo) =>\n  bar =>\n    baz;\n\n(foo) =>\n(\n  bar()\n);\n```\n\nExamples of **correct** code for this rule with the default `\"beside\"` option:\n\n```js\n/* eslint implicit-arrow-linebreak: [\"error\", \"beside\"] */\n\n(foo) => bar;\n\n(foo) => (bar);\n\n(foo) => bar => baz;\n\n(foo) => (\n  bar()\n);\n\n// functions with block bodies allowed with this rule using any style\n// to enforce a consistent location for this case, see the rule: `brace-style`\n(foo) => {\n  return bar();\n}\n\n(foo) =>\n{\n  return bar();\n}\n```\n\nExamples of **incorrect** code for this rule with the `\"below\"` option:\n\n```js\n/* eslint implicit-arrow-linebreak: [\"error\", \"below\"] */\n\n(foo) => bar;\n\n(foo) => (bar);\n\n(foo) => bar => baz;\n```\n\nExamples of **correct** code for this rule with the `\"below\"` option:\n\n```js\n/* eslint implicit-arrow-linebreak: [\"error\", \"below\"] */\n\n\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n(foo) =>\n  bar =>\n    baz;\n```\n\n## When Not To Use It\n\nIf you're not concerned about consistent locations of implicitly returned arrow function expressions, you should not turn on this rule.\n\nYou can also disable this rule if you are using the `\"always\"` option for the [`arrow-body-style`](https://eslint.org/docs/rules/arrow-body-style), since this will disable the use of implicit returns in arrow functions.\n"
	],
	[
		"indent",
		"# enforce consistent indentation (indent)\n\nThere are several common guidelines which require specific indentation of nested blocks and statements, like:\n\n```js\nfunction hello(indentSize, type) {\n    if (indentSize === 4 && type !== 'tab') {\n        console.log('Each next indentation will increase on 4 spaces');\n    }\n}\n```\n\nThese are the most common scenarios recommended in different style guides:\n\n* Two spaces, not longer and no tabs: Google, npm, Node.js, Idiomatic, Felix\n* Tabs: jQuery\n* Four spaces: Crockford\n\n## Rule Details\n\nThis rule enforces a consistent indentation style. The default style is `4 spaces`.\n\n## Options\n\nThis rule has a mixed option:\n\nFor example, for 2-space indentation:\n\n```json\n{\n    \"indent\": [\"error\", 2]\n}\n```\n\nOr for tabbed indentation:\n\n```json\n{\n    \"indent\": [\"error\", \"tab\"]\n}\n```\n\nExamples of **incorrect** code for this rule with the default options:\n\n```js\n/*eslint indent: \"error\"*/\n\nif (a) {\n  b=c;\n  function foo(d) {\n    e=f;\n  }\n}\n```\n\nExamples of **correct** code for this rule with the default options:\n\n```js\n/*eslint indent: \"error\"*/\n\nif (a) {\n    b=c;\n    function foo(d) {\n        e=f;\n    }\n}\n```\n\nThis rule has an object option:\n\n* `\"SwitchCase\"` (default: 0) enforces indentation level for `case` clauses in `switch` statements\n* `\"VariableDeclarator\"` (default: 1) enforces indentation level for `var` declarators; can also take an object to define separate rules for `var`, `let` and `const` declarations. It can also be `\"first\"`, indicating all the declarators should be aligned with the first declarator.\n* `\"outerIIFEBody\"` (default: 1) enforces indentation level for file-level IIFEs.\n* `\"MemberExpression\"` (default: 1) enforces indentation level for multi-line property chains. This can also be set to `\"off\"` to disable checking for MemberExpression indentation.\n* `\"FunctionDeclaration\"` takes an object to define rules for function declarations.\n    * `parameters` (default: 1) enforces indentation level for parameters in a function declaration. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all parameters of the declaration must be aligned with the first parameter. This can also be set to `\"off\"` to disable checking for FunctionDeclaration parameters.\n    * `body` (default: 1) enforces indentation level for the body of a function declaration.\n* `\"FunctionExpression\"` takes an object to define rules for function expressions.\n    * `parameters` (default: 1) enforces indentation level for parameters in a function expression. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all parameters of the expression must be aligned with the first parameter. This can also be set to `\"off\"` to disable checking for FunctionExpression parameters.\n    * `body` (default: 1) enforces indentation level for the body of a function expression.\n* `\"CallExpression\"` takes an object to define rules for function call expressions.\n    * `arguments` (default: 1) enforces indentation level for arguments in a call expression. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all arguments of the expression must be aligned with the first argument. This can also be set to `\"off\"` to disable checking for CallExpression arguments.\n* `\"ArrayExpression\"` (default: 1) enforces indentation level for elements in arrays. It can also be set to the string `\"first\"`, indicating that all the elements in the array should be aligned with the first element. This can also be set to `\"off\"` to disable checking for array elements.\n* `\"ObjectExpression\"` (default: 1) enforces indentation level for properties in objects. It can be set to the string `\"first\"`, indicating that all properties in the object should be aligned with the first property. This can also be set to `\"off\"` to disable checking for object properties.\n* `\"ImportDeclaration\"` (default: 1) enforces indentation level for import statements. It can be set to the string `\"first\"`, indicating that all imported members from a module should be aligned with the first member in the list. This can also be set to `\"off\"` to disable checking for imported module members.\n* `\"flatTernaryExpressions\": true` (`false` by default) requires no indentation for ternary expressions which are nested in other ternary expressions.\n* `\"ignoredNodes\"` accepts an array of [selectors](/docs/developer-guide/selectors.md). If an AST node is matched by any of the selectors, the indentation of tokens which are direct children of that node will be ignored. This can be used as an escape hatch to relax the rule if you disagree with the indentation that it enforces for a particular syntactic pattern.\n* `\"ignoreComments\"` (default: false) can be used when comments do not need to be aligned with nodes on the previous or next line.\n\nLevel of indentation denotes the multiple of the indent specified. Example:\n\n* Indent of 4 spaces with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 8 spaces.\n* Indent of 2 spaces with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 4 spaces.\n* Indent of 2 spaces with `VariableDeclarator` set to `{\"var\": 2, \"let\": 2, \"const\": 3}` will indent the multi-line variable declarations with 4 spaces for `var` and `let`, 6 spaces for `const` statements.\n* Indent of tab with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 2 tabs.\n* Indent of 2 spaces with `SwitchCase` set to `0` will not indent `case` clauses with respect to `switch` statements.\n* Indent of 2 spaces with `SwitchCase` set to `1` will indent `case` clauses with 2 spaces with respect to `switch` statements.\n* Indent of 2 spaces with `SwitchCase` set to `2` will indent `case` clauses with 4 spaces with respect to `switch` statements.\n* Indent of tab with `SwitchCase` set to `2` will indent `case` clauses with 2 tabs with respect to `switch` statements.\n* Indent of 2 spaces with `MemberExpression` set to `0` will indent the multi-line property chains with 0 spaces.\n* Indent of 2 spaces with `MemberExpression` set to `1` will indent the multi-line property chains with 2 spaces.\n* Indent of 2 spaces with `MemberExpression` set to `2` will indent the multi-line property chains with 4 spaces.\n* Indent of 4 spaces with `MemberExpression` set to `0` will indent the multi-line property chains with 0 spaces.\n* Indent of 4 spaces with `MemberExpression` set to `1` will indent the multi-line property chains with 4 spaces.\n* Indent of 4 spaces with `MemberExpression` set to `2` will indent the multi-line property chains with 8 spaces.\n\n### tab\n\nExamples of **incorrect** code for this rule with the `\"tab\"` option:\n\n```js\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n     b=c;\nfunction foo(d) {\n           e=f;\n }\n}\n```\n\nExamples of **correct** code for this rule with the `\"tab\"` option:\n\n```js\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n/*tab*/b=c;\n/*tab*/function foo(d) {\n/*tab*//*tab*/e=f;\n/*tab*/}\n}\n```\n\n### SwitchCase\n\nExamples of **incorrect** code for this rule with the `2, { \"SwitchCase\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\ncase \"a\":\n    break;\ncase \"b\":\n    break;\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"SwitchCase\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\n  case \"a\":\n    break;\n  case \"b\":\n    break;\n}\n```\n\n### VariableDeclarator\n\nExamples of **incorrect** code for this rule with the `2, { \"VariableDeclarator\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 1 }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet a,\n    b,\n    c;\nconst a = 1,\n    b = 2,\n    c = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 1 }]*/\n/*eslint-env es6*/\n\nvar a,\n  b,\n  c;\nlet a,\n  b,\n  c;\nconst a = 1,\n  b = 2,\n  c = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": 2 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 2 }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet a,\n    b,\n    c;\nconst a = 1,\n    b = 2,\n    c = 3;\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"VariableDeclarator\": \"first\" }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": \"first\" }]*/\n/*eslint-env es6*/\n\nvar a,\n  b,\n  c;\nlet a,\n  b,\n  c;\nconst a = 1,\n  b = 2,\n  c = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": \"first\" }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": \"first\" }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet a,\n    b,\n    c;\nconst a = 1,\n      b = 2,\n      c = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": { \"var\": 2, \"let\": 2, \"const\": 3 } }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": { \"var\": 2, \"let\": 2, \"const\": 3 } }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet a,\n    b,\n    c;\nconst a = 1,\n      b = 2,\n      c = 3;\n```\n\n### outerIIFEBody\n\nExamples of **incorrect** code for this rule with the options `2, { \"outerIIFEBody\": 0 }`:\n\n```js\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\n  function foo(x) {\n    return x + 1;\n  }\n\n})();\n\n\nif(y) {\nconsole.log('foo');\n}\n```\n\nExamples of **correct** code for this rule with the options `2, {\"outerIIFEBody\": 0}`:\n\n```js\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\nfunction foo(x) {\n  return x + 1;\n}\n\n})();\n\n\nif(y) {\n   console.log('foo');\n}\n```\n\n### MemberExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"MemberExpression\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"MemberExpression\": 1 }]*/\n\nfoo\n.bar\n.baz()\n```\n\nExamples of **correct** code for this rule with the `2, { \"MemberExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"MemberExpression\": 1 }]*/\n\nfoo\n  .bar\n  .baz();\n```\n\n### FunctionDeclaration\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionDeclaration\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionDeclaration\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n             qux, boop) {\n  qux();\n}\n```\n\n### FunctionExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionExpression\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionExpression\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n                   qux, boop) {\n  qux();\n}\n```\n\n### CallExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"CallExpression\": {\"arguments\": 1} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n    baz,\n      qux\n);\n```\n\nExamples of **correct** code for this rule with the `2, { \"CallExpression\": {\"arguments\": 1} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n  baz,\n  qux\n);\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"CallExpression\": {\"arguments\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n  baz, boop, beep);\n```\n\nExamples of **correct** code for this rule with the `2, { \"CallExpression\": {\"arguments\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n    baz, boop, beep);\n```\n\n### ArrayExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"ArrayExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n    bar,\nbaz,\n      qux\n];\n```\n\nExamples of **correct** code for this rule with the `2, { \"ArrayExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n  bar,\n  baz,\n  qux\n];\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"ArrayExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n  baz,\n  qux\n];\n```\n\nExamples of **correct** code for this rule with the `2, { \"ArrayExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n           baz,\n           qux\n];\n```\n\n### ObjectExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"ObjectExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n    bar: 1,\nbaz: 2,\n      qux: 3\n};\n```\n\nExamples of **correct** code for this rule with the `2, { \"ObjectExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n  bar: 1,\n  baz: 2,\n  qux: 3\n};\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"ObjectExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n  baz: 2 };\n```\n\nExamples of **correct** code for this rule with the `2, { \"ObjectExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n            baz: 2 };\n```\n\n### ImportDeclaration\n\nExamples of **correct** code for this rule with the `4, { \"ImportDeclaration\": 1 }` option (the default):\n\n```js\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": 1 }]*/\n\nimport { foo,\n    bar,\n    baz,\n} from 'qux';\n\nimport {\n    foo,\n    bar,\n    baz,\n} from 'qux';\n```\n\nExamples of **incorrect** code for this rule with the `4, { \"ImportDeclaration\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": \"first\" }]*/\n\nimport { foo,\n    bar,\n    baz,\n} from 'qux';\n```\n\nExamples of **correct** code for this rule with the `4, { \"ImportDeclaration\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"ImportDeclaration\": \"first\" }]*/\n\nimport { foo,\n         bar,\n         baz,\n} from 'qux';\n```\n\n### flatTernaryExpressions\n\nExamples of **incorrect** code for this rule with the default `4, { \"flatTernaryExpressions\": false }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": false }]*/\n\nvar a =\n    foo ? bar :\n    baz ? qux :\n    boop;\n```\n\nExamples of **correct** code for this rule with the default `4, { \"flatTernaryExpressions\": false }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": false }]*/\n\nvar a =\n    foo ? bar :\n        baz ? qux :\n            boop;\n```\n\nExamples of **incorrect** code for this rule with the `4, { \"flatTernaryExpressions\": true }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": true }]*/\n\nvar a =\n    foo ? bar :\n        baz ? qux :\n            boop;\n```\n\nExamples of **correct** code for this rule with the `4, { \"flatTernaryExpressions\": true }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"flatTernaryExpressions\": true }]*/\n\nvar a =\n    foo ? bar :\n    baz ? qux :\n    boop;\n```\n\n### ignoredNodes\n\nThe following configuration ignores the indentation of `ConditionalExpression` (\"ternary expression\") nodes:\n\nExamples of **correct** code for this rule with the `4, { \"ignoredNodes\": [\"ConditionalExpression\"] }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"ignoredNodes\": [\"ConditionalExpression\"] }]*/\n\nvar a = foo\n      ? bar\n      : baz;\n\nvar a = foo\n                ? bar\n: baz;\n```\n\nThe following configuration ignores indentation in the body of IIFEs.\n\nExamples of **correct** code for this rule with the `4, { \"ignoredNodes\": [\"CallExpression > FunctionExpression.callee > BlockStatement.body\"] }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"ignoredNodes\": [\"CallExpression > FunctionExpression.callee > BlockStatement.body\"] }]*/\n\n(function() {\n\nfoo();\nbar();\n\n})\n```\n\n### ignoreComments\n\nExamples of additional **correct** code for this rule with the `4, { \"ignoreComments\": true }` option:\n\n```js\n/*eslint indent: [\"error\", 4, { \"ignoreComments\": true }] */\n\nif (foo) {\n    doSomething();\n\n// comment intentionally de-indented\n    doSomethingElse();\n}\n```\n\n\n## Compatibility\n\n* **JSHint**: `indent`\n* **JSCS**: [validateIndentation](https://jscs-dev.github.io/rule/validateIndentation)\n"
	],
	[
		"indent-legacy",
		"# enforce consistent indentation (indent-legacy)\n\nESLint 4.0.0 introduced a rewrite of the [`indent`](/docs/rules/indent) rule, which now reports more errors than it did in previous versions. To ease the process of migrating to 4.0.0, the `indent-legacy` rule was introduced as a snapshot of the `indent` rule from ESLint 3.x. If your build is failing after the upgrade to 4.0.0, you can disable `indent` and enable `indent-legacy` as a quick fix. Eventually, you should switch back to the `indent` rule to get bugfixes and improvements in future versions.\n\n---\n\nThere are several common guidelines which require specific indentation of nested blocks and statements, like:\n\n```js\nfunction hello(indentSize, type) {\n    if (indentSize === 4 && type !== 'tab') {\n        console.log('Each next indentation will increase on 4 spaces');\n    }\n}\n```\n\nThese are the most common scenarios recommended in different style guides:\n\n* Two spaces, not longer and no tabs: Google, npm, Node.js, Idiomatic, Felix\n* Tabs: jQuery\n* Four spaces: Crockford\n\n## Rule Details\n\nThis rule enforces a consistent indentation style. The default style is `4 spaces`.\n\n## Options\n\nThis rule has a mixed option:\n\nFor example, for 2-space indentation:\n\n```json\n{\n    \"indent\": [\"error\", 2]\n}\n```\n\nOr for tabbed indentation:\n\n```json\n{\n    \"indent\": [\"error\", \"tab\"]\n}\n```\n\nExamples of **incorrect** code for this rule with the default options:\n\n```js\n/*eslint indent: \"error\"*/\n\nif (a) {\n  b=c;\n  function foo(d) {\n    e=f;\n  }\n}\n```\n\nExamples of **correct** code for this rule with the default options:\n\n```js\n/*eslint indent: \"error\"*/\n\nif (a) {\n    b=c;\n    function foo(d) {\n        e=f;\n    }\n}\n```\n\nThis rule has an object option:\n\n* `\"SwitchCase\"` (default: 0) enforces indentation level for `case` clauses in `switch` statements\n* `\"VariableDeclarator\"` (default: 1) enforces indentation level for `var` declarators; can also take an object to define separate rules for `var`, `let` and `const` declarations.\n* `\"outerIIFEBody\"` (default: 1) enforces indentation level for file-level IIFEs.\n* `\"MemberExpression\"` (off by default) enforces indentation level for multi-line property chains (except in variable declarations and assignments)\n* `\"FunctionDeclaration\"` takes an object to define rules for function declarations.\n    * `parameters` (off by default) enforces indentation level for parameters in a function declaration. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all parameters of the declaration must be aligned with the first parameter.\n    * `body` (default: 1) enforces indentation level for the body of a function declaration.\n* `\"FunctionExpression\"` takes an object to define rules for function expressions.\n    * `parameters` (off by default) enforces indentation level for parameters in a function expression. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all parameters of the expression must be aligned with the first parameter.\n    * `body` (default: 1) enforces indentation level for the body of a function expression.\n* `\"CallExpression\"` takes an object to define rules for function call expressions.\n    * `arguments` (off by default) enforces indentation level for arguments in a call expression. This can either be a number indicating indentation level, or the string `\"first\"` indicating that all arguments of the expression must be aligned with the first argument.\n* `\"ArrayExpression\"` (default: 1) enforces indentation level for elements in arrays. It can also be set to the string `\"first\"`, indicating that all the elements in the array should be aligned with the first element.\n* `\"ObjectExpression\"` (default: 1) enforces indentation level for properties in objects. It can be set to the string `\"first\"`, indicating that all properties in the object should be aligned with the first property.\n\nLevel of indentation denotes the multiple of the indent specified. Example:\n\n* Indent of 4 spaces with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 8 spaces.\n* Indent of 2 spaces with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 4 spaces.\n* Indent of 2 spaces with `VariableDeclarator` set to `{\"var\": 2, \"let\": 2, \"const\": 3}` will indent the multi-line variable declarations with 4 spaces for `var` and `let`, 6 spaces for `const` statements.\n* Indent of tab with `VariableDeclarator` set to `2` will indent the multi-line variable declarations with 2 tabs.\n* Indent of 2 spaces with `SwitchCase` set to `0` will not indent `case` clauses with respect to `switch` statements.\n* Indent of 2 spaces with `SwitchCase` set to `1` will indent `case` clauses with 2 spaces with respect to `switch` statements.\n* Indent of 2 spaces with `SwitchCase` set to `2` will indent `case` clauses with 4 spaces with respect to `switch` statements.\n* Indent of tab with `SwitchCase` set to `2` will indent `case` clauses with 2 tabs with respect to `switch` statements.\n* Indent of 2 spaces with `MemberExpression` set to `0` will indent the multi-line property chains with 0 spaces.\n* Indent of 2 spaces with `MemberExpression` set to `1` will indent the multi-line property chains with 2 spaces.\n* Indent of 2 spaces with `MemberExpression` set to `2` will indent the multi-line property chains with 4 spaces.\n* Indent of 4 spaces with `MemberExpression` set to `0` will indent the multi-line property chains with 0 spaces.\n* Indent of 4 spaces with `MemberExpression` set to `1` will indent the multi-line property chains with 4 spaces.\n* Indent of 4 spaces with `MemberExpression` set to `2` will indent the multi-line property chains with 8 spaces.\n\n### tab\n\nExamples of **incorrect** code for this rule with the `\"tab\"` option:\n\n```js\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n     b=c;\nfunction foo(d) {\n           e=f;\n }\n}\n```\n\nExamples of **correct** code for this rule with the `\"tab\"` option:\n\n```js\n/*eslint indent: [\"error\", \"tab\"]*/\n\nif (a) {\n/*tab*/b=c;\n/*tab*/function foo(d) {\n/*tab*//*tab*/e=f;\n/*tab*/}\n}\n```\n\n### SwitchCase\n\nExamples of **incorrect** code for this rule with the `2, { \"SwitchCase\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\ncase \"a\":\n    break;\ncase \"b\":\n    break;\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"SwitchCase\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"SwitchCase\": 1 }]*/\n\nswitch(a){\n  case \"a\":\n    break;\n  case \"b\":\n    break;\n}\n```\n\n### VariableDeclarator\n\nExamples of **incorrect** code for this rule with the `2, { \"VariableDeclarator\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 1 }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet a,\n    b,\n    c;\nconst a = 1,\n    b = 2,\n    c = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 1 }]*/\n/*eslint-env es6*/\n\nvar a,\n  b,\n  c;\nlet a,\n  b,\n  c;\nconst a = 1,\n  b = 2,\n  c = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": 2 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": 2 }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet a,\n    b,\n    c;\nconst a = 1,\n    b = 2,\n    c = 3;\n```\n\nExamples of **correct** code for this rule with the `2, { \"VariableDeclarator\": { \"var\": 2, \"let\": 2, \"const\": 3 } }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"VariableDeclarator\": { \"var\": 2, \"let\": 2, \"const\": 3 } }]*/\n/*eslint-env es6*/\n\nvar a,\n    b,\n    c;\nlet a,\n    b,\n    c;\nconst a = 1,\n      b = 2,\n      c = 3;\n```\n\n### outerIIFEBody\n\nExamples of **incorrect** code for this rule with the options `2, { \"outerIIFEBody\": 0 }`:\n\n```js\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\n  function foo(x) {\n    return x + 1;\n  }\n\n})();\n\n\nif(y) {\nconsole.log('foo');\n}\n```\n\nExamples of **correct** code for this rule with the options `2, {\"outerIIFEBody\": 0}`:\n\n```js\n/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\nfunction foo(x) {\n  return x + 1;\n}\n\n})();\n\n\nif(y) {\n   console.log('foo');\n}\n```\n\n### MemberExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"MemberExpression\": 1 }` options:\n\n```js\n/*eslint indent: [\"error\", 2, { \"MemberExpression\": 1 }]*/\n\nfoo\n.bar\n.baz()\n```\n\nExamples of **correct** code for this rule with the `2, { \"MemberExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"MemberExpression\": 1 }]*/\n\nfoo\n  .bar\n  .baz();\n\n// Any indentation is permitted in variable declarations and assignments.\nvar bip = aardvark.badger\n                  .coyote;\n```\n\n### FunctionDeclaration\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionDeclaration\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionDeclaration\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionDeclaration\": {\"parameters\": \"first\"}}]*/\n\nfunction foo(bar, baz,\n             qux, boop) {\n  qux();\n}\n```\n\n### FunctionExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n  baz,\n  qux) {\n    qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"FunctionExpression\": {\"body\": 1, \"parameters\": 2} }]*/\n\nvar foo = function(bar,\n    baz,\n    qux) {\n  qux();\n}\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"FunctionExpression\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n  qux, boop) {\n  qux();\n}\n```\n\nExamples of **correct** code for this rule with the `2, { \"FunctionExpression\": {\"parameters\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"FunctionExpression\": {\"parameters\": \"first\"}}]*/\n\nvar foo = function(bar, baz,\n                   qux, boop) {\n  qux();\n}\n```\n\n### CallExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"CallExpression\": {\"arguments\": 1} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n    baz,\n      qux\n);\n```\n\nExamples of **correct** code for this rule with the `2, { \"CallExpression\": {\"arguments\": 1} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n  baz,\n  qux\n);\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"CallExpression\": {\"arguments\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n  baz, boop, beep);\n```\n\nExamples of **correct** code for this rule with the `2, { \"CallExpression\": {\"arguments\": \"first\"} }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"CallExpression\": {\"arguments\": \"first\"}}]*/\n\nfoo(bar, baz,\n    baz, boop, beep);\n```\n\n### ArrayExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"ArrayExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n    bar,\nbaz,\n      qux\n];\n```\n\nExamples of **correct** code for this rule with the `2, { \"ArrayExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ArrayExpression\": 1 }]*/\n\nvar foo = [\n  bar,\n  baz,\n  qux\n];\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"ArrayExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n  baz,\n  qux\n];\n```\n\nExamples of **correct** code for this rule with the `2, { \"ArrayExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ArrayExpression\": \"first\"}]*/\n\nvar foo = [bar,\n           baz,\n           qux\n];\n```\n\n### ObjectExpression\n\nExamples of **incorrect** code for this rule with the `2, { \"ObjectExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n    bar: 1,\nbaz: 2,\n      qux: 3\n};\n```\n\nExamples of **correct** code for this rule with the `2, { \"ObjectExpression\": 1 }` option:\n\n```js\n/*eslint indent: [\"error\", 2, { \"ObjectExpression\": 1 }]*/\n\nvar foo = {\n  bar: 1,\n  baz: 2,\n  qux: 3\n};\n```\n\nExamples of **incorrect** code for this rule with the `2, { \"ObjectExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n  baz: 2 };\n```\n\nExamples of **correct** code for this rule with the `2, { \"ObjectExpression\": \"first\" }` option:\n\n```js\n/*eslint indent: [\"error\", 2, {\"ObjectExpression\": \"first\"}]*/\n\nvar foo = { bar: 1,\n            baz: 2 };\n```\n\n## Compatibility\n\n* **JSHint**: `indent`\n* **JSCS**: [validateIndentation](https://jscs-dev.github.io/rule/validateIndentation)\n"
	],
	[
		"init-declarations",
		"# require or disallow initialization in variable declarations (init-declarations)\n\nIn JavaScript, variables can be assigned during declaration, or at any point afterwards using an assignment statement. For example, in the following code, `foo` is initialized during declaration, while `bar` is initialized later.\n\n```js\nvar foo = 1;\nvar bar;\n\nif (foo) {\n    bar = 1;\n} else {\n    bar = 2;\n}\n```\n\n## Rule Details\n\nThis rule is aimed at enforcing or eliminating variable initializations during declaration. For example, in the following code, `foo` is initialized during declaration, while `bar` is not.\n\n```js\nvar foo = 1;\nvar bar;\n\nbar = 2;\n```\n\nThis rule aims to bring consistency to variable initializations and declarations.\n\n## Options\n\nThe rule takes two options:\n\n1. A string which must be either `\"always\"` (the default), to enforce initialization at declaration, or `\"never\"` to disallow initialization during declaration. This rule applies to `var`, `let`, and `const` variables, however `\"never\"` is ignored for `const` variables, as unassigned `const`s generate a parse error.\n2. An object that further controls the behavior of this rule. Currently, the only available parameter is `ignoreForLoopInit`, which indicates if initialization at declaration is allowed in `for` loops when `\"never\"` is set, since it is a very typical use case.\n\nYou can configure the rule as follows:\n\nVariables must be initialized at declaration (default)\n\n```json\n{\n    \"init-declarations\": [\"error\", \"always\"],\n}\n```\n\nVariables must not be initialized at declaration\n\n```json\n{\n    \"init-declarations\": [\"error\", \"never\"]\n}\n```\n\nVariables must not be initialized at declaration, except in for loops, where it is allowed\n\n```json\n{\n    \"init-declarations\": [\"error\", \"never\", { \"ignoreForLoopInit\": true }]\n}\n```\n\n### always\n\nExamples of **incorrect** code for the default `\"always\"` option:\n\n```js\n/*eslint init-declarations: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    let baz;\n}\n```\n\nExamples of **correct** code for the default `\"always\"` option:\n\n```js\n/*eslint init-declarations: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar = 1;\n    let baz = 2;\n    const qux = 3;\n}\n```\n\n### never\n\nExamples of **incorrect** code for the `\"never\"` option:\n\n```js\n/*eslint init-declarations: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar = 1;\n    let baz = 2;\n\n    for (var i = 0; i < 1; i++) {}\n}\n```\n\nExamples of **correct** code for the `\"never\"` option:\n\n```js\n/*eslint init-declarations: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    let baz;\n    const buzz = 1;\n}\n```\n\nThe `\"never\"` option ignores `const` variable initializations.\n\n### ignoreForLoopInit\n\nExamples of **correct** code for the `\"never\", { \"ignoreForLoopInit\": true }` options:\n\n```js\n/*eslint init-declarations: [\"error\", \"never\", { \"ignoreForLoopInit\": true }]*/\nfor (var i = 0; i < 1; i++) {}\n```\n\n## When Not To Use It\n\nWhen you are indifferent as to how your variables are initialized.\n"
	],
	[
		"jsx-quotes",
		"# enforce the consistent use of either double or single quotes in JSX attributes (jsx-quotes)\n\nJSX attribute values can contain string literals, which are delimited with single or double quotes.\n\n```xml\n<a b='c' />\n<a b=\"c\" />\n```\n\nUnlike string literals in JavaScript, string literals within JSX attributes can’t contain escaped quotes.\nIf you want to have e.g. a double quote within a JSX attribute value, you have to use single quotes as string delimiter.\n\n```xml\n<a b=\"'\" />\n<a b='\"' />\n```\n\n## Rule Details\n\nThis rule enforces the consistent use of either double or single quotes in JSX attributes.\n\n## Options\n\nThis rule has a string option:\n\n* `\"prefer-double\"` (default) enforces the use of double quotes for all JSX attribute values that don't contain a double quote.\n* `\"prefer-single\"` enforces the use of single quotes for all JSX attribute values that don’t contain a single quote.\n\n### prefer-double\n\nExamples of **incorrect** code for this rule with the default `\"prefer-double\"` option:\n\n```xml\n/*eslint jsx-quotes: [\"error\", \"prefer-double\"]*/\n\n<a b='c' />\n```\n\nExamples of **correct** code for this rule with the default `\"prefer-double\"` option:\n\n```xml\n/*eslint jsx-quotes: [\"error\", \"prefer-double\"]*/\n\n<a b=\"c\" />\n<a b='\"' />\n```\n\n### prefer-single\n\nExamples of **incorrect** code for this rule with the `\"prefer-single\"` option:\n\n```xml\n/*eslint jsx-quotes: [\"error\", \"prefer-single\"]*/\n\n<a b=\"c\" />\n```\n\nExamples of **correct** code for this rule with the `\"prefer-single\"` option:\n\n```xml\n/*eslint jsx-quotes: [\"error\", \"prefer-single\"]*/\n\n<a b='c' />\n<a b=\"'\" />\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you don’t use JSX or if you aren’t concerned with a consistent usage of quotes within JSX attributes.\n\n## Related Rules\n\n* [quotes](quotes.md)\n"
	],
	[
		"key-spacing",
		"# enforce consistent spacing between keys and values in object literal properties (key-spacing)\n\nThis rule enforces spacing around the colon in object literal properties. It can verify each property individually, or it can ensure horizontal alignment of adjacent properties in an object literal.\n\n## Rule Details\n\nThis rule enforces consistent spacing between keys and values in object literal properties. In the case of long lines, it is acceptable to add a new line wherever whitespace is allowed.\n\n## Options\n\nThis rule has an object option:\n\n* `\"beforeColon\": false (default) | true`\n    * `false`: disallows spaces between the key and the colon in object literals.\n    * `true`: requires at least one space between the key and the colon in object literals.\n* `\"afterColon\": true (default) | false`\n    * `true`: requires at least one space between the colon and the value in object literals.\n    * `false`: disallows spaces between the colon and the value in object literals.\n* `\"mode\": \"strict\" (default) | \"minimum\"`\n    * `\"strict\"`: enforces exactly one space before or after colons in object literals.\n    * `\"minimum\"`: enforces one or more spaces before or after colons in object literals.\n* `\"align\": \"value\" | \"colon\"`\n    * `\"value\"`: enforces horizontal alignment of values in object literals.\n    * `\"colon\"` enforces horizontal alignment of both colons and values in object literals.\n* `\"align\"` with an object value allows for fine-grained spacing when values are being aligned in object literals.\n* `\"singleLine\"` specifies a spacing style for single-line object literals.\n* `\"multiLine\"` specifies a spacing style for multi-line object literals.\n\nPlease note that you can either use the top-level options or the grouped options (`singleLine` and `multiLine`) but not both.\n\n### beforeColon\n\nExamples of **incorrect** code for this rule with the default `{ \"beforeColon\": false }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"beforeColon\": false }]*/\n\nvar obj = { \"foo\" : 42 };\n```\n\nExamples of **correct** code for this rule with the default `{ \"beforeColon\": false }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"beforeColon\": false }]*/\n\nvar obj = { \"foo\": 42 };\n```\n\nExamples of **incorrect** code for this rule with the `{ \"beforeColon\": true }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"beforeColon\": true }]*/\n\nvar obj = { \"foo\": 42 };\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeColon\": true }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"beforeColon\": true }]*/\n\nvar obj = { \"foo\" : 42 };\n```\n\n### afterColon\n\nExamples of **incorrect** code for this rule with the default `{ \"afterColon\": true }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"afterColon\": true }]*/\n\nvar obj = { \"foo\":42 };\n```\n\nExamples of **correct** code for this rule with the default `{ \"afterColon\": true }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"afterColon\": true }]*/\n\nvar obj = { \"foo\": 42 };\n```\n\nExamples of **incorrect** code for this rule with the `{ \"afterColon\": false }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"afterColon\": false }]*/\n\nvar obj = { \"foo\": 42 };\n```\n\nExamples of **correct** code for this rule with the `{ \"afterColon\": false }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"afterColon\": false }]*/\n\nvar obj = { \"foo\":42 };\n```\n\n### mode\n\nExamples of **incorrect** code for this rule with the default `{ \"mode\": \"strict\" }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"mode\": \"strict\" }]*/\n\ncall({\n    foobar: 42,\n    bat:    2 * 2\n});\n```\n\nExamples of **correct** code for this rule with the default `{ \"mode\": \"strict\" }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"mode\": \"strict\" }]*/\n\ncall({\n    foobar: 42,\n    bat: 2 * 2\n});\n```\n\nExamples of **correct** code for this rule with the `{ \"mode\": \"minimum\" }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"mode\": \"minimum\" }]*/\n\ncall({\n    foobar: 42,\n    bat:    2 * 2\n});\n```\n\n### align\n\nExamples of **incorrect** code for this rule with the `{ \"align\": \"value\" }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"align\": \"value\" }]*/\n\nvar obj = {\n    a: value,\n    bcde:  42,\n    fg :   foo()\n};\n```\n\nExamples of **correct** code for this rule with the `{ \"align\": \"value\" }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"align\": \"value\" }]*/\n\nvar obj = {\n    a:    value,\n    bcde: 42,\n\n    fg: foo(),\n    h:  function() {\n        return this.a;\n    },\n    ijkl: 'Non-consecutive lines form a new group'\n};\n\nvar obj = { a: \"foo\", longPropertyName: \"bar\" };\n```\n\nExamples of **incorrect** code for this rule with the `{ \"align\": \"colon\" }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"align\": \"colon\" }]*/\n\ncall({\n    foobar: 42,\n    bat:    2 * 2\n});\n```\n\nExamples of **correct** code for this rule with the `{ \"align\": \"colon\" }` option:\n\n```js\n/*eslint key-spacing: [\"error\", { \"align\": \"colon\" }]*/\n\ncall({\n    foobar: 42,\n    bat   : 2 * 2\n});\n```\n\n### align\n\nThe `align` option can take additional configuration through the `beforeColon`, `afterColon`, `mode`, and `on` options.\n\nIf `align` is defined as an object, but not all of the parameters are provided, undefined parameters will default to the following:\n\n```js\n// Defaults\nalign: {\n    \"beforeColon\": false,\n    \"afterColon\": true,\n    \"on\": \"colon\",\n    \"mode\": \"strict\"\n}\n```\n\nExamples of **correct** code for this rule with sample `{ \"align\": { } }` options:\n\n```js\n/*eslint key-spacing: [\"error\", {\n    \"align\": {\n        \"beforeColon\": true,\n        \"afterColon\": true,\n        \"on\": \"colon\"\n    }\n}]*/\n\nvar obj = {\n    \"one\"   : 1,\n    \"seven\" : 7\n}\n```\n\n```js\n/*eslint key-spacing: [\"error\", {\n    \"align\": {\n        \"beforeColon\": false,\n        \"afterColon\": false,\n        \"on\": \"value\"\n    }\n}]*/\n\nvar obj = {\n    \"one\":  1,\n    \"seven\":7\n}\n```\n\n### align and multiLine\n\nThe `multiLine` and `align` options can differ, which allows for fine-tuned control over the `key-spacing` of your files.  `align` will **not** inherit from `multiLine` if `align` is configured as an object.\n\n`multiLine` is used any time  an object literal spans multiple lines.  The `align` configuration is used when there is a group of properties in the same object. For example:\n\n```javascript\nvar myObj = {\n  key1: 1, // uses multiLine\n\n  key2: 2, // uses align (when defined)\n  key3: 3, // uses align (when defined)\n\n  key4: 4 // uses multiLine\n}\n\n```\n\nExamples of **incorrect** code for this rule with sample `{ \"align\": { }, \"multiLine\": { } }` options:\n\n```js\n/*eslint key-spacing: [\"error\", {\n    \"multiLine\": {\n        \"beforeColon\": false,\n        \"afterColon\":true\n    },\n    \"align\": {\n        \"beforeColon\": true,\n        \"afterColon\": true,\n        \"on\": \"colon\"\n    }\n}]*/\n\nvar obj = {\n    \"myObjectFunction\": function() {\n        // Do something\n    },\n    \"one\"             : 1,\n    \"seven\"           : 7\n}\n```\n\nExamples of **correct** code for this rule with sample `{ \"align\": { }, \"multiLine\": { } }` options:\n\n```js\n/*eslint key-spacing: [\"error\", {\n    \"multiLine\": {\n        \"beforeColon\": false,\n        \"afterColon\": true\n\n    },\n    \"align\": {\n        \"beforeColon\": true,\n        \"afterColon\": true,\n        \"on\": \"colon\"\n    }\n}]*/\n\nvar obj = {\n    \"myObjectFunction\": function() {\n        // Do something\n        //\n    }, // These are two separate groups, so no alignment between `myObjectFuction` and `one`\n    \"one\"   : 1,\n    \"seven\" : 7 // `one` and `seven` are in their own group, and therefore aligned\n}\n```\n\n### singleLine and multiLine\n\nExamples of **correct** code for this rule with sample `{ \"singleLine\": { }, \"multiLine\": { } }` options:\n\n```js\n/*eslint \"key-spacing\": [2, {\n    \"singleLine\": {\n        \"beforeColon\": false,\n        \"afterColon\": true\n    },\n    \"multiLine\": {\n        \"beforeColon\": true,\n        \"afterColon\": true,\n        \"align\": \"colon\"\n    }\n}]*/\nvar obj = { one: 1, \"two\": 2, three: 3 };\nvar obj2 = {\n    \"two\" : 2,\n    three : 3\n};\n```\n\n## When Not To Use It\n\nIf you have another convention for property spacing that might not be consistent with the available options, or if you want to permit multiple styles concurrently you can safely disable this rule.\n"
	],
	[
		"keyword-spacing",
		"# enforce consistent spacing before and after keywords (keyword-spacing)\n\nKeywords are syntax elements of JavaScript, such as `function` and `if`.\nThese identifiers have special meaning to the language and so often appear in a different color in code editors.\nAs an important part of the language, style guides often refer to the spacing that should be used around keywords.\nFor example, you might have a style guide that says keywords should be always surrounded by spaces, which would mean `if-else` statements must look like this:\n\n```js\nif (foo) {\n    // ...\n} else {\n    // ...\n}\n```\n\nOf course, you could also have a style guide that disallows spaces around keywords.\n\n## Rule Details\n\nThis rule enforces consistent spacing around keywords and keyword-like tokens: `as` (in module declarations), `async` (of async functions), `await` (of await expressions), `break`, `case`, `catch`, `class`, `const`, `continue`, `debugger`, `default`, `delete`, `do`, `else`, `export`, `extends`, `finally`, `for`, `from` (in module declarations), `function`, `get` (of getters), `if`, `import`, `in`, `instanceof`, `let`, `new`, `of` (in for-of statements), `return`, `set` (of setters), `static`, `super`, `switch`, `this`, `throw`, `try`, `typeof`, `var`, `void`, `while`, `with`, and `yield`. This rule is designed carefully not to conflict with other spacing rules: it does not apply to spacing where other rules report problems.\n\n## Options\n\nThis rule has an object option:\n\n* `\"before\": true` (default) requires at least one space before keywords\n* `\"before\": false` disallows spaces before keywords\n* `\"after\": true` (default) requires at least one space after keywords\n* `\"after\": false` disallows spaces after keywords\n* `\"overrides\"` allows overriding spacing style for specified keywords\n\n### before\n\nExamples of **incorrect** code for this rule with the default `{ \"before\": true }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"before\": true }]*/\n\nif (foo) {\n    //...\n}else if (bar) {\n    //...\n}else {\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"before\": true }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"before\": true }]*/\n/*eslint-env es6*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n\n// Avoid conflict with `array-bracket-spacing`\nlet a = [this];\nlet b = [function() {}];\n\n// Avoid conflict with `arrow-spacing`\nlet a = ()=> this.foo;\n\n// Avoid conflict with `block-spacing`\n{function foo() {}}\n\n// Avoid conflict with `comma-spacing`\nlet a = [100,this.foo, this.bar];\n\n// Avoid conflict with `computed-property-spacing`\nobj[this.foo] = 0;\n\n// Avoid conflict with `generator-star-spacing`\nfunction *foo() {}\n\n// Avoid conflict with `key-spacing`\nlet obj = {\n    foo:function() {}\n};\n\n// Avoid conflict with `object-curly-spacing`\nlet obj = {foo: this};\n\n// Avoid conflict with `semi-spacing`\nlet a = this;function foo() {}\n\n// Avoid conflict with `space-in-parens`\n(function () {})();\n\n// Avoid conflict with `space-infix-ops`\nif (\"foo\"in {foo: 0}) {}\nif (10+this.foo<= this.bar) {}\n\n// Avoid conflict with `jsx-curly-spacing`\nlet a = <A foo={this.foo} bar={function(){}} />\n```\n\nExamples of **incorrect** code for this rule with the `{ \"before\": false }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"before\": false }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": false }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"before\": false }]*/\n\nif (foo) {\n    //...\n}else if (bar) {\n    //...\n}else {\n    //...\n}\n```\n\n### after\n\nExamples of **incorrect** code for this rule with the default `{ \"after\": true }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"after\": true }]*/\n\nif(foo) {\n    //...\n} else if(bar) {\n    //...\n} else{\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"after\": true }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"after\": true }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n\n// Avoid conflict with `array-bracket-spacing`\nlet a = [this];\n\n// Avoid conflict with `arrow-spacing`\nlet a = ()=> this.foo;\n\n// Avoid conflict with `comma-spacing`\nlet a = [100, this.foo, this.bar];\n\n// Avoid conflict with `computed-property-spacing`\nobj[this.foo] = 0;\n\n// Avoid conflict with `generator-star-spacing`\nfunction* foo() {}\n\n// Avoid conflict with `key-spacing`\nlet obj = {\n    foo:function() {}\n};\n\n// Avoid conflict with `func-call-spacing`\nclass A {\n    constructor() {\n        super();\n    }\n}\n\n// Avoid conflict with `object-curly-spacing`\nlet obj = {foo: this};\n\n// Avoid conflict with `semi-spacing`\nlet a = this;function foo() {}\n\n// Avoid conflict with `space-before-function-paren`\nfunction() {}\n\n// Avoid conflict with `space-infix-ops`\nif (\"foo\"in{foo: 0}) {}\nif (10+this.foo<= this.bar) {}\n\n// Avoid conflict with `space-unary-ops`\nfunction* foo(a) {\n    return yield+a;\n}\n\n// Avoid conflict with `yield-star-spacing`\nfunction* foo(a) {\n    return yield* a;\n}\n\n// Avoid conflict with `jsx-curly-spacing`\nlet a = <A foo={this.foo} bar={function(){}} />\n```\n\nExamples of **incorrect** code for this rule with the `{ \"after\": false }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"after\": false }]*/\n\nif (foo) {\n    //...\n} else if (bar) {\n    //...\n} else {\n    //...\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"after\": false }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"after\": false }]*/\n\nif(foo) {\n    //...\n} else if(bar) {\n    //...\n} else{\n    //...\n}\n```\n\n### overrides\n\nExamples of **correct** code for this rule with the `{ \"overrides\": { \"if\": { \"after\": false }, \"for\": { \"after\": false }, \"while\": { \"after\": false } } }` option:\n\n```js\n/*eslint keyword-spacing: [\"error\", { \"overrides\": {\n  \"if\": { \"after\": false },\n  \"for\": { \"after\": false },\n  \"while\": { \"after\": false }\n} }]*/\n\nif(foo) {\n    //...\n} else if(bar) {\n    //...\n} else {\n    //...\n}\n\nfor(;;);\n\nwhile(true) {\n  //...\n}\n```\n\n## When Not To Use It\n\nIf you don't want to enforce consistency on keyword spacing, then it's safe to disable this rule.\n"
	],
	[
		"line-comment-position",
		"# enforce position of line comments (line-comment-position)\n\nLine comments can be positioned above or beside code. This rule helps teams maintain a consistent style.\n\n```js\n// above comment\nvar foo = \"bar\";  // beside comment\n```\n\n## Rule Details\n\nThis rule enforces consistent position of line comments. Block comments are not affected by this rule. By default, this rule ignores comments starting with the following words: `eslint`, `jshint`, `jslint`, `istanbul`, `global`, `exported`, `jscs`, `falls through`.\n\n\n## Options\n\nThis rule takes one argument, which can be a string or an object. The string settings are the same as those of the `position` property (explained below). The object option has the following properties:\n\n### position\n\nThe `position` option has two settings:\n\n* `above` (default) enforces line comments only above code, in its own line.\n* `beside` enforces line comments only at the end of code lines.\n\n#### position: above\n\nExamples of **correct** code for the `{ \"position\": \"above\" }` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"position\": \"above\" }]*/\n// valid comment\n1 + 1;\n```\n\n\nExamples of **incorrect** code for the `{ \"position\": \"above\" }` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"position\": \"above\" }]*/\n1 + 1; // invalid comment\n```\n\n#### position: beside\n\nExamples of **correct** code for the `{ \"position\": \"beside\" }` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"position\": \"beside\" }]*/\n1 + 1; // valid comment\n```\n\n\nExamples of **incorrect** code for the `{ \"position\": \"beside\" }` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"position\": \"beside\" }]*/\n// invalid comment\n1 + 1;\n```\n\n### ignorePattern\n\nBy default this rule ignores comments starting with the following words: `eslint`, `jshint`, `jslint`, `istanbul`, `global`, `exported`, `jscs`, `falls through`. An alternative regular expression can be provided.\n\nExamples of **correct** code for the `ignorePattern` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\" }]*/\n1 + 1; // pragma valid comment\n```\n\nExamples of **incorrect** code for the `ignorePattern` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\" }]*/\n1 + 1; // invalid comment\n```\n\n### applyDefaultIgnorePatterns\n\nDefault ignore patterns are applied even when `ignorePattern` is provided. If you want to omit default patterns, set this option to `false`.\n\nExamples of **correct** code for the `{ \"applyDefaultIgnorePatterns\": false }` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\", \"applyDefaultIgnorePatterns\": false }]*/\n1 + 1; // pragma valid comment\n```\n\nExamples of **incorrect** code for the `{ \"applyDefaultIgnorePatterns\": false }` option:\n\n```js\n/*eslint line-comment-position: [\"error\", { \"ignorePattern\": \"pragma\", \"applyDefaultIgnorePatterns\": false }]*/\n1 + 1; // falls through\n```\n\n**Deprecated:** the object property `applyDefaultPatterns` is deprecated. Please use the property `applyDefaultIgnorePatterns` instead.\n\n## When Not To Use It\n\nIf you aren't concerned about having different line comment styles, then you can turn off this rule.\n\n## Compatibility\n\n**JSCS**: [validateCommentPosition](https://jscs-dev.github.io/rule/validateCommentPosition)\n"
	],
	[
		"linebreak-style",
		"# enforce consistent linebreak style (linebreak-style)\n\nWhen developing with a lot of people all having different editors, VCS applications and operating systems it may occur that\ndifferent line endings are written by either of the mentioned (might especially happen when using the windows and mac versions of SourceTree together).\n\nThe linebreaks (new lines) used in windows operating system are usually _carriage returns_ (CR) followed by a _line feed_ (LF) making it a _carriage return line feed_ (CRLF)\nwhereas Linux and Unix use a simple _line feed_ (LF). The corresponding _control sequences_ are `\"\\n\"` (for LF) and `\"\\r\\n\"` for (CRLF).\n\nMany versioning systems (like git and subversion) can automatically ensure the correct ending. However to cover all contingencies, you can activate this rule.\n\n## Rule Details\n\nThis rule enforces consistent line endings independent of operating system, VCS, or editor used across your codebase.\n\n### Options\n\nThis rule has a string option:\n\n* `\"unix\"` (default) enforces the usage of Unix line endings: `\\n` for LF.\n* `\"windows\"` enforces the usage of Windows line endings: `\\r\\n` for CRLF.\n\n\n### unix\n\nExamples of **incorrect** code for this rule with the default `\"unix\"` option:\n\n```js\n/*eslint linebreak-style: [\"error\", \"unix\"]*/\n\nvar a = 'a'; // \\r\\n\n\n```\n\nExamples of **correct** code for this rule with the default `\"unix\"` option:\n\n```js\n/*eslint linebreak-style: [\"error\", \"unix\"]*/\n\nvar a = 'a', // \\n\n    b = 'b'; // \\n\n// \\n\nfunction foo(params) { // \\n\n    // do stuff \\n\n}// \\n\n```\n\n### windows\n\nExamples of **incorrect** code for this rule with the `\"windows\"` option:\n\n```js\n/*eslint linebreak-style: [\"error\", \"windows\"]*/\n\nvar a = 'a'; // \\n\n```\n\nExamples of **correct** code for this rule with the `\"windows\"` option:\n\n```js\n/*eslint linebreak-style: [\"error\", \"windows\"]*/\n\nvar a = 'a', // \\r\\n\n    b = 'b'; // \\r\\n\n// \\r\\n\nfunction foo(params) { // \\r\\n\n    // do stuff \\r\\n\n} // \\r\\n\n```\n\n## Using this rule with version control systems\n\nVersion control systems sometimes have special behavior for linebreaks. To make it easy for developers to contribute to your codebase from different platforms, you may want to configure your VCS to handle linebreaks appropriately.\n\nFor example, the default behavior of [git](https://git-scm.com/) on Windows systems is to convert LF linebreaks to CRLF when checking out files, but to store the linebreaks as LF when committing a change. This will cause the `linebreak-style` rule to report errors if configured with the `\"unix\"` setting, because the files that ESLint sees will have CRLF linebreaks. If you use git, you may want to add a line to your [`.gitattributes` file](https://git-scm.com/docs/gitattributes) to prevent git from converting linebreaks in `.js` files:\n\n```\n*.js text eol=lf\n```\n\n## When Not To Use It\n\nIf you aren't concerned about having different line endings within your code, then you can safely turn this rule off.\n\n## Compatibility\n\n* **JSCS**: [validateLineBreaks](https://jscs-dev.github.io/rule/validateLineBreaks)\n"
	],
	[
		"lines-around-comment",
		"# require empty lines around comments (lines-around-comment)\n\nMany style guides require empty lines before or after comments. The primary goal\nof these rules is to make the comments easier to read and improve readability of the code.\n\n## Rule Details\n\nThis rule requires empty lines before and/or after comments. It can be enabled separately for both block (`/*`) and line (`//`) comments. This rule does not apply to comments that appear on the same line as code and does not require empty lines at the beginning or end of a file.\n\n## Options\n\nThis rule has an object option:\n\n* `\"beforeBlockComment\": true` (default) requires an empty line before block comments\n* `\"afterBlockComment\": true` requires an empty line after block comments\n* `\"beforeLineComment\": true` requires an empty line before line comments\n* `\"afterLineComment\": true` requires an empty line after line comments\n* `\"allowBlockStart\": true` allows comments to appear at the start of block statements\n* `\"allowBlockEnd\": true` allows comments to appear at the end of block statements\n* `\"allowObjectStart\": true` allows comments to appear at the start of object literals\n* `\"allowObjectEnd\": true` allows comments to appear at the end of object literals\n* `\"allowArrayStart\": true` allows comments to appear at the start of array literals\n* `\"allowArrayEnd\": true` allows comments to appear at the end of array literals\n* `\"allowClassStart\": true` allows comments to appear at the start of classes\n* `\"allowClassEnd\": true` allows comments to appear at the end of classes\n* `\"applyDefaultIgnorePatterns\"` enables or disables the default comment patterns to be ignored by the rule\n* `\"ignorePattern\"` custom patterns to be ignored by the rule\n\n\n### beforeBlockComment\n\nExamples of **incorrect** code for this rule with the default `{ \"beforeBlockComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true }]*/\n\nvar night = \"long\";\n/* what a great and wonderful day */\nvar day = \"great\"\n```\n\nExamples of **correct** code for this rule with the default `{ \"beforeBlockComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true }]*/\n\nvar night = \"long\";\n\n/* what a great and wonderful day */\nvar day = \"great\"\n```\n\n### afterBlockComment\n\nExamples of **incorrect** code for this rule with the `{ \"afterBlockComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true }]*/\n\nvar night = \"long\";\n\n/* what a great and wonderful day */\nvar day = \"great\"\n```\n\nExamples of **correct** code for this rule with the `{ \"afterBlockComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true }]*/\n\nvar night = \"long\";\n\n/* what a great and wonderful day */\n\nvar day = \"great\"\n```\n\n### beforeLineComment\n\nExamples of **incorrect** code for this rule with the `{ \"beforeLineComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true }]*/\n\nvar night = \"long\";\n// what a great and wonderful day\nvar day = \"great\"\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeLineComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true }]*/\n\nvar night = \"long\";\n\n// what a great and wonderful day\nvar day = \"great\"\n```\n\n### afterLineComment\n\nExamples of **incorrect** code for this rule with the `{ \"afterLineComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true }]*/\n\nvar night = \"long\";\n// what a great and wonderful day\nvar day = \"great\"\n```\n\nExamples of **correct** code for this rule with the `{ \"afterLineComment\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true }]*/\n\nvar night = \"long\";\n// what a great and wonderful day\n\nvar day = \"great\"\n```\n\n### allowBlockStart\n\nExamples of **correct** code for this rule with the `{ \"beforeLineComment\": true, \"allowBlockStart\": true }` options:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowBlockStart\": true }]*/\n\nfunction foo(){\n    // what a great and wonderful day\n    var day = \"great\"\n    return day;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeBlockComment\": true, \"allowBlockStart\": true }` options:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowBlockStart\": true }]*/\n\nfunction foo(){\n    /* what a great and wonderful day */\n    var day = \"great\"\n    return day;\n}\n```\n\n### allowBlockEnd\n\nExamples of **correct** code for this rule with the `{ \"afterLineComment\": true, \"allowBlockEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowBlockEnd\": true }]*/\n\nfunction foo(){\n    var day = \"great\"\n    return day;\n    // what a great and wonderful day\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"afterBlockComment\": true, \"allowBlockEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true, \"allowBlockEnd\": true }]*/\n\nfunction foo(){\n    var day = \"great\"\n    return day;\n\n    /* what a great and wonderful day */\n}\n```\n\n### allowClassStart\n\nExamples of **incorrect** code for this rule with the `{ \"beforeLineComment\": true, \"allowClassStart\": false }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowClassStart\": false }]*/\n\nclass foo {\n    // what a great and wonderful day\n    day() {}\n};\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeLineComment\": true, \"allowClassStart\": false }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowClassStart\": false }]*/\n\nclass foo {\n\n    // what a great and wonderful day\n    day() {}\n};\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeLineComment\": true, \"allowClassStart\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowClassStart\": true }]*/\n\nclass foo {\n    // what a great and wonderful day\n    day() {}\n};\n```\n\nExamples of **incorrect** code for this rule with the `{ \"beforeBlockComment\": true, \"allowClassStart\": false }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowClassStart\": false }]*/\n\nclass foo {\n    /* what a great and wonderful day */\n    day() {}\n};\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeBlockComment\": true, \"allowClassStart\": false }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowClassStart\": false }]*/\n\nclass foo {\n\n    /* what a great and wonderful day */\n    day() {}\n};\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeBlockComment\": true, \"allowClassStart\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowClassStart\": true }]*/\n\nclass foo {\n    /* what a great and wonderful day */\n    day() {}\n};\n```\n\n### allowClassEnd\n\nExamples of **correct** code for this rule with the `{ \"afterLineComment\": true, \"allowClassEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowClassEnd\": true }]*/\n\nclass foo {\n    day() {}\n    // what a great and wonderful day\n};\n```\n\nExamples of **correct** code for this rule with the `{ \"afterBlockComment\": true, \"allowClassEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true, \"allowClassEnd\": true }]*/\n\nclass foo {\n    day() {}\n\n    /* what a great and wonderful day */\n};\n```\n\n### allowObjectStart\n\nExamples of **correct** code for this rule with the `{ \"beforeLineComment\": true, \"allowObjectStart\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowObjectStart\": true }]*/\n\nvar foo = {\n    // what a great and wonderful day\n    day: \"great\"\n};\n\nconst {\n    // what a great and wonderful day\n    foo: someDay\n} = {foo: \"great\"};\n\nconst {\n    // what a great and wonderful day\n    day\n} = {day: \"great\"};\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeBlockComment\": true, \"allowObjectStart\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowObjectStart\": true }]*/\n\nvar foo = {\n    /* what a great and wonderful day */\n    day: \"great\"\n};\n\nconst {\n    /* what a great and wonderful day */\n    foo: someDay\n} = {foo: \"great\"};\n\nconst {\n    /* what a great and wonderful day */\n    day\n} = {day: \"great\"};\n```\n\n### allowObjectEnd\n\nExamples of **correct** code for this rule with the `{ \"afterLineComment\": true, \"allowObjectEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowObjectEnd\": true }]*/\n\nvar foo = {\n    day: \"great\"\n    // what a great and wonderful day\n};\n\nconst {\n    foo: someDay\n    // what a great and wonderful day\n} = {foo: \"great\"};\n\nconst {\n    day\n    // what a great and wonderful day\n} = {day: \"great\"};\n```\n\nExamples of **correct** code for this rule with the `{ \"afterBlockComment\": true, \"allowObjectEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true, \"allowObjectEnd\": true }]*/\n\nvar foo = {\n    day: \"great\"\n\n    /* what a great and wonderful day */\n};\n\nconst {\n    foo: someDay\n\n    /* what a great and wonderful day */\n} = {foo: \"great\"};\n\nconst {\n    day\n\n    /* what a great and wonderful day */\n} = {day: \"great\"};\n```\n\n### allowArrayStart\n\nExamples of **correct** code for this rule with the `{ \"beforeLineComment\": true, \"allowArrayStart\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeLineComment\": true, \"allowArrayStart\": true }]*/\n\nvar day = [\n    // what a great and wonderful day\n    \"great\",\n    \"wonderful\"\n];\n\nconst [\n    // what a great and wonderful day\n    someDay\n] = [\"great\", \"not great\"];\n```\n\nExamples of **correct** code for this rule with the `{ \"beforeBlockComment\": true, \"allowArrayStart\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"beforeBlockComment\": true, \"allowArrayStart\": true }]*/\n\nvar day = [\n    /* what a great and wonderful day */\n    \"great\",\n    \"wonderful\"\n];\n\nconst [\n    /* what a great and wonderful day */\n    someDay\n] = [\"great\", \"not great\"];\n```\n\n### allowArrayEnd\n\nExamples of **correct** code for this rule with the `{ \"afterLineComment\": true, \"allowArrayEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterLineComment\": true, \"allowArrayEnd\": true }]*/\n\nvar day = [\n    \"great\",\n    \"wonderful\"\n    // what a great and wonderful day\n];\n\nconst [\n    someDay\n    // what a great and wonderful day\n] = [\"great\", \"not great\"];\n```\n\nExamples of **correct** code for this rule with the `{ \"afterBlockComment\": true, \"allowArrayEnd\": true }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"afterBlockComment\": true, \"allowArrayEnd\": true }]*/\n\nvar day = [\n    \"great\",\n    \"wonderful\"\n\n    /* what a great and wonderful day */\n];\n\nconst [\n    someDay\n\n    /* what a great and wonderful day */\n] = [\"great\", \"not great\"];\n```\n\n\n### ignorePattern\n\nBy default this rule ignores comments starting with the following words: `eslint`, `jshint`, `jslint`, `istanbul`, `global`, `exported`, `jscs`. An alternative regular expression can be provided.\n\nExamples of **correct** code for the `ignorePattern` option:\n\n```js\n/*eslint lines-around-comment: [\"error\"]*/\n\nfoo();\n/* eslint mentioned in this comment */,\nbar();\n\n\n/*eslint lines-around-comment: [\"error\", { \"ignorePattern\": \"pragma\" }] */\n\nfoo();\n/* a valid comment using pragma in it */\n```\n\nExamples of **incorrect** code for the `ignorePattern` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"ignorePattern\": \"pragma\" }] */\n\n1 + 1;\n/* something else */\n```\n\n### applyDefaultIgnorePatterns\n\nDefault ignore patterns are applied even when `ignorePattern` is provided. If you want to omit default patterns, set this option to `false`.\n\nExamples of **correct** code for the `{ \"applyDefaultIgnorePatterns\": false }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"ignorePattern\": \"pragma\", applyDefaultIgnorePatterns: false }] */\n\nfoo();\n/* a valid comment using pragma in it */\n```\n\nExamples of **incorrect** code for the `{ \"applyDefaultIgnorePatterns\": false }` option:\n\n```js\n/*eslint lines-around-comment: [\"error\", { \"applyDefaultIgnorePatterns\": false }] */\n\nfoo();\n/* eslint mentioned in comment */\n\n```\n\n\n## When Not To Use It\n\nMany people enjoy a terser code style and don't mind comments bumping up against code. If you fall into that category this rule is not for you.\n\n## Related Rules\n\n* [space-before-blocks](space-before-blocks.md)\n* [spaced-comment](spaced-comment.md)\n"
	],
	[
		"lines-around-directive",
		"# require or disallow newlines around directives (lines-around-directive)\n\nThis rule was **deprecated** in ESLint v4.0.0 and replaced by the [padding-line-between-statements](padding-line-between-statements.md) rule.\n\nDirectives are used in JavaScript to indicate to the execution environment that a script would like to opt into a feature such as `\"strict mode\"`. Directives are grouped together in a [directive prologue](https://www.ecma-international.org/ecma-262/7.0/#directive-prologue) at the top of either a file or function block and are applied to the scope in which they occur.\n\n```js\n// Strict mode is invoked for the entire script\n\"use strict\";\n\nvar foo;\n\nfunction bar() {\n  var baz;\n}\n```\n\n```js\nvar foo;\n\nfunction bar() {\n  // Strict mode is only invoked within this function\n  \"use strict\";\n\n  var baz;\n}\n```\n\n## Rule Details\n\nThis rule requires or disallows blank newlines around directive prologues. This rule does not enforce any conventions about blank newlines between the individual directives. In addition, it does not require blank newlines before directive prologues unless they are preceded by a comment. Please use the [padded-blocks](padded-blocks.md) rule if this is a style you would like to enforce.\n\n## Options\n\nThis rule has one option. It can either be a string or an object:\n\n* `\"always\"` (default) enforces blank newlines around directives.\n* `\"never\"` disallows blank newlines around directives.\n\nor\n\n```js\n{\n  \"before\": \"always\" or \"never\"\n  \"after\": \"always\" or \"never\",\n}\n```\n\n### always\n\nThis is the default option.\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint lines-around-directive: [\"error\", \"always\"] */\n\n/* Top of file */\n\"use strict\";\nvar foo;\n\n/* Top of file */\n// comment\n\"use strict\";\n\"use asm\";\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n  var bar;\n}\n\nfunction foo() {\n  // comment\n  \"use strict\";\n  var bar;\n}\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint lines-around-directive: [\"error\", \"always\"] */\n\n/* Top of file */\n\"use strict\";\n\nvar foo;\n\n/* Top of file */\n// comment\n\n\"use strict\";\n\"use asm\";\n\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n\n  var bar;\n}\n\nfunction foo() {\n  // comment\n\n  \"use strict\";\n\n  var bar;\n}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/* eslint lines-around-directive: [\"error\", \"never\"] */\n\n/* Top of file */\n\n\"use strict\";\n\nvar foo;\n\n\n/* Top of file */\n// comment\n\n\"use strict\";\n\"use asm\";\n\nvar foo;\n\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n\n  var bar;\n}\n\n\nfunction foo() {\n  // comment\n\n  \"use strict\";\n\n  var bar;\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/* eslint lines-around-directive: [\"error\", \"never\"] */\n\n/* Top of file */\n\"use strict\";\nvar foo;\n\n/* Top of file */\n// comment\n\"use strict\";\n\"use asm\";\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n  var bar;\n}\n\nfunction foo() {\n  // comment\n  \"use strict\";\n  var bar;\n}\n```\n\n### before & after\n\nExamples of **incorrect** code for this rule with the `{ \"before\": \"never\", \"after\": \"always\" }` option:\n\n```js\n/* eslint lines-around-directive: [\"error\", { \"before\": \"never\", \"after\": \"always\" }] */\n\n/* Top of file */\n\n\"use strict\";\nvar foo;\n\n/* Top of file */\n// comment\n\n\"use strict\";\n\"use asm\";\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n  var bar;\n}\n\nfunction foo() {\n  // comment\n\n  \"use strict\";\n  var bar;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": \"never\", \"after\": \"always\" }`  option:\n\n```js\n/* eslint lines-around-directive: [\"error\", { \"before\": \"never\", \"after\": \"always\" }] */\n\n/* Top of file */\n\"use strict\";\n\nvar foo;\n\n/* Top of file */\n// comment\n\"use strict\";\n\"use asm\";\n\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n\n  var bar;\n}\n\nfunction foo() {\n  // comment\n  \"use strict\";\n\n  var bar;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"before\": \"always\", \"after\": \"never\" }` option:\n\n```js\n/* eslint lines-around-directive: [\"error\", { \"before\": \"always\", \"after\": \"never\" }] */\n\n/* Top of file */\n\"use strict\";\n\nvar foo;\n\n/* Top of file */\n// comment\n\"use strict\";\n\"use asm\";\n\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n\n  var bar;\n}\n\nfunction foo() {\n  // comment\n  \"use strict\";\n\n  var bar;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"before\": \"always\", \"after\": \"never\" }` option:\n\n```js\n/* eslint lines-around-directive: [\"error\", { \"before\": \"always\", \"after\": \"never\" }] */\n\n/* Top of file */\n\"use strict\";\nvar foo;\n\n/* Top of file */\n// comment\n\n\"use strict\";\n\"use asm\";\nvar foo;\n\nfunction foo() {\n  \"use strict\";\n  \"use asm\";\n  var bar;\n}\n\nfunction foo() {\n  // comment\n\n  \"use strict\";\n  var bar;\n}\n```\n\n## When Not To Use It\n\nYou can safely disable this rule if you do not have any strict conventions about whether or not directive prologues should have blank newlines before or after them.\n\n## Related Rules\n\n* [lines-around-comment](lines-around-comment.md)\n* [padded-blocks](padded-blocks.md)\n\n## Compatibility\n\n* **JSCS**: [requirePaddingNewLinesAfterUseStrict](https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict)\n* **JSCS**: [disallowPaddingNewLinesAfterUseStrict](https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict)\n"
	],
	[
		"lines-between-class-members",
		"# require or disallow an empty line between class members (lines-between-class-members)\n\nThis rule improves readability by enforcing lines between class members. It will not check empty lines before the first member and after the last member, since that is already taken care of by padded-blocks.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```js\n/* eslint lines-between-class-members: [\"error\", \"always\"]*/\nclass MyClass {\n  foo() {\n    //...\n  }\n  bar() {\n    //...\n  }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/* eslint lines-between-class-members: [\"error\", \"always\"]*/\nclass MyClass {\n  foo() {\n    //...\n  }\n\n  bar() {\n    //...\n  }\n}\n```\n\n### Options\n\nThis rule has a string option and an object option.\n\nString option:\n\n* `\"always\"`(default) require an empty line after class members\n* `\"never\"` disallows an empty line after class members\n\nObject option:\n\n* `\"exceptAfterSingleLine\": false`(default) **do not** skip checking empty lines after single-line class members\n* `\"exceptAfterSingleLine\": true` skip checking empty lines after single-line class members\n\nExamples of **incorrect** code for this rule with the string option:\n\n```js\n/* eslint lines-between-class-members: [\"error\", \"always\"]*/\nclass Foo{\n  bar(){}\n  baz(){}\n}\n\n/* eslint lines-between-class-members: [\"error\", \"never\"]*/\nclass Foo{\n  bar(){}\n\n  baz(){}\n}\n```\n\nExamples of **correct** code for this rule with the string option:\n\n```js\n/* eslint lines-between-class-members: [\"error\", \"always\"]*/\nclass Foo{\n  bar(){}\n\n  baz(){}\n}\n\n/* eslint lines-between-class-members: [\"error\", \"never\"]*/\nclass Foo{\n  bar(){}\n  baz(){}\n}\n```\n\nExamples of **correct** code for this rule with the object option:\n\n```js\n/* eslint lines-between-class-members: [\"error\", \"always\", { exceptAfterSingleLine: true }]*/\nclass Foo{\n  bar(){} // single line class member\n  baz(){\n    // multi line class member\n  }\n\n  qux(){}\n}\n```\n\n## When Not To Use It\n\nIf you don't want to enforce empty lines between class members, you can disable this rule.\n\n## Related Rules\n\n* [padded-blocks](padded-blocks.md)\n* [padding-line-between-statements](padding-line-between-statements.md)\n\n## Compatibility\n\n* [requirePaddingNewLinesAfterBlocks](https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterBlocks)\n* [disallowPaddingNewLinesAfterBlocks](https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterBlocks)\n"
	],
	[
		"max-classes-per-file",
		"# enforce a maximum number of classes per file (max-classes-per-file)\n\nFiles containing multiple classes can often result in a less navigable\nand poorly structured codebase. Best practice is to keep each file\nlimited to a single responsibility.\n\n## Rule Details\n\nThis rule enforces that each file may contain only a particular number\nof classes and no more.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint max-classes-per-file: \"error\"*/\n\nclass Foo {}\nclass Bar {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint max-classes-per-file: \"error\"*/\n\nclass Foo {}\n```\n\n## Options\n\nThis rule has a numeric option (defaulted to 1) to specify the\nmaximum number of classes.\n\nFor example:\n\n```json\n{\n    \"max-classes-per-file\": [\"error\", 1]\n}\n```\n\nExamples of **correct** code for this rule with the numeric option set to `2`:\n\n```js\n/* eslint max-classes-per-file: [\"error\", 2] */\n\nclass Foo {}\nclass Bar {}\n```\n"
	],
	[
		"max-depth",
		"# enforce a maximum depth that blocks can be nested (max-depth)\n\nMany developers consider code difficult to read if blocks are nested beyond a certain depth.\n\n## Rule Details\n\nThis rule enforces a maximum depth that blocks can be nested to reduce code complexity.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"max\"` (default `4`) enforces a maximum depth that blocks can be nested\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 4 }` option:\n\n```js\n/*eslint max-depth: [\"error\", 4]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    for (;;) { // Nested 1 deep\n        let val = () => (param) => { // Nested 2 deep\n            if (true) { // Nested 3 deep\n                if (true) { // Nested 4 deep\n                    if (true) { // Nested 5 deep\n                    }\n                }\n            }\n        };\n    }\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 4 }` option:\n\n```js\n/*eslint max-depth: [\"error\", 4]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    for (;;) { // Nested 1 deep\n        let val = () => (param) => { // Nested 2 deep\n           if (true) { // Nested 3 deep\n                if (true) { // Nested 4 deep\n                }\n            }\n        };\n    }\n}\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-len](max-len.md)\n* [max-lines](max-lines.md)\n* [max-lines-per-function](max-lines-per-function.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\n"
	],
	[
		"max-len",
		"# enforce a maximum line length (max-len)\n\nVery long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).\n\n```js\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" }; // very long\n```\n\n## Rule Details\n\nThis rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"code\"` (default `80`) enforces a maximum line length\n* `\"tabWidth\"` (default `4`) specifies the character width for tab characters\n* `\"comments\"` enforces a maximum line length for comments; defaults to value of `code`\n* `\"ignorePattern\"` ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON\n* `\"ignoreComments\": true` ignores all trailing comments and comments on their own line\n* `\"ignoreTrailingComments\": true` ignores only trailing comments\n* `\"ignoreUrls\": true` ignores lines that contain a URL\n* `\"ignoreStrings\": true` ignores lines that contain a double-quoted or single-quoted string\n* `\"ignoreTemplateLiterals\": true` ignores lines that contain a template literal\n* `\"ignoreRegExpLiterals\": true` ignores lines that contain a RegExp literal\n\n### code\n\nExamples of **incorrect** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"code\": 80 }]*/\n\nvar foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" }, \"difficult\": \"to read\" };\n```\n\nExamples of **correct** code for this rule with the default `{ \"code\": 80 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"code\": 80 }]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};\n```\n\n### tabWidth\n\nExamples of **incorrect** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"code\": 80, \"tabWidth\": 4 }]*/\n\n\\t  \\t  var foo = { \"bar\": \"This is a bar.\", \"baz\": { \"qux\": \"This is a qux\" } };\n```\n\nExamples of **correct** code for this rule with the default `{ \"tabWidth\": 4 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"code\": 80, \"tabWidth\": 4 }]*/\n\n\\t  \\t  var foo = {\n\\t  \\t  \\t  \\t  \"bar\": \"This is a bar.\",\n\\t  \\t  \\t  \\t  \"baz\": { \"qux\": \"This is a qux\" }\n\\t  \\t  };\n```\n\n### comments\n\nExamples of **incorrect** code for this rule with the `{ \"comments\": 65 }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"comments\": 65 }]*/\n\n/**\n * This is a comment that violates the maximum line length we have specified\n**/\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreComments\": true }]*/\n\n/**\n * This is a really really really really really really really really really long comment\n**/\n```\n\n### ignoreTrailingComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreTrailingComments\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTrailingComments\": true }]*/\n\nvar foo = 'bar'; // This is a really really really really really really really long comment\n```\n\n### ignoreUrls\n\nExamples of **correct** code for this rule with the `{ \"ignoreUrls\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreUrls\": true }]*/\n\nvar url = 'https://www.example.com/really/really/really/really/really/really/really/long';\n```\n\n### ignoreStrings\n\nExamples of **correct** code for this rule with the `{ \"ignoreStrings\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreStrings\": true }]*/\n\nvar longString = 'this is a really really really really really long string!';\n```\n\n### ignoreTemplateLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreTemplateLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreTemplateLiterals\": true }]*/\n\nvar longTemplateLiteral = `this is a really really really really really long template literal!`;\n```\n\n### ignoreRegExpLiterals\n\nExamples of **correct** code for this rule with the `{ \"ignoreRegExpLiterals\": true }` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignoreRegExpLiterals\": true }]*/\n\nvar longRegExpLiteral = /this is a really really really really really long regular expression!/;\n```\n\n### ignorePattern\n\nExamples of **correct** code for this rule with the `ignorePattern` option:\n\n```js\n/*eslint max-len: [\"error\", { \"ignorePattern\": \"^\\\\s*var\\\\s.+=\\\\s*require\\\\s*\\\\(\" }]*/\n\nvar dep = require('really/really/really/really/really/really/really/really/long/module');\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\n"
	],
	[
		"max-lines",
		"# enforce a maximum file length (max-lines)\n\nSome people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what's going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.\n\n## Rule Details\n\nThis rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.\n\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"max\"` (default `300`) enforces a maximum number of lines in a file\n\n* `\"skipBlankLines\": true` ignore lines made up purely of whitespace.\n\n* `\"skipComments\": true` ignore lines containing just comments\n\n### code\n\nExamples of **incorrect** code for this rule with a max value of `2`:\n\n```js\n/*eslint max-lines: [\"error\", 2]*/\nvar a,\n    b,\n    c;\n```\n\n```js\n/*eslint max-lines: [\"error\", 2]*/\n\nvar a,\n    b,c;\n```\n\n```js\n/*eslint max-lines: [\"error\", 2]*/\n// a comment\nvar a,\n    b,c;\n```\n\nExamples of **correct** code for this rule with a max value of `2`:\n\n```js\n/*eslint max-lines: [\"error\", 2]*/\nvar a,\n    b, c;\n```\n\n```js\n/*eslint max-lines: [\"error\", 2]*/\n\nvar a, b, c;\n```\n\n```js\n/*eslint max-lines: [\"error\", 2]*/\n// a comment\nvar a, b, c;\n```\n\n### skipBlankLines\n\nExamples of **incorrect** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n```js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipBlankLines\": true}]*/\n\nvar a,\n    b,\n    c;\n```\n\nExamples of **correct** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n```js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipBlankLines\": true}]*/\n\nvar a,\n    b, c;\n```\n\n### skipComments\n\nExamples of **incorrect** code for this rule with the `{ \"skipComments\": true }` option:\n\n```js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\n// a comment\nvar a,\n    b,\n    c;\n```\n\nExamples of **correct** code for this rule with the `{ \"skipComments\": true }` option:\n\n```js\n/*eslint max-lines: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\n// a comment\nvar a,\n    b, c;\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the number of lines in your files.\n\n## Further reading\n\n* [Software Module size and file size](http://www.mind2b.com/component/content/article/24-software-module-size-and-file-size)\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-lines-per-function](max-lines-per-function.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\n\n## Compatibility\n\n* **JSCS**: [maximumNumberOfLines](https://jscs-dev.github.io/rule/maximumNumberOfLines)\n"
	],
	[
		"max-lines-per-function",
		"# enforce a maximum function length (max-lines-per-function)\n\nSome people consider large functions a code smell. Large functions tend to do a lot of things and can make it hard following what's going on. Many coding style guides dictate a limit of the number of lines that a function can comprise of. This rule can help enforce that style.\n\n## Rule Details\n\nThis rule enforces a maximum number of lines per function, in order to aid in maintainability and reduce complexity.\n\n## Why not use `max-statements` or other complexity measurement rules instead?\n\nNested long method chains like the below example are often broken onto separate lines for readability:\n\n```\nfunction() {\n    return m(\"div\", [\n        m(\"table\", {className: \"table table-striped latest-data\"}, [\n            m(\"tbody\",\n                data.map(function(db) {\n                    return m(\"tr\", {key: db.dbname}, [\n                        m(\"td\", {className: \"dbname\"}, db.dbname),\n                        m(\"td\", {className: \"query-count\"},  [\n                            m(\"span\", {className: db.lastSample.countClassName}, db.lastSample.nbQueries)\n                        ])\n                    ])\n                })\n            )\n        ])\n    ])\n}\n```\n\n* `max-statements` will only report this as 1 statement, despite being 16 lines of code.\n* `complexity` will only report a complexity of 1\n* `max-nested-callbacks` will only report 1\n* `max-depth` will report a depth of 0\n\n## Options\n\nThis rule has the following options that can be specified using an object:\n\n* `\"max\"` (default `50`) enforces a maximum number of lines in a function.\n\n* `\"skipBlankLines\"` (default `false`) ignore lines made up purely of whitespace.\n\n* `\"skipComments\"` (default `false`) ignore lines containing just comments.\n\n* `\"IIFEs\"` (default `false`) include any code included in IIFEs.\n\nAlternatively, you may specify a single integer for the `max` option:\n\n```json\n\"max-lines-per-function\": [\"error\", 20]\n```\n\nis equivalent to\n\n```json\n\"max-lines-per-function\": [\"error\", { \"max\": 20 }]\n```\n\n### code\n\nExamples of **incorrect** code for this rule with a max value of `2`:\n\n```js\n/*eslint max-lines-per-function: [\"error\", 2]*/\nfunction foo() {\n    var x = 0;\n}\n```\n\n```js\n/*eslint max-lines-per-function: [\"error\", 2]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\n```js\n/*eslint max-lines-per-function: [\"error\", 2]*/\nfunction foo() {\n    // a comment followed by a blank line\n\n    var x = 0;\n}\n```\n\nExamples of **correct** code for this rule with a max value of `3`:\n\n```js\n/*eslint max-lines-per-function: [\"error\", 3]*/\nfunction foo() {\n    var x = 0;\n}\n```\n\n```js\n/*eslint max-lines-per-function: [\"error\", 3]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\n```js\n/*eslint max-lines-per-function: [\"error\", 3]*/\nfunction foo() {\n    // a comment followed by a blank line\n\n    var x = 0;\n}\n```\n\n### skipBlankLines\n\nExamples of **incorrect** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n```js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 2, \"skipBlankLines\": true}]*/\nfunction foo() {\n\n    var x = 0;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n```js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 3, \"skipBlankLines\": true}]*/\nfunction foo() {\n\n    var x = 0;\n}\n```\n\n### skipComments\n\nExamples of **incorrect** code for this rule with the `{ \"skipComments\": true }` option:\n\n```js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 2, \"skipComments\": true}]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"skipComments\": true }` option:\n\n```js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 3, \"skipComments\": true}]*/\nfunction foo() {\n    // a comment\n    var x = 0;\n}\n```\n\n### IIFEs\n\nExamples of **incorrect** code for this rule with the `{ \"IIFEs\": true }` option:\n\n```js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 2, \"IIFEs\": true}]*/\n(function(){\n    var x = 0;\n}());\n```\n\nExamples of **correct** code for this rule with the `{ \"IIFEs\": true }` option:\n\n```js\n/*eslint max-lines-per-function: [\"error\", {\"max\": 3, \"IIFEs\": true}]*/\n(function(){\n    var x = 0;\n}());\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the number of lines in your functions.\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-lines](max-lines.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\n* [max-statements-per-line](max-statements-per-line.md)\n"
	],
	[
		"max-nested-callbacks",
		"# enforce a maximum depth that callbacks can be nested (max-nested-callbacks)\n\nMany JavaScript libraries use the callback pattern to manage asynchronous operations. A program of any complexity will most likely need to manage several asynchronous operations at various levels of concurrency. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested.\n\n```js\nfoo(function () {\n    bar(function () {\n        baz(function() {\n            qux(function () {\n\n            });\n        });\n    });\n});\n```\n\n## Rule Details\n\nThis rule enforces a maximum depth that callbacks can be nested to increase code clarity.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"max\"` (default `10`) enforces a maximum depth that callbacks can be nested\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\n### max\n\nExamples of **incorrect** code for this rule with the `{ \"max\": 3 }` option:\n\n```js\n/*eslint max-nested-callbacks: [\"error\", 3]*/\n\nfoo1(function() {\n    foo2(function() {\n        foo3(function() {\n            foo4(function() {\n                // Do something\n            });\n        });\n    });\n});\n```\n\nExamples of **correct** code for this rule with the `{ \"max\": 3 }` option:\n\n```js\n/*eslint max-nested-callbacks: [\"error\", 3]*/\n\nfoo1(handleFoo1);\n\nfunction handleFoo1() {\n    foo2(handleFoo2);\n}\n\nfunction handleFoo2() {\n    foo3(handleFoo3);\n}\n\nfunction handleFoo3() {\n    foo4(handleFoo4);\n}\n\nfunction handleFoo4() {\n    foo5();\n}\n```\n\n## Further Reading\n\n* [Control flow in Node.js](http://book.mixu.net/node/ch7.html)\n* [Control Flow in Node](https://howtonode.org/control-flow)\n* [Control Flow in Node Part II](https://howtonode.org/control-flow-part-ii)\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-lines](max-lines.md)\n* [max-lines-per-function](max-lines-per-function.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\n"
	],
	[
		"max-params",
		"# enforce a maximum number of parameters in function definitions (max-params)\n\nFunctions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in. As a result, many coders adhere to a convention that caps the number of parameters a function can take.\n\n```js\nfunction foo (bar, baz, qux, qxx) { // four parameters, may be too many\n    doSomething();\n}\n```\n\n## Rule Details\n\nThis rule enforces a maximum number of parameters allowed in function definitions.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"max\"` (default `3`) enforces a maximum number of parameters in function definitions\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 3 }` option:\n\n```js\n/*eslint max-params: [\"error\", 3]*/\n/*eslint-env es6*/\n\nfunction foo (bar, baz, qux, qxx) {\n    doSomething();\n}\n\nlet foo = (bar, baz, qux, qxx) => {\n    doSomething();\n};\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 3 }` option:\n\n```js\n/*eslint max-params: [\"error\", 3]*/\n/*eslint-env es6*/\n\nfunction foo (bar, baz, qux) {\n    doSomething();\n}\n\nlet foo = (bar, baz, qux) => {\n    doSomething();\n};\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-lines](max-lines.md)\n* [max-lines-per-function](max-lines-per-function.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-statements](max-statements.md)\n"
	],
	[
		"max-statements",
		"# enforce a maximum number of statements allowed in function blocks (max-statements)\n\nThe `max-statements` rule allows you to specify the maximum number of statements allowed in a function.\n\n```js\nfunction foo() {\n  var bar = 1; // one statement\n  var baz = 2; // two statements\n  var qux = 3; // three statements\n}\n```\n\n## Rule Details\n\nThis rule enforces a maximum number of statements allowed in function blocks.\n\n## Options\n\nThis rule has a number or object option:\n\n* `\"max\"` (default `10`) enforces a maximum number of statements allows in function blocks\n\n**Deprecated:** The object property `maximum` is deprecated; please use the object property `max` instead.\n\nThis rule has an object option:\n\n* `\"ignoreTopLevelFunctions\": true` ignores top-level functions\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 10 }` option:\n\n```js\n/*eslint max-statements: [\"error\", 10]*/\n/*eslint-env es6*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n\n  var foo11 = 11; // Too many.\n}\n\nlet foo = () => {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n\n  var foo11 = 11; // Too many.\n};\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 10 }` option:\n\n```js\n/*eslint max-statements: [\"error\", 10]*/\n/*eslint-env es6*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n  return function () {\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    return 42;\n  };\n}\n\nlet foo = () => {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n  return function () {\n\n    // The number of statements in the inner function does not count toward the\n    // statement maximum.\n\n    return 42;\n  };\n}\n```\n\n### ignoreTopLevelFunctions\n\nExamples of additional **correct** code for this rule with the `{ \"max\": 10 }, { \"ignoreTopLevelFunctions\": true }` options:\n\n```js\n/*eslint max-statements: [\"error\", 10, { \"ignoreTopLevelFunctions\": true }]*/\n\nfunction foo() {\n  var foo1 = 1;\n  var foo2 = 2;\n  var foo3 = 3;\n  var foo4 = 4;\n  var foo5 = 5;\n  var foo6 = 6;\n  var foo7 = 7;\n  var foo8 = 8;\n  var foo9 = 9;\n  var foo10 = 10;\n  var foo11 = 11;\n}\n```\n\n## Related Rules\n\n* [complexity](complexity.md)\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-lines](max-lines.md)\n* [max-lines-per-function](max-lines-per-function.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n"
	],
	[
		"max-statements-per-line",
		"# enforce a maximum number of statements allowed per line (max-statements-per-line)\n\nA line of code containing too many statements can be difficult to read. Code is generally read from the top down, especially when scanning, so limiting the number of statements allowed on a single line can be very beneficial for readability and maintainability.\n\n```js\nfunction foo () { var bar; if (condition) { bar = 1; } else { bar = 2; } return true; } // too many statements\n```\n\n## Rule Details\n\nThis rule enforces a maximum number of statements allowed per line.\n\n## Options\n\n### max\n\nThe \"max\" object property is optional (default: 1).\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 1 }` option:\n\n```js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 1 }]*/\n\nvar bar; var baz;\nif (condition) { bar = 1; }\nfor (var i = 0; i < length; ++i) { bar = 1; }\nswitch (discriminant) { default: break; }\nfunction foo() { bar = 1; }\nvar foo = function foo() { bar = 1; };\n(function foo() { bar = 1; })();\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 1 }` option:\n\n```js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 1 }]*/\n\nvar bar, baz;\nif (condition) bar = 1;\nfor (var i = 0; i < length; ++i);\nswitch (discriminant) { default: }\nfunction foo() { }\nvar foo = function foo() { };\n(function foo() { })();\n```\n\nExamples of **incorrect** code for this rule with the `{ \"max\": 2 }` option:\n\n```js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 2 }]*/\n\nvar bar; var baz; var qux;\nif (condition) { bar = 1; } else { baz = 2; }\nfor (var i = 0; i < length; ++i) { bar = 1; baz = 2; }\nswitch (discriminant) { case 'test': break; default: break; }\nfunction foo() { bar = 1; baz = 2; }\nvar foo = function foo() { bar = 1; };\n(function foo() { bar = 1; baz = 2; })();\n```\n\nExamples of **correct** code for this rule with the `{ \"max\": 2 }` option:\n\n```js\n/*eslint max-statements-per-line: [\"error\", { \"max\": 2 }]*/\n\nvar bar; var baz;\nif (condition) bar = 1; if (condition) baz = 2;\nfor (var i = 0; i < length; ++i) { bar = 1; }\nswitch (discriminant) { default: break; }\nfunction foo() { bar = 1; }\nvar foo = function foo() { bar = 1; };\n(function foo() { var bar = 1; })();\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the number of statements on each line.\n\n## Related Rules\n\n* [max-depth](max-depth.md)\n* [max-len](max-len.md)\n* [max-lines](max-lines.md)\n* [max-lines-per-function](max-lines-per-function.md)\n* [max-nested-callbacks](max-nested-callbacks.md)\n* [max-params](max-params.md)\n* [max-statements](max-statements.md)\n"
	],
	[
		"multiline-comment-style",
		"# enforce a particular style for multiline comments (multiline-comment-style)\n\nMany style guides require a particular style for comments that span multiple lines. For example, some style guides prefer the use of a single block comment for multiline comments, whereas other style guides prefer consecutive line comments.\n\n## Rule Details\n\nThis rule aims to enforce a particular style for multiline comments.\n\n### Options\n\nThis rule has a string option, which can have one of the following values:\n\n* `\"starred-block\"` (default): Disallows consecutive line comments in favor of block comments. Additionally, requires block comments to have an aligned `*` character before each line.\n* `\"bare-block\"`: Disallows consecutive line comments in favor of block comments, and disallows block comments from having a `\"*\"` character before each line.\n* `\"separate-lines\"`: Disallows block comments in favor of consecutive line comments\n\nThe rule always ignores directive comments such as `/* eslint-disable */`. Additionally, unless the mode is `\"starred-block\"`, the rule ignores JSDoc comments.\n\nExamples of **incorrect** code for this rule with the default `\"starred-block\"` option:\n\n```js\n\n/* eslint multiline-comment-style: [\"error\", \"starred-block\"] */\n\n// this line\n// calls foo()\nfoo();\n\n/* this line\ncalls foo() */\nfoo();\n\n/* this comment\n * is missing a newline after /*\n */\n\n/*\n * this comment\n * is missing a newline at the end */\n\n/*\n* the star in this line should have a space before it\n */\n\n/*\n * the star on the following line should have a space before it\n*/\n\n```\n\nExamples of **correct** code for this rule with the default `\"starred-block\"` option:\n\n```js\n/* eslint multiline-comment-style: [\"error\", \"starred-block\"] */\n\n/*\n * this line\n * calls foo()\n */\nfoo();\n\n// single-line comment\n```\n\nExamples of **incorrect** code for this rule with the `\"bare-block\"` option:\n\n```js\n/* eslint multiline-comment-style: [\"error\", \"bare-block\"] */\n\n// this line\n// calls foo()\nfoo();\n\n/*\n * this line\n * calls foo()\n */\nfoo();\n```\n\nExamples of **correct** code for this rule with the `\"bare-block\"` option:\n\n```js\n/* eslint multiline-comment-style: [\"error\", \"bare-block\"] */\n\n/* this line\n   calls foo() */\nfoo();\n```\n\nExamples of **incorrect** code for this rule with the `\"separate-lines\"` option:\n\n```js\n\n/* eslint multiline-comment-style: [\"error\", \"separate-lines\"] */\n\n/* This line\ncalls foo() */\nfoo();\n\n/*\n * This line\n * calls foo()\n */\nfoo();\n\n```\n\nExamples of **correct** code for this rule with the `\"separate-lines\"` option:\n\n```js\n/* eslint multiline-comment-style: [\"error\", \"separate-lines\"] */\n\n// This line\n// calls foo()\nfoo();\n\n\n```\n\n## When Not To Use It\n\nIf you don't want to enforce a particular style for multiline comments, you can disable the rule.\n"
	],
	[
		"multiline-ternary",
		"# Enforce or disallow newlines between operands of ternary expressions (multiline-ternary)\n\nJavaScript allows operands of ternary expressions to be separated by newlines, which can improve the readability of your program.\n\nFor example:\n\n```js\nvar foo = bar > baz ? value1 : value2;\n```\n\nThe above can be rewritten as the following to improve readability and more clearly delineate the operands:\n\n```js\nvar foo = bar > baz ?\n    value1 :\n    value2;\n```\n\n## Rule Details\n\nThis rule enforces or disallows newlines between operands of a ternary expression.\nNote: The location of the operators is not enforced by this rule. Please see the [operator-linebreak](operator-linebreak.md) rule if you are interested in enforcing the location of the operators themselves.\n\n## Options\n\nThis rule has a string option:\n\n* `\"always\"` (default) enforces newlines between the operands of a ternary expression.\n* `\"always-multiline\"` enforces newlines between the operands of a ternary expression if the expression spans multiple lines.\n* `\"never\"` disallows newlines between the operands of a ternary expression (enforcing that the entire ternary expression is on one line).\n\n### always\n\nThis is the default option.\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint multiline-ternary: [\"error\", \"always\"]*/\n\nfoo > bar ? value1 : value2;\n\nfoo > bar ? value :\n    value2;\n\nfoo > bar ?\n    value : value2;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint multiline-ternary: [\"error\", \"always\"]*/\n\nfoo > bar ?\n    value1 :\n    value2;\n\nfoo > bar ?\n    (baz > qux ?\n        value1 :\n        value2) :\n    value3;\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint multiline-ternary: [\"error\", \"always-multiline\"]*/\n\nfoo > bar ? value1 :\n    value2;\n\nfoo > bar ?\n    value1 : value2;\n\nfoo > bar &&\n    bar > baz ? value1 : value2;\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint multiline-ternary: [\"error\", \"always-multiline\"]*/\n\nfoo > bar ? value1 : value2;\n\nfoo > bar ?\n    value1 :\n    value2;\n\nfoo > bar ?\n    (baz > qux ? value1 : value2) :\n    value3;\n\nfoo > bar ?\n    (baz > qux ?\n        value1 :\n        value2) :\n    value3;\n\nfoo > bar &&\n    bar > baz ?\n        value1 :\n        value2;\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint multiline-ternary: [\"error\", \"never\"]*/\n\nfoo > bar ? value :\n    value2;\n\nfoo > bar ?\n    value : value2;\n\nfoo >\n    bar ?\n    value1 :\n    value2;\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint multiline-ternary: [\"error\", \"never\"]*/\n\nfoo > bar ? value1 : value2;\n\nfoo > bar ? (baz > qux ? value1 : value2) : value3;\n```\n\n## When Not To Use It\n\nYou can safely disable this rule if you do not have any strict conventions about whether the operands of a ternary expression should be separated by newlines.\n\n## Related Rules\n\n* [operator-linebreak](operator-linebreak.md)\n\n## Compatibility\n\n* **JSCS**: [requireMultiLineTernary](https://jscs-dev.github.io/rule/requireMultiLineTernary)\n"
	],
	[
		"new-cap",
		"# require constructor names to begin with a capital letter (new-cap)\n\nThe `new` operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that `new` is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.\n\n```js\nvar friend = new Person();\n```\n\n## Rule Details\n\nThis rule requires constructor names to begin with a capital letter. Certain built-in identifiers are exempt from this rule. These identifiers are:\n\n* `Array`\n* `Boolean`\n* `Date`\n* `Error`\n* `Function`\n* `Number`\n* `Object`\n* `RegExp`\n* `String`\n* `Symbol`\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint new-cap: \"error\"*/\n\nfunction foo(arg) {\n    return Boolean(arg);\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"newIsCap\": true` (default) requires all `new` operators to be called with uppercase-started functions.\n* `\"newIsCap\": false` allows `new` operators to be called with lowercase-started or uppercase-started functions.\n* `\"capIsNew\": true` (default) requires all uppercase-started functions to be called with `new` operators.\n* `\"capIsNew\": false` allows uppercase-started functions to be called without `new` operators.\n* `\"newIsCapExceptions\"` allows specified lowercase-started function names to be called with the `new` operator.\n* `\"newIsCapExceptionPattern\"` allows any lowercase-started function names that match the specified regex pattern to be called with the `new` operator.\n* `\"capIsNewExceptions\"` allows specified uppercase-started function names to be called without the `new` operator.\n* `\"capIsNewExceptionPattern\"` allows any uppercase-started function names that match the specified regex pattern to be called without the `new` operator.\n* `\"properties\": true` (default) enables checks on object properties\n* `\"properties\": false` disables checks on object properties\n\n### newIsCap\n\nExamples of **incorrect** code for this rule with the default `{ \"newIsCap\": true }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"newIsCap\": true }]*/\n\nvar friend = new person();\n```\n\nExamples of **correct** code for this rule with the default `{ \"newIsCap\": true }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"newIsCap\": true }]*/\n\nvar friend = new Person();\n```\n\nExamples of **correct** code for this rule with the `{ \"newIsCap\": false }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"newIsCap\": false }]*/\n\nvar friend = new person();\n```\n\n### capIsNew\n\nExamples of **incorrect** code for this rule with the default `{ \"capIsNew\": true }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"capIsNew\": true }]*/\n\nvar colleague = Person();\n```\n\nExamples of **correct** code for this rule with the default `{ \"capIsNew\": true }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"capIsNew\": true }]*/\n\nvar colleague = new Person();\n```\n\nExamples of **correct** code for this rule with the `{ \"capIsNew\": false }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"capIsNew\": false }]*/\n\nvar colleague = Person();\n```\n\n### newIsCapExceptions\n\nExamples of additional **correct** code for this rule with the `{ \"newIsCapExceptions\": [\"events\"] }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"newIsCapExceptions\": [\"events\"] }]*/\n\nvar events = require('events');\n\nvar emitter = new events();\n```\n\n### newIsCapExceptionPattern\n\nExamples of additional **correct** code for this rule with the `{ \"newIsCapExceptionPattern\": \"^person\\..\" }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"newIsCapExceptionPattern\": \"^person\\..\" }]*/\n\nvar friend = new person.acquaintance();\nvar bestFriend = new person.friend();\n```\n\n### capIsNewExceptions\n\nExamples of additional **correct** code for this rule with the `{ \"capIsNewExceptions\": [\"Person\"] }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"capIsNewExceptions\": [\"Person\"] }]*/\n\nfunction foo(arg) {\n    return Person(arg);\n}\n```\n\n### capIsNewExceptionPattern\n\nExamples of additional **correct** code for this rule with the `{ \"capIsNewExceptionPattern\": \"^Person\\..\" }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"capIsNewExceptionPattern\": \"^Person\\..\" }]*/\n\nvar friend = person.Acquaintance();\nvar bestFriend = person.Friend();\n```\n\n### properties\n\nExamples of **incorrect** code for this rule with the default `{ \"properties\": true }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"properties\": true }]*/\n\nvar friend = new person.acquaintance();\n```\n\nExamples of **correct** code for this rule with the default `{ \"properties\": true }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"properties\": true }]*/\n\nvar friend = new person.Acquaintance();\n```\n\nExamples of **correct** code for this rule with the `{ \"properties\": false }` option:\n\n```js\n/*eslint new-cap: [\"error\", { \"properties\": false }]*/\n\nvar friend = new person.acquaintance();\n```\n\n## When Not To Use It\n\nIf you have conventions that don't require an uppercase letter for constructors, or don't require capitalized functions be only used as constructors, turn this rule off.\n"
	],
	[
		"new-parens",
		"# require parentheses when invoking a constructor with no arguments (new-parens)\n\nJavaScript allows the omission of parentheses when invoking a function via the `new` keyword and the constructor has no arguments. However, some coders believe that omitting the parentheses is inconsistent with the rest of the language and thus makes code less clear.\n\n```js\nvar person = new Person;\n```\n\n## Rule Details\n\nThis rule can enforce or disallow parentheses when invoking a constructor with no arguments using the `new` keyword.\n\n## Options\n\nThis rule takes one option.\n\n- `\"always\"` enforces parenthesis after a new constructor with no arguments (default)\n- `\"never\"` enforces no parenthesis after a new constructor with no arguments\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint new-parens: \"error\"*/\n\nvar person = new Person;\nvar person = new (Person);\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint new-parens: \"error\"*/\n\nvar person = new Person();\nvar person = new (Person)();\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint new-parens: [\"error\", \"never\"]*/\n\nvar person = new Person();\nvar person = new (Person)();\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint new-parens: [\"error\", \"never\"]*/\n\nvar person = new Person;\nvar person = (new Person);\nvar person = new Person(\"Name\");\n```\n"
	],
	[
		"newline-after-var",
		"# require or disallow an empty line after variable declarations (newline-after-var)\n\nThis rule was **deprecated** in ESLint v4.0.0 and replaced by the [padding-line-between-statements](padding-line-between-statements.md) rule.\n\nAs of today there is no consistency in separating variable declarations from the rest of the code. Some developers leave an empty line between var statements and the rest of the code like:\n\n```js\nvar foo;\n\n// do something with foo\n```\n\nWhereas others don't leave any empty newlines at all.\n\n```js\nvar foo;\n// do something with foo\n```\n\nThe problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after `var`, `let`, or `const` statements. It helps the code to look consistent across the entire project.\n\n## Rule Details\n\nThis rule enforces a coding style where empty lines are required or disallowed after `var`, `let`, or `const` statements to achieve a consistent coding style across the project.\n\n## Options\n\nThis rule has a string option:\n\n* `\"always\"` (default) requires an empty line after `var`, `let`, or `const`\n\n  Comments on a line directly after var statements are treated like additional var statements.\n\n* `\"never\"` disallows empty lines after `var`, `let`, or `const`\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint newline-after-var: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar greet = \"hello,\",\n    name = \"world\";\nconsole.log(greet, name);\n\nlet greet = \"hello,\",\n    name = \"world\";\nconsole.log(greet, name);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\nconsole.log(greet, name);\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint newline-after-var: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar greet = \"hello,\",\n    name = \"world\";\n\nconsole.log(greet, name);\n\nlet greet = \"hello,\",\n    name = \"world\";\n\nconsole.log(greet, name);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\n\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\n\nconsole.log(greet, name);\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint newline-after-var: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nvar greet = \"hello,\",\n    name = \"world\";\n\nconsole.log(greet, name);\n\nlet greet = \"hello,\",\n    name = \"world\";\n\nconsole.log(greet, name);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\n\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\n\nconsole.log(greet, name);\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint newline-after-var: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nvar greet = \"hello,\",\n    name = \"world\";\nconsole.log(greet, name);\n\nlet greet = \"hello,\",\n    name = \"world\";\nconsole.log(greet, name);\n\nvar greet = \"hello,\";\nconst NAME = \"world\";\nconsole.log(greet, NAME);\n\nvar greet = \"hello,\";\nvar name = \"world\";\n// var name = require(\"world\");\nconsole.log(greet, name);\n```\n"
	],
	[
		"newline-before-return",
		"# require an empty line before `return` statements (newline-before-return)\n\nThis rule was **deprecated** in ESLint v4.0.0 and replaced by the [padding-line-between-statements](padding-line-between-statements.md) rule.\n\nThere is no hard and fast rule about whether empty lines should precede `return` statements in JavaScript. However, clearly delineating where a function is returning can greatly increase the readability and clarity of the code. For example:\n\n```js\nfunction foo(bar) {\n  var baz = 'baz';\n  if (!bar) {\n    bar = baz;\n    return bar;\n  }\n  return bar;\n}\n```\n\nAdding newlines visibly separates the return statements from the previous lines, making it clear where the function exits and what value it returns:\n\n```js\nfunction foo(bar) {\n  var baz = 'baz';\n\n  if (!bar) {\n    bar = baz;\n\n    return bar;\n  }\n\n  return bar;\n}\n```\n\n## Rule Details\n\nThis rule requires an empty line before `return` statements to increase code clarity, except when the `return` is alone inside a statement group (such as an if statement). In the latter case, the `return` statement does not need to be delineated by virtue of it being alone. Comments are ignored and do not count as empty lines.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint newline-before-return: \"error\"*/\n\nfunction foo(bar) {\n    if (!bar) {\n        return;\n    }\n    return bar;\n}\n\nfunction foo(bar) {\n    if (!bar) {\n        return;\n    }\n    /* multi-line\n    comment */\n    return bar;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint newline-before-return: \"error\"*/\n\nfunction foo() {\n    return;\n}\n\nfunction foo() {\n\n    return;\n}\n\nfunction foo(bar) {\n    if (!bar) return;\n}\n\nfunction foo(bar) {\n    if (!bar) { return };\n}\n\nfunction foo(bar) {\n    if (!bar) {\n        return;\n    }\n}\n\nfunction foo(bar) {\n    if (!bar) {\n        return;\n    }\n\n    return bar;\n}\n\nfunction foo(bar) {\n    if (!bar) {\n\n        return;\n    }\n}\n\nfunction foo() {\n\n    // comment\n    return;\n}\n```\n\n## When Not To Use It\n\nYou can safely disable this rule if you do not have any strict conventions about whitespace before `return` statements.\n\n## Related Rules\n\n* [newline-after-var](newline-after-var.md)\n"
	],
	[
		"newline-per-chained-call",
		"# require a newline after each call in a method chain (newline-per-chained-call)\n\nChained method calls on a single line without line breaks are harder to read, so some developers place a newline character after each method call in the chain to make it more readable and easy to maintain.\n\nLet's look at the following perfectly valid (but single line) code.\n\n```js\nd3.select(\"body\").selectAll(\"p\").data([4, 8, 15, 16, 23, 42 ]).enter().append(\"p\").text(function(d) { return \"I'm number \" + d + \"!\"; });\n```\n\nHowever, with appropriate new lines, it becomes easy to read and understand. Look at the same code written below with line breaks after each call.\n\n```js\nd3\n    .select(\"body\")\n    .selectAll(\"p\")\n    .data([\n        4,\n        8,\n        15,\n        16,\n        23,\n        42\n    ])\n    .enter()\n    .append(\"p\")\n    .text(function (d) {\n        return \"I'm number \" + d + \"!\";\n    });\n```\n\nAnother argument in favor of this style is that it improves the clarity of diffs when something in the method chain is changed:\n\nLess clear:\n\n```diff\n-d3.select(\"body\").selectAll(\"p\").style(\"color\", \"white\");\n+d3.select(\"body\").selectAll(\"p\").style(\"color\", \"blue\");\n```\n\nMore clear:\n\n```diff\nd3\n    .select(\"body\")\n    .selectAll(\"p\")\n-    .style(\"color\", \"white\");\n+    .style(\"color\", \"blue\");\n```\n\n## Rule Details\n\nThis rule requires a newline after each call in a method chain or deep member access. Computed property accesses such as `instance[something]` are excluded.\n\n## Options\n\nThis rule has an object option:\n\n* `\"ignoreChainWithDepth\"` (default: `2`) allows chains up to a specified depth.\n\n### ignoreChainWithDepth\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreChainWithDepth\": 2 }` option:\n\n```js\n/*eslint newline-per-chained-call: [\"error\", { \"ignoreChainWithDepth\": 2 }]*/\n\n_.chain({}).map(foo).filter(bar).value();\n\n// Or\n_.chain({}).map(foo).filter(bar);\n\n// Or\n_\n  .chain({}).map(foo)\n  .filter(bar);\n\n// Or\nobj.method().method2().method3();\n```\n\nExamples of **correct** code for this rule with the default `{ \"ignoreChainWithDepth\": 2 }` option:\n\n```js\n/*eslint newline-per-chained-call: [\"error\", { \"ignoreChainWithDepth\": 2 }]*/\n\n_\n  .chain({})\n  .map(foo)\n  .filter(bar)\n  .value();\n\n// Or\n_\n  .chain({})\n  .map(foo)\n  .filter(bar);\n\n// Or\n_.chain({})\n  .map(foo)\n  .filter(bar);\n\n// Or\nobj\n  .prop\n  .method().prop;\n\n// Or\nobj\n  .prop.method()\n  .method2()\n  .method3().prop;\n```\n\n## When Not To Use It\n\nIf you have conflicting rules or when you are fine with chained calls on one line, you can safely turn this rule off.\n"
	],
	[
		"no-alert",
		"# Disallow Use of Alert (no-alert)\n\nJavaScript's `alert`, `confirm`, and `prompt` functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, `alert` is often used while debugging code, which should be removed before deployment to production.\n\n```js\nalert(\"here!\");\n```\n\n## Rule Details\n\nThis rule is aimed at catching debugging code that should be removed and popup UI elements that should be replaced with less obtrusive, custom UIs. As such, it will warn when it encounters `alert`, `prompt`, and `confirm` function calls which are not shadowed.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-alert: \"error\"*/\n\nalert(\"here!\");\n\nconfirm(\"Are you sure?\");\n\nprompt(\"What's your name?\", \"John Doe\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-alert: \"error\"*/\n\ncustomAlert(\"Something happened!\");\n\ncustomConfirm(\"Are you sure?\");\n\ncustomPrompt(\"Who are you?\");\n\nfunction foo() {\n    var alert = myCustomLib.customAlert;\n    alert();\n}\n```\n\n## Related Rules\n\n* [no-console](no-console.md)\n* [no-debugger](no-debugger.md)\n"
	],
	[
		"no-array-constructor",
		"# disallow `Array` constructors (no-array-constructor)\n\nUse of the `Array` constructor to construct a new array is generally\ndiscouraged in favor of array literal notation because of the single-argument\npitfall and because the `Array` global may be redefined. The exception is when\nthe Array constructor is used to intentionally create sparse arrays of a\nspecified size by giving the constructor a single numeric argument.\n\n## Rule Details\n\nThis rule disallows `Array` constructors.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-array-constructor: \"error\"*/\n\nArray(0, 1, 2)\n```\n\n```js\n/*eslint no-array-constructor: \"error\"*/\n\nnew Array(0, 1, 2)\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-array-constructor: \"error\"*/\n\nArray(500)\n```\n\n```js\n/*eslint no-array-constructor: \"error\"*/\n\nnew Array(someOtherArray.length)\n```\n\n## When Not To Use It\n\nThis rule enforces a nearly universal stylistic concern. That being said, this\nrule may be disabled if the constructor style is preferred.\n\n## Related Rules\n\n* [no-new-object](no-new-object.md)\n* [no-new-wrappers](no-new-wrappers.md)\n"
	],
	[
		"no-async-promise-executor",
		"# disallow using an async function as a Promise executor (no-async-promise-executor)\n\nThe `new Promise` constructor accepts an *executor* function as an argument, which has `resolve` and `reject` parameters that can be used to control the state of the created Promise. For example:\n\n```js\nconst result = new Promise(function executor(resolve, reject) {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n```\n\nThe executor function can also be an `async function`. However, this is usually a mistake, for a few reasons:\n\n* If an async executor function throws an error, the error will be lost and won't cause the newly-constructed `Promise` to reject. This could make it difficult to debug and handle some errors.\n* If a Promise executor function is using `await`, this is usually a sign that it is not actually necessary to use the `new Promise` constructor, or the scope of the `new Promise` constructor can be reduced.\n\n## Rule Details\n\nThis rule aims to disallow async Promise executor functions.\n\nExamples of **incorrect** code for this rule:\n\n```js\nconst foo = new Promise(async (resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = new Promise(async (resolve, reject) => {\n  resolve(await foo);\n});\n```\n\nExamples of **correct** code for this rule:\n\n```js\nconst foo = new Promise((resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = Promise.resolve(foo);\n```\n\n## When Not To Use It\n\nIf your codebase doesn't support async function syntax, there's no need to enable this rule.\n"
	],
	[
		"no-await-in-loop",
		"# Disallow `await` inside of loops (no-await-in-loop)\n\nPerforming an operation on each element of an iterable is a common task. However, performing an\n`await` as part of each operation is an indication that the program is not taking full advantage of\nthe parallelization benefits of `async`/`await`.\n\nUsually, the code should be refactored to create all the promises at once, then get access to the\nresults using `Promise.all()`. Otherwise, each successive operation will not start until the\nprevious one has completed.\n\nConcretely, the following function should be refactored as shown:\n\n```js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Bad: each loop iteration is delayed until the entire asynchronous operation completes\n    results.push(await bar(thing));\n  }\n  return baz(results);\n}\n```\n\n```js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Good: all asynchronous operations are immediately started.\n    results.push(bar(thing));\n  }\n  // Now that all the asynchronous operations are running, here we wait until they all complete.\n  return baz(await Promise.all(results));\n}\n```\n\n## Rule Details\n\nThis rule disallows the use of `await` within loop bodies.\n\n## Examples\n\nExamples of **correct** code for this rule:\n\n```js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Good: all asynchronous operations are immediately started.\n    results.push(bar(thing));\n  }\n  // Now that all the asynchronous operations are running, here we wait until they all complete.\n  return baz(await Promise.all(results));\n}\n```\n\nExamples of **incorrect** code for this rule:\n\n```js\nasync function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Bad: each loop iteration is delayed until the entire asynchronous operation completes\n    results.push(await bar(thing));\n  }\n  return baz(results);\n}\n```\n\n## When Not To Use It\n\nIn many cases the iterations of a loop are not actually independent of each-other. For example, the\noutput of one iteration might be used as the input to another. Or, loops may be used to retry\nasynchronous operations that were unsuccessful. Or, loops may be used to prevent your code from sending\nan excessive amount of requests in parallel. In such cases it makes sense to use `await` within a\nloop and it is recommended to disable the rule via a standard ESLint disable comment.\n"
	],
	[
		"no-bitwise",
		"# disallow bitwise operators (no-bitwise)\n\nThe use of bitwise operators in JavaScript is very rare and often `&` or `|` is simply a mistyped `&&` or `||`, which will lead to unexpected behavior.\n\n```js\nvar x = y | z;\n```\n\n## Rule Details\n\nThis rule disallows bitwise operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-bitwise: \"error\"*/\n\nvar x = y | z;\n\nvar x = y & z;\n\nvar x = y ^ z;\n\nvar x = ~ z;\n\nvar x = y << z;\n\nvar x = y >> z;\n\nvar x = y >>> z;\n\nx |= y;\n\nx &= y;\n\nx ^= y;\n\nx <<= y;\n\nx >>= y;\n\nx >>>= y;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-bitwise: \"error\"*/\n\nvar x = y || z;\n\nvar x = y && z;\n\nvar x = y > z;\n\nvar x = y < z;\n\nx += y;\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"allow\"`: Allows a list of bitwise operators to be used as exceptions.\n* `\"int32Hint\"`: Allows the use of bitwise OR in `|0` pattern for type casting.\n\n### allow\n\nExamples of **correct** code for this rule with the `{ \"allow\": [\"~\"] }` option:\n\n```js\n/*eslint no-bitwise: [\"error\", { \"allow\": [\"~\"] }] */\n\n~[1,2,3].indexOf(1) === -1;\n```\n\n### int32Hint\n\nExamples of **correct** code for this rule with the `{ \"int32Hint\": true }` option:\n\n```js\n/*eslint no-bitwise: [\"error\", { \"int32Hint\": true }] */\n\nvar b = a|0;\n```\n"
	],
	[
		"no-buffer-constructor",
		"# disallow use of the Buffer() constructor (no-buffer-constructor)\n\nIn Node.js, the behavior of the `Buffer` constructor is different depending on the type of its argument. Passing an argument from user input to `Buffer()` without validating its type can lead to security vulnerabilities such as remote memory disclosure and denial of service. As a result, the `Buffer` constructor has been deprecated and should not be used. Use the producer methods `Buffer.from`, `Buffer.alloc`, and `Buffer.allocUnsafe` instead.\n\n## Rule Details\n\nThis rule disallows calling and constructing the `Buffer()` constructor.\n\nExamples of **incorrect** code for this rule:\n\n```js\nnew Buffer(5);\nnew Buffer([1, 2, 3]);\n\nBuffer(5);\nBuffer([1, 2, 3]);\n\nnew Buffer(res.body.amount);\nnew Buffer(res.body.values);\n```\n\nExamples of **correct** code for this rule:\n\n```js\nBuffer.alloc(5);\nBuffer.allocUnsafe(5);\nBuffer.from([1, 2, 3]);\n\nBuffer.alloc(res.body.amount);\nBuffer.from(res.body.values);\n```\n\n## When Not To Use It\n\nIf you don't use Node.js, or you still need to support versions of Node.js that lack methods like `Buffer.from`, then you should not enable this rule.\n\n## Further Reading\n\n* [Buffer API documentation](https://nodejs.org/api/buffer.html)\n* [Let's fix Node.js Buffer API](https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md)\n* [Buffer(number) is unsafe](https://github.com/nodejs/node/issues/4660)\n"
	],
	[
		"no-caller",
		"# Disallow Use of caller/callee (no-caller)\n\nThe use of `arguments.caller` and `arguments.callee` make several code optimizations impossible. They have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.\n\n```js\nfunction foo() {\n    var callee = arguments.callee;\n}\n```\n\n## Rule Details\n\nThis rule is aimed at discouraging the use of deprecated and sub-optimal code by disallowing the use of `arguments.caller` and `arguments.callee`. As such, it will warn when `arguments.caller` and `arguments.callee` are used.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-caller: \"error\"*/\n\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    arguments.callee(n - 1);\n}\n\n[1,2,3,4,5].map(function(n) {\n    return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n});\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-caller: \"error\"*/\n\nfunction foo(n) {\n    if (n <= 0) {\n        return;\n    }\n\n    foo(n - 1);\n}\n\n[1,2,3,4,5].map(function factorial(n) {\n    return !(n > 1) ? 1 : factorial(n - 1) * n;\n});\n```\n"
	],
	[
		"no-case-declarations",
		"# Disallow lexical declarations in case/default clauses (no-case-declarations)\n\nThis rule disallows lexical declarations (`let`, `const`, `function` and `class`)\nin `case`/`default` clauses. The reason is that the lexical declaration is visible\nin the entire switch block but it only gets initialized when it is assigned, which\nwill only happen if the case where it is defined is reached.\n\nTo ensure that the lexical declaration only applies to the current case clause\nwrap your clauses in blocks.\n\n## Rule Details\n\nThis rule aims to prevent access to uninitialized lexical bindings as well as accessing hoisted functions across case clauses.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-case-declarations: \"error\"*/\n/*eslint-env es6*/\n\nswitch (foo) {\n    case 1:\n        let x = 1;\n        break;\n    case 2:\n        const y = 2;\n        break;\n    case 3:\n        function f() {}\n        break;\n    default:\n        class C {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-case-declarations: \"error\"*/\n/*eslint-env es6*/\n\n// Declarations outside switch-statements are valid\nconst a = 0;\n\nswitch (foo) {\n    // The following case clauses are wrapped into blocks using brackets\n    case 1: {\n        let x = 1;\n        break;\n    }\n    case 2: {\n        const y = 2;\n        break;\n    }\n    case 3: {\n        function f() {}\n        break;\n    }\n    case 4:\n        // Declarations using var without brackets are valid due to function-scope hoisting\n        var z = 4;\n        break;\n    default: {\n        class C {}\n    }\n}\n```\n\n## When Not To Use It\n\nIf you depend on fall through behavior and want access to bindings introduced in the case block.\n\n## Related Rules\n\n* [no-fallthrough](no-fallthrough.md)\n"
	],
	[
		"no-catch-shadow",
		"# Disallow Shadowing of Variables Inside of catch (no-catch-shadow)\n\nThis rule was **deprecated** in ESLint v5.1.0.\n\nIn IE 8 and earlier, the catch clause parameter can overwrite the value of a variable in the outer scope, if that variable has the same name as the catch clause parameter.\n\n```js\nvar err = \"x\";\n\ntry {\n    throw \"problem\";\n} catch (err) {\n\n}\n\nconsole.log(err)    // err is 'problem', not 'x'\n```\n\n## Rule Details\n\nThis rule is aimed at preventing unexpected behavior in your program that may arise from a bug in IE 8 and earlier, in which the catch clause parameter can leak into outer scopes. This rule will warn whenever it encounters a catch clause parameter that has the same name as a variable in an outer scope.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-catch-shadow: \"error\"*/\n\nvar err = \"x\";\n\ntry {\n    throw \"problem\";\n} catch (err) {\n\n}\n\nfunction err() {\n    // ...\n};\n\ntry {\n    throw \"problem\";\n} catch (err) {\n\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-catch-shadow: \"error\"*/\n\nvar err = \"x\";\n\ntry {\n    throw \"problem\";\n} catch (e) {\n\n}\n\nfunction err() {\n    // ...\n};\n\ntry {\n    throw \"problem\";\n} catch (e) {\n\n}\n```\n\n## When Not To Use It\n\nIf you do not need to support IE 8 and earlier, you should turn this rule off.\n"
	],
	[
		"no-class-assign",
		"# Disallow modifying variables of class declarations (no-class-assign)\n\n`ClassDeclaration` creates a variable, and we can modify the variable.\n\n```js\n/*eslint-env es6*/\n\nclass A { }\nA = 0;\n```\n\nBut the modification is a mistake in most cases.\n\n## Rule Details\n\nThis rule is aimed to flag modifying variables of class declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nclass A { }\nA = 0;\n```\n\n```js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nA = 0;\nclass A { }\n```\n\n```js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    b() {\n        A = 0;\n    }\n}\n```\n\n```js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nlet A = class A {\n    b() {\n        A = 0;\n        // `let A` is shadowed by the class name.\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nlet A = class A { }\nA = 0; // A is a variable.\n```\n\n```js\n/*eslint no-class-assign: \"error\"*/\n/*eslint-env es6*/\n\nlet A = class {\n    b() {\n        A = 0; // A is a variable.\n    }\n}\n```\n\n```js\n/*eslint no-class-assign: 2*/\n/*eslint-env es6*/\n\nclass A {\n    b(A) {\n        A = 0; // A is a parameter.\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about modifying variables of class declarations, you can safely disable this rule.\n"
	],
	[
		"no-compare-neg-zero",
		"# disallow comparing against -0 (no-compare-neg-zero)\n\n## Rule Details\n\nThe rule should warn against code that tries to compare against -0, since that will not work as intended. That is, code like x === -0 will pass for both +0 and -0. The author probably intended Object.is(x, -0).\n\nExamples of **incorrect** code for this rule:\n\n```js\n\nif (x === -0) {\n    // doSomething()...\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n\nif (x === 0) {\n    // doSomething()...\n}\n```\n\n```js\n\nif (Object.is(x, -0)) {\n    // doSomething()...\n}\n```\n\n\n"
	],
	[
		"no-cond-assign",
		"# disallow assignment operators in conditional statements (no-cond-assign)\n\nIn conditional statements, it is very easy to mistype a comparison operator (such as `==`) as an assignment operator (such as `=`). For example:\n\n```js\n// Check the user's job title\nif (user.jobTitle = \"manager\") {\n    // user.jobTitle is now incorrect\n}\n```\n\nThere are valid reasons to use assignment operators in conditional statements. However, it can be difficult to tell whether a specific assignment was intentional.\n\n## Rule Details\n\nThis rule disallows ambiguous assignment operators in test conditions of `if`, `for`, `while`, and `do...while` statements.\n\n## Options\n\nThis rule has a string option:\n\n* `\"except-parens\"` (default) allows assignments in test conditions *only if* they are enclosed in parentheses (for example, to allow reassigning a variable in the test of a `while` or `do...while` loop)\n* `\"always\"` disallows all assignments in test conditions\n\n### except-parens\n\nExamples of **incorrect** code for this rule with the default `\"except-parens\"` option:\n\n```js\n/*eslint no-cond-assign: \"error\"*/\n\n// Unintentional assignment\nvar x;\nif (x = 0) {\n    var b = 1;\n}\n\n// Practical example that is similar to an error\nfunction setHeight(someNode) {\n    \"use strict\";\n    do {\n        someNode.height = \"100px\";\n    } while (someNode = someNode.parentNode);\n}\n```\n\nExamples of **correct** code for this rule with the default `\"except-parens\"` option:\n\n```js\n/*eslint no-cond-assign: \"error\"*/\n\n// Assignment replaced by comparison\nvar x;\nif (x === 0) {\n    var b = 1;\n}\n\n// Practical example that wraps the assignment in parentheses\nfunction setHeight(someNode) {\n    \"use strict\";\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode));\n}\n\n// Practical example that wraps the assignment and tests for 'null'\nfunction setHeight(someNode) {\n    \"use strict\";\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode) !== null);\n}\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint no-cond-assign: [\"error\", \"always\"]*/\n\n// Unintentional assignment\nvar x;\nif (x = 0) {\n    var b = 1;\n}\n\n// Practical example that is similar to an error\nfunction setHeight(someNode) {\n    \"use strict\";\n    do {\n        someNode.height = \"100px\";\n    } while (someNode = someNode.parentNode);\n}\n\n// Practical example that wraps the assignment in parentheses\nfunction setHeight(someNode) {\n    \"use strict\";\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode));\n}\n\n// Practical example that wraps the assignment and tests for 'null'\nfunction setHeight(someNode) {\n    \"use strict\";\n    do {\n        someNode.height = \"100px\";\n    } while ((someNode = someNode.parentNode) !== null);\n}\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint no-cond-assign: [\"error\", \"always\"]*/\n\n// Assignment replaced by comparison\nvar x;\nif (x === 0) {\n    var b = 1;\n}\n```\n\n## Related Rules\n\n* [no-extra-parens](no-extra-parens.md)\n"
	],
	[
		"no-confusing-arrow",
		"# Disallow arrow functions where they could be confused with comparisons (no-confusing-arrow)\n\nArrow functions (`=>`) are similar in syntax to some comparison operators (`>`, `<`, `<=`, and `>=`). This rule warns against using the arrow function syntax in places where it could be confused with a comparison operator.\n\nHere's an example where the usage of `=>` could be confusing:\n\n```js\n// The intent is not clear\nvar x = a => 1 ? 2 : 3;\n// Did the author mean this\nvar x = function (a) { return 1 ? 2 : 3 };\n// Or this\nvar x = a <= 1 ? 2 : 3;\n```\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-confusing-arrow: \"error\"*/\n/*eslint-env es6*/\n\nvar x = a => 1 ? 2 : 3;\nvar x = (a) => 1 ? 2 : 3;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-confusing-arrow: \"error\"*/\n/*eslint-env es6*/\n\nvar x = a => (1 ? 2 : 3);\nvar x = (a) => (1 ? 2 : 3);\nvar x = a => { return 1 ? 2 : 3; };\nvar x = (a) => { return 1 ? 2 : 3; };\n```\n\n## Options\n\nThis rule accepts a single options argument with the following defaults:\n\n```json\n{\n    \"rules\": {\n        \"no-confusing-arrow\": [\"error\", {\"allowParens\": true}]\n    }\n}\n```\n\n`allowParens` is a boolean setting that can be `true`(default) or `false`:\n\n1. `true` relaxes the rule and accepts parenthesis as a valid \"confusion-preventing\" syntax.\n2. `false` warns even if the expression is wrapped in parenthesis\n\nExamples of **incorrect** code for this rule with the `{\"allowParens\": false}` option:\n\n```js\n/*eslint no-confusing-arrow: [\"error\", {\"allowParens\": false}]*/\n/*eslint-env es6*/\nvar x = a => (1 ? 2 : 3);\nvar x = (a) => (1 ? 2 : 3);\n```\n\n## Related Rules\n\n* [no-constant-condition](no-constant-condition.md)\n* [arrow-parens](arrow-parens.md)\n"
	],
	[
		"no-console",
		"# disallow the use of `console` (no-console)\n\nIn JavaScript that is designed to be executed in the browser, it's considered a best practice to avoid using methods on `console`. Such messages are considered to be for debugging purposes and therefore not suitable to ship to the client. In general, calls using `console` should be stripped before being pushed to production.\n\n```js\nconsole.log(\"Made it here.\");\nconsole.error(\"That shouldn't have happened.\");\n```\n\n## Rule Details\n\nThis rule disallows calls to methods of the `console` object.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-console: \"error\"*/\n\nconsole.log(\"Log a debug level message.\");\nconsole.warn(\"Log a warn level message.\");\nconsole.error(\"Log an error level message.\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-console: \"error\"*/\n\n// custom console\nConsole.log(\"Hello world!\");\n```\n\n## Options\n\nThis rule has an object option for exceptions:\n\n* `\"allow\"` has an array of strings which are allowed methods of the `console` object\n\nExamples of additional **correct** code for this rule with a sample `{ \"allow\": [\"warn\", \"error\"] }` option:\n\n```js\n/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n\nconsole.warn(\"Log a warn level message.\");\nconsole.error(\"Log an error level message.\");\n```\n\n## When Not To Use It\n\nIf you're using Node.js, however, `console` is used to output information to the user and so is not strictly used for debugging purposes. If you are developing for Node.js then you most likely do not want this rule enabled.\n\nAnother case where you might not use this rule is if you want to enforce console calls and not console overwrites. For example:\n\n```js\n/*eslint no-console: [\"error\", { allow: [\"warn\"] }] */\nconsole.error = function (message) {\n  throw new Error(message);\n};\n```\n\nWith the `no-console` rule in the above example, ESLint will report an error. For the above example, you can disable the rule:\n\n```js\n// eslint-disable-next-line no-console\nconsole.error = function (message) {\n  throw new Error(message);\n};\n\n// or\n\nconsole.error = function (message) {  // eslint-disable-line no-console\n  throw new Error(message);\n};\n```\n\nHowever, you might not want to manually add `eslint-disable-next-line` or `eslint-disable-line`. You can achieve the effect of only receiving errors for console calls with the `no-restricted-syntax` rule:\n\n```json\n{\n    \"rules\": {\n        \"no-console\": \"off\",\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"CallExpression[callee.object.name='console'][callee.property.name!=/^(log|warn|error|info|trace)$/]\",\n                \"message\": \"Unexpected property on console object was called\"\n            }\n        ]\n    }\n}\n```\n\n## Related Rules\n\n* [no-alert](no-alert.md)\n* [no-debugger](no-debugger.md)\n"
	],
	[
		"no-const-assign",
		"# Disallow modifying variables that are declared using `const` (no-const-assign)\n\nWe cannot modify variables that are declared using `const` keyword.\nIt will raise a runtime error.\n\nUnder non ES2015 environment, it might be ignored merely.\n\n## Rule Details\n\nThis rule is aimed to flag modifying variables that are declared using `const` keyword.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\na = 1;\n```\n\n```js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\na += 1;\n```\n\n```js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\n++a;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nconst a = 0;\nconsole.log(a);\n```\n\n```js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nfor (const a in [1, 2, 3]) { // `a` is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n```\n\n```js\n/*eslint no-const-assign: \"error\"*/\n/*eslint-env es6*/\n\nfor (const a of [1, 2, 3]) { // `a` is re-defined (not modified) on each loop step.\n    console.log(a);\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about modifying variables that are declared using `const` keyword, you can safely disable this rule.\n"
	],
	[
		"no-constant-condition",
		"# disallow constant expressions in conditions (no-constant-condition)\n\nA constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior. For example, the following code looks as if it is not ready for production.\n\n```js\nif (false) {\n    doSomethingUnfinished();\n}\n```\n\n## Rule Details\n\nThis rule disallows constant expressions in the test condition of:\n\n* `if`, `for`, `while`, or `do...while` statement\n* `?:` ternary expression\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-constant-condition: \"error\"*/\n\nif (false) {\n    doSomethingUnfinished();\n}\n\nif (void x) {\n    doSomethingUnfinished();\n}\n\nfor (;-2;) {\n    doSomethingForever();\n}\n\nwhile (typeof x) {\n    doSomethingForever();\n}\n\ndo {\n    doSomethingForever();\n} while (x = -1);\n\nvar result = 0 ? a : b;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-constant-condition: \"error\"*/\n\nif (x === 0) {\n    doSomething();\n}\n\nfor (;;) {\n    doSomethingForever();\n}\n\nwhile (typeof x === \"undefined\") {\n    doSomething();\n}\n\ndo {\n    doSomething();\n} while (x);\n\nvar result = x !== 0 ? a : b;\n```\n\n## Options\n\n### checkLoops\n\nSet to `true` by default. Setting this option to `false` allows constant expressions in loops.\n\nExamples of **correct** code for when `checkLoops` is `false`:\n\n```js\n/*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\nwhile (true) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\nfor (;true;) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\ndo {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n} while (true)\n```\n"
	],
	[
		"no-continue",
		"# disallow `continue` statements (no-continue)\n\nThe `continue` statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as `if` should be used instead.\n\n```js\nvar sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue;\n    }\n\n    a += i;\n}\n```\n\n## Rule Details\n\nThis rule disallows `continue` statements.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-continue: \"error\"*/\n\nvar sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue;\n    }\n\n    a += i;\n}\n```\n\n```js\n/*eslint no-continue: \"error\"*/\n\nvar sum = 0,\n    i;\n\nlabeledLoop: for(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue labeledLoop;\n    }\n\n    a += i;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-continue: \"error\"*/\n\nvar sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i < 5) {\n       a += i;\n    }\n}\n```\n\n## Compatibility\n\n* **JSLint**: `continue`\n"
	],
	[
		"no-control-regex",
		"# disallow control characters in regular expressions (no-control-regex)\n\nControl characters are special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings so a regular expression containing these characters is most likely a mistake.\n\n## Rule Details\n\nThis rule disallows control characters in regular expressions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-control-regex: \"error\"*/\n\nvar pattern1 = /\\x1f/;\nvar pattern2 = new RegExp(\"\\x1f\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-control-regex: \"error\"*/\n\nvar pattern1 = /\\x20/;\nvar pattern2 = new RegExp(\"\\x20\");\n```\n\n## When Not To Use It\n\nIf you need to use control character pattern matching, then you should turn this rule off.\n\n## Related Rules\n\n* [no-div-regex](no-div-regex.md)\n* [no-regex-spaces](no-regex-spaces.md)\n"
	],
	[
		"no-debugger",
		"# disallow the use of `debugger` (no-debugger)\n\nThe `debugger` statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain `debugger`, as it will cause the browser to stop executing code and open an appropriate debugger.\n\n## Rule Details\n\nThis rule disallows `debugger` statements.\n\nExample of **incorrect** code for this rule:\n\n```js\n/*eslint no-debugger: \"error\"*/\n\nfunction isTruthy(x) {\n    debugger;\n    return Boolean(x);\n}\n```\n\nExample of **correct** code for this rule:\n\n```js\n/*eslint no-debugger: \"error\"*/\n\nfunction isTruthy(x) {\n    return Boolean(x); // set a breakpoint at this line\n}\n```\n\n## When Not To Use It\n\nIf your code is still very much in development and don't want to worry about stripping `debugger` statements, then turn this rule off. You'll generally want to turn it back on when testing code prior to deployment.\n\n## Further Reading\n\n* [Debugger](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger)\n\n## Related Rules\n\n* [no-alert](no-alert.md)\n* [no-console](no-console.md)\n"
	],
	[
		"no-delete-var",
		"# disallow deleting variables (no-delete-var)\n\nThe purpose of the `delete` operator is to remove a property from an object. Using the `delete` operator on a variable might lead to unexpected behavior.\n\n## Rule Details\n\nThis rule disallows the use of the `delete` operator on variables.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-delete-var: \"error\"*/\n\nvar x;\ndelete x;\n```\n"
	],
	[
		"no-div-regex",
		"# Disallow Regular Expressions That Look Like Division (no-div-regex)\n\nRequire regex literals to escape division operators.\n\n```js\nfunction bar() { return /=foo/; }\n```\n\n## Rule Details\n\nThis is used to disambiguate the division operator to not confuse users.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-div-regex: \"error\"*/\n\nfunction bar() { return /=foo/; }\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-div-regex: \"error\"*/\n\nfunction bar() { return /[=]foo/; }\n```\n\n## Related Rules\n\n* [no-control-regex](no-control-regex.md)\n* [no-regex-spaces](no-regex-spaces.md)\n"
	],
	[
		"no-dupe-args",
		"# disallow duplicate arguments in `function` definitions (no-dupe-args)\n\nIf more than one parameter has the same name in a function definition, the last occurrence \"shadows\" the preceding occurrences. A duplicated name might be a typing error.\n\n## Rule Details\n\nThis rule disallows duplicate parameter names in function declarations or expressions. It does not apply to arrow functions or class methods, because the parser reports the error.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-dupe-args: \"error\"*/\n\nfunction foo(a, b, a) {\n    console.log(\"value of the second a:\", a);\n}\n\nvar bar = function (a, b, a) {\n    console.log(\"value of the second a:\", a);\n};\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-dupe-args: \"error\"*/\n\nfunction foo(a, b, c) {\n    console.log(a, b, c);\n}\n\nvar bar = function (a, b, c) {\n    console.log(a, b, c);\n};\n```\n"
	],
	[
		"no-dupe-class-members",
		"# Disallow duplicate name in class members (no-dupe-class-members)\n\nIf there are declarations of the same name in class members, the last declaration overwrites other declarations silently.\nIt can cause unexpected behaviors.\n\n```js\n/*eslint-env es6*/\n\nclass Foo {\n  bar() { console.log(\"hello\"); }\n  bar() { console.log(\"goodbye\"); }\n}\n\nvar foo = new Foo();\nfoo.bar(); // goodbye\n```\n\n## Rule Details\n\nThis rule is aimed to flag the use of duplicate names in class members.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-dupe-class-members: \"error\"*/\n/*eslint-env es6*/\n\nclass Foo {\n  bar() { }\n  bar() { }\n}\n\nclass Foo {\n  bar() { }\n  get bar() { }\n}\n\nclass Foo {\n  static bar() { }\n  static bar() { }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-dupe-class-members: \"error\"*/\n/*eslint-env es6*/\n\nclass Foo {\n  bar() { }\n  qux() { }\n}\n\nclass Foo {\n  get bar() { }\n  set bar(value) { }\n}\n\nclass Foo {\n  static bar() { }\n  bar() { }\n}\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don't want to be notified about duplicate names in class members, you can safely disable this rule.\n"
	],
	[
		"no-dupe-keys",
		"# disallow duplicate keys in object literals (no-dupe-keys)\n\nMultiple properties with the same key in object literals can cause unexpected behavior in your application.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n```\n\n## Rule Details\n\nThis rule disallows duplicate keys in object literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-dupe-keys: \"error\"*/\n\nvar foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n\nvar foo = {\n    \"bar\": \"baz\",\n    bar: \"qux\"\n};\n\nvar foo = {\n    0x1: \"baz\",\n    1: \"qux\"\n};\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-dupe-keys: \"error\"*/\n\nvar foo = {\n    bar: \"baz\",\n    quxx: \"qux\"\n};\n```\n"
	],
	[
		"no-duplicate-case",
		"# Rule to disallow a duplicate case label (no-duplicate-case)\n\nIf a `switch` statement has duplicate test expressions in `case` clauses, it is likely that a programmer copied a `case` clause but forgot to change the test expression.\n\n## Rule Details\n\nThis rule disallows duplicate test expressions in `case` clauses of `switch` statements.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-duplicate-case: \"error\"*/\n\nvar a = 1,\n    one = 1;\n\nswitch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 1:         // duplicate test expression\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case one:         // duplicate test expression\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case \"1\":\n        break;\n    case \"2\":\n        break;\n    case \"1\":         // duplicate test expression\n        break;\n    default:\n        break;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-duplicate-case: \"error\"*/\n\nvar a = 1,\n    one = 1;\n\nswitch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case \"1\":\n        break;\n    case \"2\":\n        break;\n    case \"3\":\n        break;\n    default:\n        break;\n}\n```\n"
	],
	[
		"no-duplicate-imports",
		"# Disallow duplicate imports (no-duplicate-imports)\n\nUsing a single `import` statement per module will make the code clearer because you can see everything being imported from that module on one line.\n\nIn the following example the `module` import on line 1 is repeated on line 3. These can be combined to make the list of imports more succinct.\n\n```js\nimport { merge } from 'module';\nimport something from 'another-module';\nimport { find } from 'module';\n```\n\n## Rule Details\n\nThis rule requires that all imports from a single module exists in a single `import` statement.\n\nExample of **incorrect** code for this rule:\n\n```js\n/*eslint no-duplicate-imports: \"error\"*/\n\nimport { merge } from 'module';\nimport something from 'another-module';\nimport { find } from 'module';\n```\n\nExample of **correct** code for this rule:\n\n```js\n/*eslint no-duplicate-imports: \"error\"*/\n\nimport { merge, find } from 'module';\nimport something from 'another-module';\n```\n\n## Options\n\nThis rule takes one optional argument, an object with a single key, `includeExports` which is a `boolean`. It defaults to `false`.\n\nIf re-exporting from an imported module, you should add the imports to the `import`-statement, and export that directly, not use `export ... from`.\n\nExample of **incorrect** code for this rule with the `{ \"includeExports\": true }` option:\n\n```js\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge } from 'module';\n\nexport { find } from 'module';\n```\n\nExample of **correct** code for this rule with the `{ \"includeExports\": true }` option:\n\n```js\n/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge, find } from 'module';\n\nexport { find };\n```\n"
	],
	[
		"no-else-return",
		"# Disallow return before else (no-else-return)\n\nIf an `if` block contains a `return` statement, the `else` block becomes unnecessary. Its contents can be placed outside of the block.\n\n```js\nfunction foo() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}\n```\n\n## Rule Details\n\nThis rule is aimed at highlighting an unnecessary block of code following an `if` containing a return statement. As such, it will warn when it encounters an `else` following a chain of `if`s, all of them containing a `return` statement.\n\n## Options\n\nThis rule has an object option:\n\n* `allowElseIf: true` (default) allows `else if` blocks after a return\n* `allowElseIf: false` disallows `else if` blocks after a return\n\n### `allowElseIf: true`\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-else-return: \"error\"*/\n\nfunction foo() {\n    if (x) {\n        return y;\n    } else {\n        return z;\n    }\n}\n\nfunction foo() {\n    if (x) {\n        return y;\n    } else if (z) {\n        return w;\n    } else {\n        return t;\n    }\n}\n\nfunction foo() {\n    if (x) {\n        return y;\n    } else {\n        var t = \"foo\";\n    }\n\n    return t;\n}\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    } else {\n        if (loading) {\n            return \"It's still loading\";\n        }\n    }\n}\n\n// Two warnings for nested occurrences\nfunction foo() {\n    if (x) {\n        if (y) {\n            return y;\n        } else {\n            return x;\n        }\n    } else {\n        return z;\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-else-return: \"error\"*/\n\nfunction foo() {\n    if (x) {\n        return y;\n    }\n\n    return z;\n}\n\nfunction foo() {\n    if (x) {\n        return y;\n    } else if (z) {\n        var t = \"foo\";\n    } else {\n        return w;\n    }\n}\n\nfunction foo() {\n    if (x) {\n        if (z) {\n            return y;\n        }\n    } else {\n        return z;\n    }\n}\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    } else if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\n### `allowElseIf: false`\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-else-return: [\"error\", {allowElseIf: false}]*/\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    } else if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-else-return: [\"error\", {allowElseIf: false}]*/\n\nfunction foo() {\n    if (error) {\n        return 'It failed';\n    }\n\n    if (loading) {\n        return \"It's still loading\";\n    }\n}\n```\n"
	],
	[
		"no-empty",
		"# disallow empty block statements (no-empty)\n\nEmpty block statements, while not technically errors, usually occur due to refactoring that wasn't completed. They can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty `catch` or `finally` block of a `try` statement to indicate that execution should continue regardless of errors).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n}\n\nwhile (foo) {\n}\n\nswitch(foo) {\n}\n\ntry {\n    doSomething();\n} catch(ex) {\n\n} finally {\n\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-empty: \"error\"*/\n\nif (foo) {\n    // empty\n}\n\nwhile (foo) {\n    /* empty */\n}\n\ntry {\n    doSomething();\n} catch (ex) {\n    // continue regardless of error\n}\n\ntry {\n    doSomething();\n} finally {\n    /* continue regardless of error */\n}\n```\n\n## Options\n\nThis rule has an object option for exceptions:\n\n* `\"allowEmptyCatch\": true` allows empty `catch` clauses (that is, which do not contain a comment)\n\n### allowEmptyCatch\n\nExamples of additional **correct** code for this rule with the `{ \"allowEmptyCatch\": true }` option:\n\n```js\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\ntry {\n    doSomething();\n} catch (ex) {}\n\ntry {\n    doSomething();\n}\ncatch (ex) {}\nfinally {\n    /* continue regardless of error */\n}\n```\n\n## When Not To Use It\n\nIf you intentionally use empty block statements then you can disable this rule.\n\n## Related Rules\n\n* [no-empty-function](./no-empty-function.md)\n"
	],
	[
		"no-empty-character-class",
		"# disallow empty character classes in regular expressions (no-empty-character-class)\n\nBecause empty character classes in regular expressions do not match anything, they might be typing mistakes.\n\n```js\nvar foo = /^abc[]/;\n```\n\n## Rule Details\n\nThis rule disallows empty character classes in regular expressions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-empty-character-class: \"error\"*/\n\n/^abc[]/.test(\"abcdefg\"); // false\n\"abcdefg\".match(/^abc[]/); // null\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-empty-character-class: \"error\"*/\n\n/^abc/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc/); // [\"abc\"]\n\n/^abc[a-z]/.test(\"abcdefg\"); // true\n\"abcdefg\".match(/^abc[a-z]/); // [\"abcd\"]\n```\n\n## Known Limitations\n\nThis rule does not report empty character classes in the string argument of calls to the `RegExp` constructor.\n\nExample of a *false negative* when this rule reports correct code:\n\n```js\n/*eslint no-empty-character-class: \"error\"*/\n\nvar abcNeverMatches = new RegExp(\"^abc[]\");\n```\n"
	],
	[
		"no-empty-function",
		"# Disallow empty functions (no-empty-function)\n\nEmpty functions can reduce readability because readers need to guess whether it's intentional or not.\nSo writing a clear comment for empty functions is a good practice.\n\n```js\nfunction foo() {\n    // do nothing.\n}\n```\n\nEspecially, the empty block of arrow functions might be confusing developers.\nIt's very similar to an empty object literal.\n\n```js\nlist.map(() => {});   // This is a block, would return undefined.\nlist.map(() => ({})); // This is an empty object.\n```\n\n## Rule Details\n\nThis rule is aimed at eliminating empty functions.\nA function will not be considered a problem if it contains a comment.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-empty-function: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo() {}\n\nvar foo = function() {};\n\nvar foo = () => {};\n\nfunction* foo() {}\n\nvar foo = function*() {};\n\nvar obj = {\n    foo: function() {},\n\n    foo: function*() {},\n\n    foo() {},\n\n    *foo() {},\n\n    get foo() {},\n\n    set foo(value) {}\n};\n\nclass A {\n    constructor() {}\n\n    foo() {}\n\n    *foo() {}\n\n    get foo() {}\n\n    set foo(value) {}\n\n    static foo() {}\n\n    static *foo() {}\n\n    static get foo() {}\n\n    static set foo(value) {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-empty-function: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // do nothing.\n}\n\nvar foo = function() {\n    // any clear comments.\n};\n\nvar foo = () => {\n    bar();\n};\n\nfunction* foo() {\n    // do nothing.\n}\n\nvar foo = function*() {\n    // do nothing.\n};\n\nvar obj = {\n    foo: function() {\n        // do nothing.\n    },\n\n    foo: function*() {\n        // do nothing.\n    },\n\n    foo() {\n        // do nothing.\n    },\n\n    *foo() {\n        // do nothing.\n    },\n\n    get foo() {\n        // do nothing.\n    },\n\n    set foo(value) {\n        // do nothing.\n    }\n};\n\nclass A {\n    constructor() {\n        // do nothing.\n    }\n\n    foo() {\n        // do nothing.\n    }\n\n    *foo() {\n        // do nothing.\n    }\n\n    get foo() {\n        // do nothing.\n    }\n\n    set foo(value) {\n        // do nothing.\n    }\n\n    static foo() {\n        // do nothing.\n    }\n\n    static *foo() {\n        // do nothing.\n    }\n\n    static get foo() {\n        // do nothing.\n    }\n\n    static set foo(value) {\n        // do nothing.\n    }\n}\n```\n\n## Options\n\nThis rule has an option to allow specific kinds of functions to be empty.\n\n* `allow` (`string[]`) - A list of kind to allow empty functions. List items are some of the following strings. An empty array (`[]`) by default.\n    * `\"functions\"` - Normal functions.\n    * `\"arrowFunctions\"` - Arrow functions.\n    * `\"generatorFunctions\"` - Generator functions.\n    * `\"methods\"` - Class methods and method shorthands of object literals.\n    * `\"generatorMethods\"` - Class methods and method shorthands of object literals with generator.\n    * `\"getters\"` - Getters.\n    * `\"setters\"` - Setters.\n    * `\"constructors\"` - Class constructors.\n\n#### allow: functions\n\nExamples of **correct** code for the `{ \"allow\": [\"functions\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"functions\"] }]*/\n\nfunction foo() {}\n\nvar foo = function() {};\n\nvar obj = {\n    foo: function() {}\n};\n```\n\n#### allow: arrowFunctions\n\nExamples of **correct** code for the `{ \"allow\": [\"arrowFunctions\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"arrowFunctions\"] }]*/\n/*eslint-env es6*/\n\nvar foo = () => {};\n```\n\n#### allow: generatorFunctions\n\nExamples of **correct** code for the `{ \"allow\": [\"generatorFunctions\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"generatorFunctions\"] }]*/\n/*eslint-env es6*/\n\nfunction* foo() {}\n\nvar foo = function*() {};\n\nvar obj = {\n    foo: function*() {}\n};\n```\n\n#### allow: methods\n\nExamples of **correct** code for the `{ \"allow\": [\"methods\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"methods\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    foo() {}\n};\n\nclass A {\n    foo() {}\n    static foo() {}\n}\n```\n\n#### allow: generatorMethods\n\nExamples of **correct** code for the `{ \"allow\": [\"generatorMethods\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"generatorMethods\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    *foo() {}\n};\n\nclass A {\n    *foo() {}\n    static *foo() {}\n}\n```\n\n#### allow: getters\n\nExamples of **correct** code for the `{ \"allow\": [\"getters\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"getters\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    get foo() {}\n};\n\nclass A {\n    get foo() {}\n    static get foo() {}\n}\n```\n\n#### allow: setters\n\nExamples of **correct** code for the `{ \"allow\": [\"setters\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"setters\"] }]*/\n/*eslint-env es6*/\n\nvar obj = {\n    set foo(value) {}\n};\n\nclass A {\n    set foo(value) {}\n    static set foo(value) {}\n}\n```\n\n#### allow: constructors\n\nExamples of **correct** code for the `{ \"allow\": [\"constructors\"] }` option:\n\n```js\n/*eslint no-empty-function: [\"error\", { \"allow\": [\"constructors\"] }]*/\n/*eslint-env es6*/\n\nclass A {\n    constructor() {}\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about empty functions, then it's safe to disable this rule.\n\n## Related Rules\n\n* [no-empty](./no-empty.md)\n"
	],
	[
		"no-empty-pattern",
		"# Disallow empty destructuring patterns (no-empty-pattern)\n\nWhen using destructuring, it's possible to create a pattern that has no effect. This happens when empty curly braces are used to the right of an embedded object destructuring pattern, such as:\n\n```js\n// doesn't create any variables\nvar {a: {}} = foo;\n```\n\nIn this code, no new variables are created because `a` is just a location helper while the `{}` is expected to contain the variables to create, such as:\n\n```js\n// creates variable b\nvar {a: { b }} = foo;\n```\n\nIn many cases, the empty object pattern is a mistake where the author intended to use a default value instead, such as:\n\n```js\n// creates variable a\nvar {a = {}} = foo;\n```\n\nThe difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.\n\n## Rule Details\n\nThis rule aims to flag any empty patterns in destructured objects and arrays, and as such, will report a problem whenever one is encountered.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-empty-pattern: \"error\"*/\n\nvar {} = foo;\nvar [] = foo;\nvar {a: {}} = foo;\nvar {a: []} = foo;\nfunction foo({}) {}\nfunction foo([]) {}\nfunction foo({a: {}}) {}\nfunction foo({a: []}) {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-empty-pattern: \"error\"*/\n\nvar {a = {}} = foo;\nvar {a = []} = foo;\nfunction foo({a = {}}) {}\nfunction foo({a = []}) {}\n```\n"
	],
	[
		"no-eq-null",
		"# Disallow Null Comparisons (no-eq-null)\n\nComparing to `null` without a type-checking operator (`==` or `!=`), can have unintended results as the comparison will evaluate to true when comparing to not just a `null`, but also an `undefined` value.\n\n```js\nif (foo == null) {\n  bar();\n}\n```\n\n## Rule Details\n\nThe `no-eq-null` rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to `null` only match `null`, and not also `undefined`. As such it will flag comparisons to null when using `==` and `!=`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo == null) {\n  bar();\n}\n\nwhile (qux != null) {\n  baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eq-null: \"error\"*/\n\nif (foo === null) {\n  bar();\n}\n\nwhile (qux !== null) {\n  baz();\n}\n```\n"
	],
	[
		"no-eval",
		"# Disallow eval() (no-eval)\n\nJavaScript's `eval()` function is potentially dangerous and is often misused. Using `eval()` on untrusted code can open a program up to several different injection attacks. The use of `eval()` in most contexts can be substituted for a better, alternative approach to a problem.\n\n```js\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n```\n\n## Rule Details\n\nThis rule is aimed at preventing potentially dangerous, unnecessary, and slow code by disallowing the use of the `eval()` function. As such, it will warn whenever the `eval()` function is used.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-eval: \"error\"*/\n\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n\n(0, eval)(\"var a = 0\");\n\nvar foo = eval;\nfoo(\"var a = 0\");\n\n// This `this` is the global object.\nthis.eval(\"var a = 0\");\n```\n\nExample of additional **incorrect** code for this rule when `browser` environment is set to `true`:\n\n```js\n/*eslint no-eval: \"error\"*/\n/*eslint-env browser*/\n\nwindow.eval(\"var a = 0\");\n```\n\nExample of additional **incorrect** code for this rule when `node` environment is set to `true`:\n\n```js\n/*eslint no-eval: \"error\"*/\n/*eslint-env node*/\n\nglobal.eval(\"var a = 0\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-eval: \"error\"*/\n/*eslint-env es6*/\n\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = obj[key];\n\nclass A {\n    foo() {\n        // This is a user-defined method.\n        this.eval(\"var a = 0\");\n    }\n\n    eval() {\n    }\n}\n```\n\n## Options\n\nThis rule has an option to allow indirect calls to `eval`.\nIndirect calls to `eval` are less dangerous than direct calls to `eval` because they cannot dynamically change the scope. Because of this, they also will not negatively impact performance to the degree of direct `eval`.\n\n```js\n{\n    \"no-eval\": [\"error\", {\"allowIndirect\": true}] // default is false\n}\n```\n\nExample of **incorrect** code for this rule with the `{\"allowIndirect\": true}` option:\n\n```js\n/*eslint no-eval: \"error\"*/\n\nvar obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n```\n\nExamples of **correct** code for this rule with the `{\"allowIndirect\": true}` option:\n\n```js\n/*eslint no-eval: \"error\"*/\n\n(0, eval)(\"var a = 0\");\n\nvar foo = eval;\nfoo(\"var a = 0\");\n\nthis.eval(\"var a = 0\");\n```\n\n```js\n/*eslint no-eval: \"error\"*/\n/*eslint-env browser*/\n\nwindow.eval(\"var a = 0\");\n```\n\n```js\n/*eslint no-eval: \"error\"*/\n/*eslint-env node*/\n\nglobal.eval(\"var a = 0\");\n```\n\n## Known Limitations\n\n* This rule is warning every `eval()` even if the `eval` is not global's.\n  This behavior is in order to detect calls of direct `eval`. Such as:\n\n  ```js\n  module.exports = function(eval) {\n      // If the value of this `eval` is built-in `eval` function, this is a\n      // call of direct `eval`.\n      eval(\"var a = 0\");\n  };\n  ```\n\n* This rule cannot catch renaming the global object. Such as:\n\n  ```js\n  var foo = window;\n  foo.eval(\"var a = 0\");\n  ```\n\n## Further Reading\n\n* [Eval is Evil, Part One](https://blogs.msdn.com/b/ericlippert/archive/2003/11/01/53329.aspx)\n* [How evil is eval](https://javascriptweblog.wordpress.com/2010/04/19/how-evil-is-eval/)\n\n## Related Rules\n\n* [no-implied-eval](no-implied-eval.md)\n"
	],
	[
		"no-ex-assign",
		"# disallow reassigning exceptions in `catch` clauses (no-ex-assign)\n\nIf a `catch` clause in a `try` statement accidentally (or purposely) assigns another value to the exception parameter, it impossible to refer to the error from that point on.\nSince there is no `arguments` object to offer alternative access to this data, assignment of the parameter is absolutely destructive.\n\n## Rule Details\n\nThis rule disallows reassigning exceptions in `catch` clauses.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-ex-assign: \"error\"*/\n\ntry {\n    // code\n} catch (e) {\n    e = 10;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-ex-assign: \"error\"*/\n\ntry {\n    // code\n} catch (e) {\n    var foo = 10;\n}\n```\n\n## Further Reading\n\n* [The \"catch\" with try...catch](https://bocoup.com/blog/the-catch-with-try-catch) by Ben Alman explains how the exception identifier can leak into the outer scope in IE 6-8\n"
	],
	[
		"no-extend-native",
		"# Disallow Extending of Native Objects (no-extend-native)\n\nIn JavaScript, you can extend any object, including builtin or \"native\" objects. Sometimes people change the behavior of these native objects in ways that break the assumptions made about them in other parts of the code.\n\nFor example here we are overriding a builtin method that will then affect all Objects, even other builtins.\n\n```js\n// seems harmless\nObject.prototype.extra = 55;\n\n// loop through some userIds\nvar users = {\n    \"123\": \"Stan\",\n    \"456\": \"David\"\n};\n\n// not what you'd expect\nfor (var id in users) {\n    console.log(id); // \"123\", \"456\", \"extra\"\n}\n```\n\nA common suggestion to avoid this problem would be to wrap the inside of the `for` loop with `users.hasOwnProperty(id)`. However, if this rule is strictly enforced throughout your codebase you won't need to take that step.\n\n## Rule Details\n\nDisallows directly modifying the prototype of builtin objects.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extend-native: \"error\"*/\n\nObject.prototype.a = \"a\";\nObject.defineProperty(Array.prototype, \"times\", { value: 999 });\n```\n\n## Options\n\nThis rule accepts an `exceptions` option, which can be used to specify a list of builtins for which extensions will be allowed.\n\n### exceptions\n\nExamples of **correct** code for the sample `{ \"exceptions\": [\"Object\"] }` option:\n\n```js\n/*eslint no-extend-native: [\"error\", { \"exceptions\": [\"Object\"] }]*/\n\nObject.prototype.a = \"a\";\n```\n\n## Known Limitations\n\nThis rule *does not* report any of the following less obvious approaches to modify the prototype of builtin objects:\n\n```js\nvar x = Object;\nx.prototype.thing = a;\n\neval(\"Array.prototype.forEach = 'muhahaha'\");\n\nwith(Array) {\n    prototype.thing = 'thing';\n};\n\nwindow.Function.prototype.bind = 'tight';\n```\n\n## When Not To Use It\n\nYou may want to disable this rule when working with polyfills that try to patch older versions of JavaScript with the latest spec, such as those that might `Function.prototype.bind` or `Array.prototype.forEach` in a future-friendly way.\n\n## Related Rules\n\n* [no-global-assign](no-global-assign.md)\n"
	],
	[
		"no-extra-bind",
		"# Disallow unnecessary function binding (no-extra-bind)\n\nThe `bind()` method is used to create functions with specific `this` values and, optionally, binds arguments to specific values. When used to specify the value of `this`, it's important that the function actually uses `this` in its function body. For example:\n\n```js\nvar boundGetName = (function getName() {\n    return this.name;\n}).bind({ name: \"ESLint\" });\n\nconsole.log(boundGetName());      // \"ESLint\"\n```\n\nThis code is an example of a good use of `bind()` for setting the value of `this`.\n\nSometimes during the course of code maintenance, the `this` value is removed from the function body. In that case, you can end up with a call to `bind()` that doesn't accomplish anything:\n\n```js\n// useless bind\nvar boundGetName = (function getName() {\n    return \"ESLint\";\n}).bind({ name: \"ESLint\" });\n\nconsole.log(boundGetName());      // \"ESLint\"\n```\n\nIn this code, the reference to `this` has been removed but `bind()` is still used. In this case, the `bind()` is unnecessary overhead (and a performance hit) and can be safely removed.\n\n## Rule Details\n\nThis rule is aimed at avoiding the unnecessary use of `bind()` and as such will warn whenever an immediately-invoked function expression (IIFE) is using `bind()` and doesn't have an appropriate `this` value. This rule won't flag usage of `bind()` that includes function argument binding.\n\n**Note:** Arrow functions can never have their `this` value set using `bind()`. This rule flags all uses of `bind()` with arrow functions as a problem\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-bind: \"error\"*/\n/*eslint-env es6*/\n\nvar x = function () {\n    foo();\n}.bind(bar);\n\nvar x = (() => {\n    foo();\n}).bind(bar);\n\nvar x = (() => {\n    this.foo();\n}).bind(bar);\n\nvar x = function () {\n    (function () {\n      this.foo();\n    }());\n}.bind(bar);\n\nvar x = function () {\n    function foo() {\n      this.bar();\n    }\n}.bind(baz);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-bind: \"error\"*/\n\nvar x = function () {\n    this.foo();\n}.bind(bar);\n\nvar x = function (a) {\n    return a + 1;\n}.bind(foo, bar);\n```\n\n## When Not To Use It\n\nIf you are not concerned about unnecessary calls to `bind()`, you can safely disable this rule.\n\n## Further Reading\n\n* [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n* [Understanding JavaScript's Function.prototype.bind](https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/)\n"
	],
	[
		"no-extra-boolean-cast",
		"# disallow unnecessary boolean casts (no-extra-boolean-cast)\n\nIn contexts such as an `if` statement's test where the result of the expression will already be coerced to a Boolean, casting to a Boolean via double negation (`!!`) or a `Boolean` call is unnecessary. For example, these `if` statements are equivalent:\n\n```js\nif (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nif (foo) {\n    // ...\n}\n```\n\n## Rule Details\n\nThis rule disallows unnecessary boolean casts.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-boolean-cast: \"error\"*/\n\nvar foo = !!!bar;\n\nvar foo = !!bar ? baz : bat;\n\nvar foo = Boolean(!!bar);\n\nvar foo = new Boolean(!!bar);\n\nif (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nwhile (!!foo) {\n    // ...\n}\n\ndo {\n    // ...\n} while (Boolean(foo));\n\nfor (; !!foo; ) {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-boolean-cast: \"error\"*/\n\nvar foo = !!bar;\nvar foo = Boolean(bar);\n\nfunction foo() {\n    return !!bar;\n}\n\nvar foo = bar ? !!baz : !!bat;\n```\n"
	],
	[
		"no-extra-label",
		"# Disallow Unnecessary Labels (no-extra-label)\n\nIf a loop contains no nested loops or switches, labeling the loop is unnecessary.\n\n```js\nA: while (a) {\n    break A;\n}\n```\n\nYou can achieve the same result by removing the label and using `break` or `continue` without a label.\nProbably those labels would confuse developers because they expect labels to jump to further.\n\n## Rule Details\n\nThis rule is aimed at eliminating unnecessary labels.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-label: \"error\"*/\n\nA: while (a) {\n    break A;\n}\n\nB: for (let i = 0; i < 10; ++i) {\n    break B;\n}\n\nC: switch (a) {\n    case 0:\n        break C;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-label: \"error\"*/\n\nwhile (a) {\n    break;\n}\n\nfor (let i = 0; i < 10; ++i) {\n    break;\n}\n\nswitch (a) {\n    case 0:\n        break;\n}\n\nA: {\n    break A;\n}\n\nB: while (a) {\n    while (b) {\n        break B;\n    }\n}\n\nC: switch (a) {\n    case 0:\n        while (b) {\n            break C;\n        }\n        break;\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about usage of labels, then it's safe to disable this rule.\n\n## Related Rules\n\n* [no-labels](./no-labels.md)\n* [no-label-var](./no-label-var.md)\n* [no-unused-labels](./no-unused-labels.md)\n"
	],
	[
		"no-extra-parens",
		"# disallow unnecessary parentheses (no-extra-parens)\n\nThis rule restricts the use of parentheses to only where they are necessary.\n\n## Rule Details\n\nThis rule always ignores extra parentheses around the following:\n\n* RegExp literals such as `(/abc/).test(var)` to avoid conflicts with the [wrap-regex](wrap-regex.md) rule\n* immediately-invoked function expressions (also known as IIFEs) such as `var x = (function () {})();` and `((function foo() {return 1;})())` to avoid conflicts with the [wrap-iife](wrap-iife.md) rule\n* arrow function arguments to avoid conflicts with the [arrow-parens](arrow-parens.md) rule\n\n## Options\n\nThis rule has a string option:\n\n* `\"all\"` (default) disallows unnecessary parentheses around *any* expression\n* `\"functions\"` disallows unnecessary parentheses *only* around function expressions\n\nThis rule has an object option for exceptions to the `\"all\"` option:\n\n* `\"conditionalAssign\": false` allows extra parentheses around assignments in conditional test expressions\n* `\"returnAssign\": false` allows extra parentheses around assignments in `return` statements\n* `\"nestedBinaryExpressions\": false` allows extra parentheses in nested binary expressions\n* `\"ignoreJSX\": \"none|all|multi-line|single-line\"` allows extra parentheses around no/all/multi-line/single-line JSX components. Defaults to `none`.\n* `\"enforceForArrowConditionals\": false` allows extra parentheses around ternary expressions which are the body of an arrow function\n* `\"enforceForSequenceExpressions\": false` allows extra parentheses around sequence expressions\n\n### all\n\nExamples of **incorrect** code for this rule with the default `\"all\"` option:\n\n```js\n/* eslint no-extra-parens: \"error\" */\n\na = (b * c);\n\n(a * b) + c;\n\nfor (a in (b, c));\n\nfor (a in (b));\n\nfor (a of (b));\n\ntypeof (a);\n\n(function(){} ? a() : b());\n```\n\nExamples of **correct** code for this rule with the default `\"all\"` option:\n\n```js\n/* eslint no-extra-parens: \"error\" */\n\n(0).toString();\n\n(Object.prototype.toString.call());\n\n({}.toString.call());\n\n(function(){}) ? a() : b();\n\n(/^a$/).test(x);\n\nfor (a of (b, c));\n\nfor (a of b);\n\nfor (a in b, c);\n\nfor (a in b);\n```\n\n### conditionalAssign\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"conditionalAssign\": false }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"conditionalAssign\": false }] */\n\nwhile ((foo = bar())) {}\n\nif ((foo = bar())) {}\n\ndo; while ((foo = bar()))\n\nfor (;(a = b););\n```\n\n### returnAssign\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"returnAssign\": false }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"returnAssign\": false }] */\n\nfunction a(b) {\n  return (b = 1);\n}\n\nfunction a(b) {\n  return b ? (c = d) : (c = e);\n}\n\nb => (b = 1);\n\nb => b ? (c = d) : (c = e);\n```\n\n### nestedBinaryExpressions\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"nestedBinaryExpressions\": false }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"nestedBinaryExpressions\": false }] */\n\nx = a || (b && c);\nx = a + (b * c);\nx = (a * b) / c;\n```\n\n### ignoreJSX\n\nExamples of **correct** code for this rule with the `all` and `{ \"ignoreJSX\": \"all\" }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"all\" }] */\nconst Component = (<div />)\nconst Component = (\n    <div\n        prop={true}\n    />\n)\n```\n\nExamples of **incorrect** code for this rule with the `all` and `{ \"ignoreJSX\": \"multi-line\" }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"multi-line\" }] */\nconst Component = (<div />)\nconst Component = (<div><p /></div>)\n```\n\nExamples of **correct** code for this rule with the `all` and `{ \"ignoreJSX\": \"multi-line\" }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"multi-line\" }] */\nconst Component = (\n    <div>\n        <p />\n    </div>\n)\nconst Component = (\n    <div\n        prop={true}\n    />\n)\n```\n\nExamples of **incorrect** code for this rule with the `all` and `{ \"ignoreJSX\": \"single-line\" }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"single-line\" }] */\nconst Component = (\n    <div>\n        <p />\n    </div>\n)\nconst Component = (\n    <div\n        prop={true}\n    />\n)\n```\n\nExamples of **correct** code for this rule with the `all` and `{ \"ignoreJSX\": \"single-line\" }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"single-line\" }] */\nconst Component = (<div />)\nconst Component = (<div><p /></div>)\n```\n\n### enforceForArrowConditionals\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"enforceForArrowConditionals\": false }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForArrowConditionals\": false }] */\n\nconst b = a => 1 ? 2 : 3;\nconst d = c => (1 ? 2 : 3);\n```\n\n### enforceForSequenceExpressions\n\nExamples of **correct** code for this rule with the `\"all\"` and `{ \"enforceForSequenceExpressions\": false }` options:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"all\", { \"enforceForSequenceExpressions\": false }] */\n\n(a, b);\n\nif ((val = foo(), val < 10)) {}\n\nwhile ((val = foo(), val < 10));\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `\"functions\"` option:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"functions\"] */\n\n((function foo() {}))();\n\nvar y = (function () {return 1;});\n```\n\nExamples of **correct** code for this rule with the `\"functions\"` option:\n\n```js\n/* eslint no-extra-parens: [\"error\", \"functions\"] */\n\n(0).toString();\n\n(Object.prototype.toString.call());\n\n({}.toString.call());\n\n(function(){} ? a() : b());\n\n(/^a$/).test(x);\n\na = (b * c);\n\n(a * b) + c;\n\ntypeof (a);\n```\n\n## Further Reading\n\n* [MDN: Operator Precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\n## Related Rules\n\n* [arrow-parens](arrow-parens.md)\n* [no-cond-assign](no-cond-assign.md)\n* [no-return-assign](no-return-assign.md)\n"
	],
	[
		"no-extra-semi",
		"# disallow unnecessary semicolons (no-extra-semi)\n\nTyping mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.\n\n## Rule Details\n\nThis rule disallows unnecessary semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;\n\nvar foo = function() {\n    // code\n};\n\n```\n\n## When Not To Use It\n\nIf you intentionally use extra semicolons then you can disable this rule.\n\n## Related Rules\n\n* [semi](semi.md)\n* [semi-spacing](semi-spacing.md)\n"
	],
	[
		"no-fallthrough",
		"# Disallow Case Statement Fallthrough (no-fallthrough)\n\nThe `switch` statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to \"fall through\" from one `case` to the next. For example:\n\n```js\nswitch(foo) {\n    case 1:\n        doSomething();\n\n    case 2:\n        doSomethingElse();\n}\n```\n\nIn this example, if `foo` is `1`, then execution will flow through both cases, as the first falls through to the second. You can prevent this by using `break`, as in this example:\n\n```js\nswitch(foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomethingElse();\n}\n```\n\nThat works fine when you don't want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It's considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the `/falls?\\s?through/i` regular expression:\n\n```js\nswitch(foo) {\n    case 1:\n        doSomething();\n        // falls through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fall through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fallsthrough\n\n    case 2:\n        doSomethingElse();\n}\n```\n\nIn this example, there is no confusion as to the expected behavior. It is clear that the first case is meant to fall through to the second case.\n\n## Rule Details\n\nThis rule is aimed at eliminating unintentional fallthrough of one case to the other. As such, it flags any fallthrough scenarios that are not marked by a comment.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-fallthrough: \"error\"*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n\n    case 2:\n        doSomething();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-fallthrough: \"error\"*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n}\n\nfunction bar(foo) {\n    switch(foo) {\n        case 1:\n            doSomething();\n            return;\n\n        case 2:\n            doSomething();\n    }\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        throw new Error(\"Boo!\");\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // falls through\n\n    case 2:\n        doSomething();\n}\n```\n\nNote that the last `case` statement in these examples does not cause a warning because there is nothing to fall through into.\n\n## Options\n\nThis rule accepts a single options argument:\n\n* Set the `commentPattern` option to a regular expression string to change the test for intentional fallthrough comment\n\n### commentPattern\n\nExamples of **correct** code for the `{ \"commentPattern\": \"break[\\\\s\\\\w]*omitted\" }` option:\n\n```js\n/*eslint no-fallthrough: [\"error\", { \"commentPattern\": \"break[\\\\s\\\\w]*omitted\" }]*/\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // break omitted\n\n    case 2:\n        doSomething();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // caution: break is omitted intentionally\n\n    default:\n        doSomething();\n}\n```\n\n## When Not To Use It\n\nIf you don't want to enforce that each `case` statement should end with a `throw`, `return`, `break`, or comment, then you can safely turn this rule off.\n\n## Related Rules\n\n* [default-case](default-case.md)\n"
	],
	[
		"no-floating-decimal",
		"# Disallow Floating Decimals (no-floating-decimal)\n\nFloat values in JavaScript contain a decimal point, and there is no requirement that the decimal point be preceded or followed by a number. For example, the following are all valid JavaScript numbers:\n\n```js\nvar num = .5;\nvar num = 2.;\nvar num = -.7;\n```\n\nAlthough not a syntax error, this format for numbers can make it difficult to distinguish between true decimal numbers and the dot operator. For this reason, some recommend that you should always include a number before and after a decimal point to make it clear the intent is to create a decimal number.\n\n## Rule Details\n\nThis rule is aimed at eliminating floating decimal points and will warn whenever a numeric value has a decimal point but is missing a number either before or after it.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-floating-decimal: \"error\"*/\n\nvar num = .5;\nvar num = 2.;\nvar num = -.7;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-floating-decimal: \"error\"*/\n\nvar num = 0.5;\nvar num = 2.0;\nvar num = -0.7;\n```\n\n## When Not To Use It\n\nIf you aren't concerned about misinterpreting floating decimal point values, then you can safely turn this rule off.\n\n## Compatibility\n\n* **JSHint**: W008, W047\n"
	],
	[
		"no-func-assign",
		"# disallow reassigning `function` declarations (no-func-assign)\n\nJavaScript functions can be written as a FunctionDeclaration `function foo() { ... }` or as a FunctionExpression `var foo = function() { ... };`. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.\n\n```js\nfunction foo() {}\nfoo = bar;\n```\n\n## Rule Details\n\nThis rule disallows reassigning `function` declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfunction foo() {}\nfoo = bar;\n\nfunction foo() {\n    foo = bar;\n}\n```\n\nExamples of **incorrect** code for this rule, unlike the corresponding rule in JSHint:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-func-assign: \"error\"*/\n\nvar foo = function () {}\nfoo = bar;\n\nfunction foo(foo) { // `foo` is shadowed.\n    foo = bar;\n}\n\nfunction foo() {\n    var foo = bar;  // `foo` is shadowed.\n}\n```\n"
	],
	[
		"no-global-assign",
		"# Disallow assignment to native objects or read-only global variables (no-global-assign)\n\nJavaScript environments contain a number of built-in global variables, such as `window` in browsers and `process` in Node.js. In almost all cases, you don't want to assign a value to these global variables as doing so could result in losing access to important functionality. For example, you probably don't want to do this in browser code:\n\n```js\nwindow = {};\n```\n\nWhile examples such as `window` are obvious, there are often hundreds of built-in global objects provided by JavaScript environments. It can be hard to know if you're assigning to a global variable or not.\n\n## Rule Details\n\nThis rule disallows modifications to read-only global variables.\n\nESLint has the capability to configure global variables as read-only.\n\n* [Specifying Environments](../user-guide/configuring#specifying-environments)\n* [Specifying Globals](../user-guide/configuring#specifying-globals)\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-global-assign: \"error\"*/\n\nObject = null\nundefined = 1\n```\n\n```js\n/*eslint no-global-assign: \"error\"*/\n/*eslint-env browser*/\n\nwindow = {}\nlength = 1\ntop = 1\n```\n\n```js\n/*eslint no-global-assign: \"error\"*/\n/*global a:readonly*/\n\na = 1\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-global-assign: \"error\"*/\n\na = 1\nvar b = 1\nb = 2\n```\n\n```js\n/*eslint no-global-assign: \"error\"*/\n/*eslint-env browser*/\n\nonload = function() {}\n```\n\n```js\n/*eslint no-global-assign: \"error\"*/\n/*global a:writable*/\n\na = 1\n```\n\n## Options\n\nThis rule accepts an `exceptions` option, which can be used to specify a list of builtins for which reassignments will be allowed:\n\n```json\n{\n    \"rules\": {\n        \"no-global-assign\": [\"error\", {\"exceptions\": [\"Object\"]}]\n    }\n}\n```\n\n## When Not To Use It\n\nIf you are trying to override one of the native objects.\n\n## Related Rules\n\n* [no-extend-native](no-extend-native.md)\n* [no-redeclare](no-redeclare.md)\n* [no-shadow](no-shadow.md)\n"
	],
	[
		"no-implicit-coercion",
		"# Disallow the type conversion with shorter notations. (no-implicit-coercion)\n\nIn JavaScript, there are a lot of different ways to convert value types.\nSome of them might be hard to read and understand.\n\nSuch as:\n\n```js\nvar b = !!foo;\nvar b = ~foo.indexOf(\".\");\nvar n = +foo;\nvar n = 1 * foo;\nvar s = \"\" + foo;\nfoo += ``;\n```\n\nThose can be replaced with the following code:\n\n```js\nvar b = Boolean(foo);\nvar b = foo.indexOf(\".\") !== -1;\nvar n = Number(foo);\nvar n = Number(foo);\nvar s = String(foo);\nfoo = String(foo);\n```\n\n## Rule Details\n\nThis rule is aimed to flag shorter notations for the type conversion, then suggest a more self-explanatory notation.\n\n## Options\n\nThis rule has three main options and one override option to allow some coercions as required.\n\n* `\"boolean\"` (`true` by default) - When this is `true`, this rule warns shorter type conversions for `boolean` type.\n* `\"number\"` (`true` by default) - When this is `true`, this rule warns shorter type conversions for `number` type.\n* `\"string\"` (`true` by default) - When this is `true`, this rule warns shorter type conversions for `string` type.\n* `\"allow\"` (`empty` by default) - Each entry in this array can be one of `~`, `!!`, `+` or `*` that are to be allowed.\n\nNote that operator `+` in `allow` list would allow `+foo` (number coercion) as well as `\"\" + foo` (string coercion).\n\n### boolean\n\nExamples of **incorrect** code for the default `{ \"boolean\": true }` option:\n\n```js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar b = !!foo;\nvar b = ~foo.indexOf(\".\");\n// bitwise not is incorrect only with `indexOf`/`lastIndexOf` method calling.\n```\n\nExamples of **correct** code for the default `{ \"boolean\": true }` option:\n\n```js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar b = Boolean(foo);\nvar b = foo.indexOf(\".\") !== -1;\n\nvar n = ~foo; // This is a just bitwise not.\n```\n\n### number\n\nExamples of **incorrect** code for the default `{ \"number\": true }` option:\n\n```js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar n = +foo;\nvar n = 1 * foo;\n```\n\nExamples of **correct** code for the default `{ \"number\": true }` option:\n\n```js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar n = Number(foo);\nvar n = parseFloat(foo);\nvar n = parseInt(foo, 10);\n```\n\n### string\n\nExamples of **incorrect** code for the default `{ \"string\": true }` option:\n\n```js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar s = \"\" + foo;\nvar s = `` + foo;\nfoo += \"\";\nfoo += ``;\n```\n\nExamples of **correct** code for the default `{ \"string\": true }` option:\n\n```js\n/*eslint no-implicit-coercion: \"error\"*/\n\nvar s = String(foo);\nfoo = String(foo);\n```\n\n### allow\n\nUsing `allow` list, we can override and allow specific operators.\n\nExamples of **correct** code for the sample `{ \"allow\": [\"!!\", \"~\"] }` option:\n\n```js\n/*eslint no-implicit-coercion: [2, { \"allow\": [\"!!\", \"~\"] } ]*/\n\nvar b = !!foo;\nvar b = ~foo.indexOf(\".\");\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about shorter notations for the type conversion, you can safely disable this rule.\n"
	],
	[
		"no-implicit-globals",
		"# disallow variable and `function` declarations in the global scope (no-implicit-globals)\n\nWhen working with browser scripts, developers often forget that variable and function declarations at the top-level scope become global variables on the `window` object. As opposed to modules which have their own scope. Globals should be explicitly assigned to `window` or `self` if that is the intent. Otherwise variables intended to be local to the script should be wrapped in an IIFE.\n\n## Rule Details\n\nThis rule disallows `var` and named `function` declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-implicit-globals: \"error\"*/\n\nvar foo = 1;\n\nfunction bar() {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-implicit-globals: \"error\"*/\n\n// explicitly set on window\nwindow.foo = 1;\nwindow.bar = function() {};\n\n// intended to be scope to this file\n(function() {\n  var foo = 1;\n\n  function bar() {}\n})();\n```\n\nExamples of **correct** code for this rule with `\"parserOptions\": { \"sourceType\": \"module\" }` in the ESLint configuration:\n\n```js\n/*eslint no-implicit-globals: \"error\"*/\n\n// foo and bar are local to module\nvar foo = 1;\nfunction bar() {}\n```\n\n## When Not To Use It\n\nIf you want to be able to declare variables and functions in the global scope you can safely disable this rule. Or if you are always using module scoped files, this rule will never apply.\n\n## Further Reading\n\n* [Immediately-Invoked Function Expression (IIFE)](http://benalman.com/news/2010/11/immediately-invoked-function-expression/)\n"
	],
	[
		"no-implied-eval",
		"# Disallow Implied eval() (no-implied-eval)\n\nIt's considered a good practice to avoid using `eval()` in JavaScript. There are security and performance implications involved with doing so, which is why many linters (including ESLint) recommend disallowing `eval()`. However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns.\n\nThe first is using `setTimeout()`, `setInterval()` or `execScript()` (Internet Explorer only), all of which can accept a string of JavaScript code as their first argument. For example:\n\n```js\nsetTimeout(\"alert('Hi!');\", 100);\n```\n\nThis is considered an implied `eval()` because a string of JavaScript code is\n passed in to be interpreted. The same can be done with `setInterval()` and `execScript()`. Both interpret the JavaScript code in  the global scope. For  both `setTimeout()` and `setInterval()`, the first argument can also be a function, and that is considered safer and is more performant:\n\n```js\nsetTimeout(function() {\n    alert(\"Hi!\");\n}, 100);\n```\n\nThe best practice is to always use a function for the first argument of `setTimeout()` and `setInterval()` (and avoid `execScript()`).\n\n\n## Rule Details\n\nThis rule aims to eliminate implied `eval()` through the use of `setTimeout()`, `setInterval()` or `execScript()`. As such, it will warn when either function is used with a string as the first argument.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-implied-eval: \"error\"*/\n\nsetTimeout(\"alert('Hi!');\", 100);\n\nsetInterval(\"alert('Hi!');\", 100);\n\nexecScript(\"alert('Hi!')\");\n\nwindow.setTimeout(\"count = 5\", 10);\n\nwindow.setInterval(\"foo = bar\", 10);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-implied-eval: \"error\"*/\n\nsetTimeout(function() {\n    alert(\"Hi!\");\n}, 100);\n\nsetInterval(function() {\n    alert(\"Hi!\");\n}, 100);\n```\n\n## When Not To Use It\n\nIf you want to allow `setTimeout()` and `setInterval()` with string arguments, then you can safely disable this rule.\n\n## Related Rules\n\n* [no-eval](no-eval.md)\n"
	],
	[
		"no-inline-comments",
		"# disallow inline comments after code (no-inline-comments)\n\nSome style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line.\nOn the other hand, it is sometimes faster and more obvious to put comments immediately following code.\n\n## Rule Details\n\nThis rule disallows comments on the same line as code.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-inline-comments: \"error\"*/\n\nvar a = 1; // declaring a to 1\n\nfunction getRandomNumber(){\n    return 4; // chosen by fair dice roll.\n              // guaranteed to be random.\n}\n\n/* A block comment before code */ var b = 2;\n\nvar c = 3; /* A block comment after code */\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-inline-comments: \"error\"*/\n\n// This is a comment above a line of code\nvar foo = 5;\n\nvar bar = 5;\n//This is a comment below a line of code\n```\n"
	],
	[
		"no-inner-declarations",
		"# disallow variable or `function` declarations in nested blocks  (no-inner-declarations)\n\nIn JavaScript, prior to ES6, a function declaration is only allowed in the first level of a program or the body of another function, though parsers sometimes [erroneously accept them elsewhere](https://code.google.com/p/esprima/issues/detail?id=422). This only applies to function declarations; named or anonymous function expressions can occur anywhere an expression is permitted.\n\n```js\n// Good\nfunction doSomething() { }\n\n// Bad\nif (test) {\n    function doSomethingElse () { }\n}\n\nfunction anotherThing() {\n    var fn;\n\n    if (test) {\n\n        // Good\n        fn = function expression() { };\n\n        // Bad\n        function declaration() { }\n    }\n}\n```\n\nA variable declaration is permitted anywhere a statement can go, even nested deeply inside other blocks. This is often undesirable due to variable hoisting, and moving declarations to the root of the program or function body can increase clarity. Note that [block bindings](https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings) (`let`, `const`) are not hoisted and therefore they are not affected by this rule.\n\n```js\n/*eslint-env es6*/\n\n// Good\nvar foo = 42;\n\n// Good\nif (foo) {\n    let bar1;\n}\n\n// Bad\nwhile (test) {\n    var bar2;\n}\n\nfunction doSomething() {\n    // Good\n    var baz = true;\n\n    // Bad\n    if (baz) {\n        var quux;\n    }\n}\n```\n\n## Rule Details\n\nThis rule requires that function declarations and, optionally, variable declarations be in the root of a program or the body of a function.\n\n## Options\n\nThis rule has a string option:\n\n* `\"functions\"` (default) disallows `function` declarations in nested blocks\n* `\"both\"` disallows `function` and `var` declarations in nested blocks\n\n### functions\n\nExamples of **incorrect** code for this rule with the default `\"functions\"` option:\n\n```js\n/*eslint no-inner-declarations: \"error\"*/\n\nif (test) {\n    function doSomething() { }\n}\n\nfunction doSomethingElse() {\n    if (test) {\n        function doAnotherThing() { }\n    }\n}\n```\n\nExamples of **correct** code for this rule with the default `\"functions\"` option:\n\n```js\n/*eslint no-inner-declarations: \"error\"*/\n\nfunction doSomething() { }\n\nfunction doSomethingElse() {\n    function doAnotherThing() { }\n}\n\nif (test) {\n    asyncCall(id, function (err, data) { });\n}\n\nvar fn;\nif (test) {\n    fn = function fnExpression() { };\n}\n```\n\n### both\n\nExamples of **incorrect** code for this rule with the `\"both\"` option:\n\n```js\n/*eslint no-inner-declarations: [\"error\", \"both\"]*/\n\nif (test) {\n    var foo = 42;\n}\n\nfunction doAnotherThing() {\n    if (test) {\n        var bar = 81;\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `\"both\"` option:\n\n```js\n/*eslint no-inner-declarations: \"error\"*/\n/*eslint-env es6*/\n\nvar bar = 42;\n\nif (test) {\n    let baz = 43;\n}\n\nfunction doAnotherThing() {\n    var baz = 81;\n}\n```\n\n## When Not To Use It\n\nThe function declaration portion rule will be rendered obsolete when [block-scoped functions](https://bugzilla.mozilla.org/show_bug.cgi?id=585536) land in ES6, but until then, it should be left on to enforce valid constructions. Disable checking variable declarations when using [block-scoped-var](block-scoped-var.md) or if declaring variables in nested blocks is acceptable despite hoisting.\n"
	],
	[
		"no-invalid-regexp",
		"# disallow invalid regular expression strings in `RegExp` constructors (no-invalid-regexp)\n\nAn invalid pattern in a regular expression literal is a `SyntaxError` when the code is parsed, but an invalid string in `RegExp` constructors throws a `SyntaxError` only when the code is executed.\n\n## Rule Details\n\nThis rule disallows invalid regular expression strings in `RegExp` constructors.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-invalid-regexp: \"error\"*/\n\nRegExp('[')\n\nRegExp('.', 'z')\n\nnew RegExp('\\\\')\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-invalid-regexp: \"error\"*/\n\nRegExp('.')\n\nnew RegExp\n\nthis.RegExp('[')\n```\n\n## Environments\n\nECMAScript 6 adds the following flag arguments to the `RegExp` constructor:\n\n* `\"u\"` ([unicode](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.unicode))\n* `\"y\"` ([sticky](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.sticky))\n\nYou can enable these to be recognized as valid by setting the ECMAScript version to 6 in your [ESLint configuration](../user-guide/configuring).\n\nIf you want to allow additional constructor flags for any reason, you can specify them using an `allowConstructorFlags` option in `.eslintrc`. These flags will then be ignored by the rule regardless of the `ecmaVersion` setting.\n\n## Options\n\nThis rule has an object option for exceptions:\n\n* `\"allowConstructorFlags\"` is an array of flags\n\n### allowConstructorFlags\n\nExamples of **correct** code for this rule with the `{ \"allowConstructorFlags\": [\"u\", \"y\"] }` option:\n\n```js\n/*eslint no-invalid-regexp: [\"error\", { \"allowConstructorFlags\": [\"u\", \"y\"] }]*/\n\nnew RegExp('.', 'y')\n\nnew RegExp('.', 'yu')\n```\n\n## Further Reading\n\n* [Annotated ES5 §7.8.5 - Regular Expression Literals](https://es5.github.io/#x7.8.5)\n"
	],
	[
		"no-invalid-this",
		"# Disallow `this` keywords outside of classes or class-like objects. (no-invalid-this)\n\nUnder the strict mode, `this` keywords outside of classes or class-like objects might be `undefined` and raise a `TypeError`.\n\n## Rule Details\n\nThis rule aims to flag usage of `this` keywords outside of classes or class-like objects.\n\nBasically, this rule checks whether or not a function containing `this` keyword is a constructor or a method.\n\nThis rule judges from following conditions whether or not the function is a constructor:\n\n* The name of the function starts with uppercase.\n* The function is assigned to a variable which starts with an uppercase letter.\n* The function is a constructor of ES2015 Classes.\n\nThis rule judges from following conditions whether or not the function is a method:\n\n* The function is on an object literal.\n* The function is assigned to a property.\n* The function is a method/getter/setter of ES2015 Classes. (excepts static methods)\n\nAnd this rule allows `this` keywords in functions below:\n\n* The `call/apply/bind` method of the function is called directly.\n* The function is a callback of array methods (such as `.forEach()`) if `thisArg` is given.\n* The function has `@this` tag in its JSDoc comment.\n\nOtherwise are considered problems.\n\nThis rule applies **only** in strict mode.\nWith `\"parserOptions\": { \"sourceType\": \"module\" }` in the ESLint configuration, your code is in strict mode even without a `\"use strict\"` directive.\n\nExamples of **incorrect** code for this rule in strict mode:\n\n```js\n/*eslint no-invalid-this: \"error\"*/\n/*eslint-env es6*/\n\n\"use strict\";\n\nthis.a = 0;\nbaz(() => this);\n\n(function() {\n    this.a = 0;\n    baz(() => this);\n})();\n\nfunction foo() {\n    this.a = 0;\n    baz(() => this);\n}\n\nvar foo = function() {\n    this.a = 0;\n    baz(() => this);\n};\n\nfoo(function() {\n    this.a = 0;\n    baz(() => this);\n});\n\nobj.foo = () => {\n    // `this` of arrow functions is the outer scope's.\n    this.a = 0;\n};\n\nvar obj = {\n    aaa: function() {\n        return function foo() {\n            // There is in a method `aaa`, but `foo` is not a method.\n            this.a = 0;\n            baz(() => this);\n        };\n    }\n};\n\nfoo.forEach(function() {\n    this.a = 0;\n    baz(() => this);\n});\n```\n\nExamples of **correct** code for this rule in strict mode:\n\n```js\n/*eslint no-invalid-this: \"error\"*/\n/*eslint-env es6*/\n\n\"use strict\";\n\nfunction Foo() {\n    // OK, this is in a legacy style constructor.\n    this.a = 0;\n    baz(() => this);\n}\n\nclass Foo {\n    constructor() {\n        // OK, this is in a constructor.\n        this.a = 0;\n        baz(() => this);\n    }\n}\n\nvar obj = {\n    foo: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};\n\nvar obj = {\n    foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n};\n\nvar obj = {\n    get foo() {\n        // OK, this is in a method (this function is on object literal).\n        return this.a;\n    }\n};\n\nvar obj = Object.create(null, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});\n\nObject.defineProperty(obj, \"foo\", {\n    value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }\n});\n\nObject.defineProperties(obj, {\n    foo: {value: function foo() {\n        // OK, this is in a method (this function is on object literal).\n        this.a = 0;\n    }}\n});\n\nfunction Foo() {\n    this.foo = function foo() {\n        // OK, this is in a method (this function assigns to a property).\n        this.a = 0;\n        baz(() => this);\n    };\n}\n\nobj.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};\n\nFoo.prototype.foo = function foo() {\n    // OK, this is in a method (this function assigns to a property).\n    this.a = 0;\n};\n\nclass Foo {\n    foo() {\n        // OK, this is in a method.\n        this.a = 0;\n        baz(() => this);\n    }\n\n    static foo() {\n        // OK, this is in a method (static methods also have valid this).\n        this.a = 0;\n        baz(() => this);\n    }\n}\n\nvar foo = (function foo() {\n    // OK, the `bind` method of this function is called directly.\n    this.a = 0;\n}).bind(obj);\n\nfoo.forEach(function() {\n    // OK, `thisArg` of `.forEach()` is given.\n    this.a = 0;\n    baz(() => this);\n}, thisArg);\n\n/** @this Foo */\nfunction foo() {\n    // OK, this function has a `@this` tag in its JSDoc comment.\n    this.a = 0;\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about usage of `this` keyword outside of classes or class-like objects, you can safely disable this rule.\n"
	],
	[
		"no-irregular-whitespace",
		"# disallow irregular whitespace (no-irregular-whitespace)\n\nInvalid or irregular whitespace causes issues with ECMAScript 5 parsers and also makes code harder to debug in a similar nature to mixed tabs and spaces.\n\nVarious whitespace characters can be inputted by programmers by mistake for example from copying or keyboard shortcuts. Pressing Alt + Space on macOS adds in a non breaking space character for example.\n\nA simple fix for this problem could be to rewrite the offending line from scratch. This might also be a problem introduced by the text editor: if rewriting the line does not fix it, try using a different editor.\n\nKnown issues these spaces cause:\n\n* Zero Width Space\n    * Is NOT considered a separator for tokens and is often parsed as an `Unexpected token ILLEGAL`\n    * Is NOT shown in modern browsers making code repository software expected to resolve the visualization\n* Line Separator\n    * Is NOT a valid character within JSON which would cause parse errors\n\n## Rule Details\n\nThis rule is aimed at catching invalid whitespace that is not a normal tab and space. Some of these characters may cause issues in modern browsers and others will be a debugging issue to spot.\n\nThis rule disallows the following characters except where the options allow:\n\n    \\u000B - Line Tabulation (\\v) - <VT>\n    \\u000C - Form Feed (\\f) - <FF>\n    \\u00A0 - No-Break Space - <NBSP>\n    \\u0085 - Next Line\n    \\u1680 - Ogham Space Mark\n    \\u180E - Mongolian Vowel Separator - <MVS>\n    \\ufeff - Zero Width No-Break Space - <BOM>\n    \\u2000 - En Quad\n    \\u2001 - Em Quad\n    \\u2002 - En Space - <ENSP>\n    \\u2003 - Em Space - <EMSP>\n    \\u2004 - Tree-Per-Em\n    \\u2005 - Four-Per-Em\n    \\u2006 - Six-Per-Em\n    \\u2007 - Figure Space\n    \\u2008 - Punctuation Space - <PUNCSP>\n    \\u2009 - Thin Space\n    \\u200A - Hair Space\n    \\u200B - Zero Width Space - <ZWSP>\n    \\u2028 - Line Separator\n    \\u2029 - Paragraph Separator\n    \\u202F - Narrow No-Break Space\n    \\u205f - Medium Mathematical Space\n    \\u3000 - Ideographic Space\n\n## Options\n\nThis rule has an object option for exceptions:\n\n* `\"skipStrings\": true` (default) allows any whitespace characters in string literals\n* `\"skipComments\": true` allows any whitespace characters in comments\n* `\"skipRegExps\": true` allows any whitespace characters in regular expression literals\n* `\"skipTemplates\": true` allows any whitespace characters in template literals\n\n### skipStrings\n\nExamples of **incorrect** code for this rule with the default `{ \"skipStrings\": true }` option:\n\n```js\n/*eslint no-irregular-whitespace: \"error\"*/\n\nfunction thing() /*<NBSP>*/{\n    return 'test';\n}\n\nfunction thing( /*<NBSP>*/){\n    return 'test';\n}\n\nfunction thing /*<NBSP>*/(){\n    return 'test';\n}\n\nfunction thing᠎/*<MVS>*/(){\n    return 'test';\n}\n\nfunction thing() {\n    return 'test'; /*<ENSP>*/\n}\n\nfunction thing() {\n    return 'test'; /*<NBSP>*/\n}\n\nfunction thing() {\n    // Description <NBSP>: some descriptive text\n}\n\n/*\nDescription <NBSP>: some descriptive text\n*/\n\nfunction thing() {\n    return / <NBSP>regexp/;\n}\n\n/*eslint-env es6*/\nfunction thing() {\n    return `template <NBSP>string`;\n}\n```\n\nExamples of **correct** code for this rule with the default `{ \"skipStrings\": true }` option:\n\n```js\n/*eslint no-irregular-whitespace: \"error\"*/\n\nfunction thing() {\n    return ' <NBSP>thing';\n}\n\nfunction thing() {\n    return '​<ZWSP>thing';\n}\n\nfunction thing() {\n    return 'th <NBSP>ing';\n}\n```\n\n### skipComments\n\nExamples of additional **correct** code for this rule with the `{ \"skipComments\": true }` option:\n\n```js\n/*eslint no-irregular-whitespace: [\"error\", { \"skipComments\": true }]*/\n\nfunction thing() {\n    // Description <NBSP>: some descriptive text\n}\n\n/*\nDescription <NBSP>: some descriptive text\n*/\n```\n\n### skipRegExps\n\nExamples of additional **correct** code for this rule with the `{ \"skipRegExps\": true }` option:\n\n```js\n/*eslint no-irregular-whitespace: [\"error\", { \"skipRegExps\": true }]*/\n\nfunction thing() {\n    return / <NBSP>regexp/;\n}\n```\n\n### skipTemplates\n\nExamples of additional **correct** code for this rule with the `{ \"skipTemplates\": true }` option:\n\n```js\n/*eslint no-irregular-whitespace: [\"error\", { \"skipTemplates\": true }]*/\n/*eslint-env es6*/\n\nfunction thing() {\n    return `template <NBSP>string`;\n}\n```\n\n## When Not To Use It\n\nIf you decide that you wish to use whitespace other than tabs and spaces outside of strings in your application.\n\n## Further Reading\n\n* [ECMA whitespace](https://es5.github.io/#x7.2 \\xA0)\n* [JSON whitespace issues](http://timelessrepo.com/json-isnt-a-javascript-subset)\n"
	],
	[
		"no-iterator",
		"# Disallow Iterator (no-iterator)\n\nThe `__iterator__` property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript's `for in` and `for each` constructs. However, this property is now obsolete, so it should not be used. Here's an example of how this used to work:\n\n```js\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n}\n```\n\nYou should use ECMAScript 6 iterators and generators instead.\n\n## Rule Details\n\nThis rule is aimed at preventing errors that may arise from using the `__iterator__` property, which is not implemented in several browsers. As such, it will warn whenever it encounters the `__iterator__` property.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-iterator: \"error\"*/\n\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n};\n\nfoo.__iterator__ = function () {};\n\nfoo[\"__iterator__\"] = function () {};\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-iterator: \"error\"*/\n\nvar __iterator__ = foo; // Not using the `__iterator__` property.\n```\n\n## Further Reading\n\n* [MDN - Iterators and Generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n* [ECMAScript 6 compatibility table - Iterators](https://kangax.github.io/es5-compat-table/es6/#Iterators)\n* [Deprecated and Obsolete Features](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#Object_methods)\n"
	],
	[
		"no-label-var",
		"# Disallow Labels That Are Variables Names (no-label-var)\n\n## Rule Details\n\nThis rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-label-var: \"error\"*/\n\nvar x = foo;\nfunction bar() {\nx:\n  for (;;) {\n    break x;\n  }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-label-var: \"error\"*/\n\n// The variable that has the same name as the label is not in scope.\n\nfunction foo() {\n  var q = t;\n}\n\nfunction bar() {\nq:\n  for(;;) {\n    break q;\n  }\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about usage of labels, then it's safe to disable this rule.\n\n## Related Rules\n\n* [no-extra-label](./no-extra-label.md)\n* [no-labels](./no-labels.md)\n* [no-unused-labels](./no-unused-labels.md)\n"
	],
	[
		"no-labels",
		"# Disallow Labeled Statements (no-labels)\n\nLabeled statements in JavaScript are used in conjunction with `break` and `continue` to control flow around multiple loops. For example:\n\n```js\nouter:\n    while (true) {\n\n        while (true) {\n            break outer;\n        }\n    }\n```\n\nThe `break outer` statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the `outer` label was applied. If this statement was changed to be just `break`, control would flow back to the outer `while` statement and an infinite loop would result.\n\nWhile convenient in some cases, labels tend to be used only rarely and are frowned upon by some as a remedial form of flow control that is more error prone and harder to understand.\n\n## Rule Details\n\nThis rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever `break` or `continue` are used with a label.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-labels: \"error\"*/\n\nlabel:\n    while(true) {\n        // ...\n    }\n\nlabel:\n    while(true) {\n        break label;\n    }\n\nlabel:\n    while(true) {\n        continue label;\n    }\n\nlabel:\n    switch (a) {\n    case 0:\n        break label;\n    }\n\nlabel:\n    {\n        break label;\n    }\n\nlabel:\n    if (a) {\n        break label;\n    }\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-labels: \"error\"*/\n\nvar f = {\n    label: \"foo\"\n};\n\nwhile (true) {\n    break;\n}\n\nwhile (true) {\n    continue;\n}\n```\n\n## Options\n\nThe options allow labels with loop or switch statements:\n\n* `\"allowLoop\"` (`boolean`, default is `false`) - If this option was set `true`, this rule ignores labels which are sticking to loop statements.\n* `\"allowSwitch\"` (`boolean`, default is `false`) - If this option was set `true`, this rule ignores labels which are sticking to switch statements.\n\nActually labeled statements in JavaScript can be used with other than loop and switch statements.\nHowever, this way is ultra rare, not well-known, so this would be confusing developers.\n\n### allowLoop\n\nExamples of **correct** code for the `{ \"allowLoop\": true }` option:\n\n```js\n/*eslint no-labels: [\"error\", { \"allowLoop\": true }]*/\n\nlabel:\n    while (true) {\n        break label;\n    }\n```\n\n### allowSwitch\n\nExamples of **correct** code for the `{ \"allowSwitch\": true }` option:\n\n```js\n/*eslint no-labels: [\"error\", { \"allowSwitch\": true }]*/\n\nlabel:\n    switch (a) {\n        case 0:\n            break label;\n    }\n```\n\n## When Not To Use It\n\nIf you need to use labeled statements everywhere, then you can safely disable this rule.\n\n## Related Rules\n\n* [no-extra-label](./no-extra-label.md)\n* [no-label-var](./no-label-var.md)\n* [no-unused-labels](./no-unused-labels.md)\n"
	],
	[
		"no-lone-blocks",
		"# Disallow Unnecessary Nested Blocks (no-lone-blocks)\n\nIn JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use. For example, these curly braces do nothing to `foo`:\n\n```js\n{\n    var foo = bar();\n}\n```\n\nIn ES6, code blocks may create a new scope if a block-level binding (`let` and `const`), a class declaration or a function declaration (in strict mode) are present. A block is not considered redundant in these cases.\n\n## Rule Details\n\nThis rule aims to eliminate unnecessary and potentially confusing blocks at the top level of a script or within other blocks.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-lone-blocks: \"error\"*/\n\n{}\n\nif (foo) {\n    bar();\n    {\n        baz();\n    }\n}\n\nfunction bar() {\n    {\n        baz();\n    }\n}\n\n{\n    function foo() {}\n}\n\n{\n    aLabel: {\n    }\n}\n```\n\nExamples of **correct** code for this rule with ES6 environment:\n\n```js\n/*eslint no-lone-blocks: \"error\"*/\n/*eslint-env es6*/\n\nwhile (foo) {\n    bar();\n}\n\nif (foo) {\n    if (bar) {\n        baz();\n    }\n}\n\nfunction bar() {\n    baz();\n}\n\n{\n    let x = 1;\n}\n\n{\n    const y = 1;\n}\n\n{\n    class Foo {}\n}\n\naLabel: {\n}\n```\n\nExamples of **correct** code for this rule with ES6 environment and strict mode via `\"parserOptions\": { \"sourceType\": \"module\" }` in the ESLint configuration or `\"use strict\"` directive in the code:\n\n```js\n/*eslint no-lone-blocks: \"error\"*/\n/*eslint-env es6*/\n\n\"use strict\";\n\n{\n    function foo() {}\n}\n```\n"
	],
	[
		"no-lonely-if",
		"# disallow `if` statements as the only statement in `else` blocks (no-lonely-if)\n\nIf an `if` statement is the only statement in the `else` block, it is often clearer to use an `else if` form.\n\n```js\nif (foo) {\n    // ...\n} else {\n    if (bar) {\n        // ...\n    }\n}\n```\n\nshould be rewritten as\n\n```js\nif (foo) {\n    // ...\n} else if (bar) {\n    // ...\n}\n```\n\n## Rule Details\n\nThis rule disallows `if` statements as the only statement in `else` blocks.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-lonely-if: \"error\"*/\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n}\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    } else {\n        // ...\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-lonely-if: \"error\"*/\n\nif (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n}\n\nif (condition) {\n    // ...\n} else if (anotherCondition) {\n    // ...\n} else {\n    // ...\n}\n\nif (condition) {\n    // ...\n} else {\n    if (anotherCondition) {\n        // ...\n    }\n    doSomething();\n}\n```\n\n## When Not To Use It\n\nDisable this rule if the code is clearer without requiring the `else if` form.\n"
	],
	[
		"no-loop-func",
		"# Disallow Functions in Loops (no-loop-func)\n\nWriting functions within loops tends to result in errors due to the way the function creates a closure around the loop. For example:\n\n```js\nfor (var i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\nIn this case, you would expect each function created within the loop to return a different number. In reality, each function returns 10, because that was the last value of `i` in the scope.\n\n`let` or `const` mitigate this problem.\n\n```js\n/*eslint-env es6*/\n\nfor (let i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}\n```\n\nIn this case, each function created within the loop returns a different number as expected.\n\n\n## Rule Details\n\nThis error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.\n\nThis rule disallows any function within a loop that contains unsafe references (e.g. to modified variables from the outer scope).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-loop-func: \"error\"*/\n/*eslint-env es6*/\n\nfor (var i=10; i; i--) {\n    (function() { return i; })();\n}\n\nwhile(i) {\n    var a = function() { return i; };\n    a();\n}\n\ndo {\n    function a() { return i; };\n    a();\n} while (i);\n\nlet foo = 0;\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n    foo += 1;\n}\n\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n}\nfoo = 100;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-loop-func: \"error\"*/\n/*eslint-env es6*/\n\nvar a = function() {};\n\nfor (var i=10; i; i--) {\n    a();\n}\n\nfor (var i=10; i; i--) {\n    var a = function() {}; // OK, no references to variables in the outer scopes.\n    a();\n}\n\nfor (let i=10; i; i--) {\n    var a = function() { return i; }; // OK, all references are referring to block scoped variables in the loop.\n    a();\n}\n\nvar foo = 100;\nfor (let i=10; i; i--) {\n    var a = function() { return foo; }; // OK, all references are referring to never modified variables.\n    a();\n}\n//... no modifications of foo after this loop ...\n```\n"
	],
	[
		"no-magic-numbers",
		"# Disallow Magic Numbers (no-magic-numbers)\n\n'Magic numbers' are numbers that occur multiple time in code without an explicit meaning.\nThey should preferably be replaced by named constants.\n\n```js\nvar now = Date.now(),\n    inOneHour = now + (60 * 60 * 1000);\n```\n\n## Rule Details\n\nThe `no-magic-numbers` rule aims to make code more readable and refactoring easier by ensuring that special numbers\nare declared as constants to make their meaning explicit.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * 0.25);\n```\n\n```js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar data = ['foo', 'bar', 'baz'];\n\nvar dataLast = data[2];\n```\n\n```js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar SECONDS;\n\nSECONDS = 60;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-magic-numbers: \"error\"*/\n\nvar TAX = 0.25;\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * TAX);\n```\n\n## Options\n\n### ignore\n\nAn array of numbers to ignore. It's set to `[]` by default.\nIf provided, it must be an `Array`.\n\nExamples of **correct** code for the sample `{ \"ignore\": [1] }` option:\n\n```js\n/*eslint no-magic-numbers: [\"error\", { \"ignore\": [1] }]*/\n\nvar data = ['foo', 'bar', 'baz'];\nvar dataLast = data.length && data[data.length - 1];\n```\n\n### ignoreArrayIndexes\n\nA boolean to specify if numbers used as array indexes are considered okay. `false` by default.\n\nExamples of **correct** code for the `{ \"ignoreArrayIndexes\": true }` option:\n\n```js\n/*eslint no-magic-numbers: [\"error\", { \"ignoreArrayIndexes\": true }]*/\n\nvar data = ['foo', 'bar', 'baz'];\nvar dataLast = data[2];\n```\n\n### enforceConst\n\nA boolean to specify if we should check for the const keyword in variable declaration of numbers. `false` by default.\n\nExamples of **incorrect** code for the `{ \"enforceConst\": true }` option:\n\n```js\n/*eslint no-magic-numbers: [\"error\", { \"enforceConst\": true }]*/\n\nvar TAX = 0.25;\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * TAX);\n```\n\n### detectObjects\n\nA boolean to specify if we should detect numbers when setting object properties for example. `false` by default.\n\nExamples of **incorrect** code for the `{ \"detectObjects\": true }` option:\n\n```js\n/*eslint no-magic-numbers: [\"error\", { \"detectObjects\": true }]*/\n\nvar magic = {\n  tax: 0.25\n};\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * magic.tax);\n```\n\nExamples of **correct** code for the `{ \"detectObjects\": true }` option:\n\n```js\n/*eslint no-magic-numbers: [\"error\", { \"detectObjects\": true }]*/\n\nvar TAX = 0.25;\n\nvar magic = {\n  tax: TAX\n};\n\nvar dutyFreePrice = 100,\n    finalPrice = dutyFreePrice + (dutyFreePrice * magic.tax);\n```\n"
	],
	[
		"no-misleading-character-class",
		"# Disallow characters which are made with multiple code points in character class syntax (no-misleading-character-class)\n\nUnicode includes the characters which are made with multiple code points.\nRegExp character class syntax (`/[abc]/`) cannot handle characters which are made by multiple code points as a character; those characters will be dissolved to each code point. For example, `❇️` is made by `❇` (`U+2747`) and VARIATION SELECTOR-16 (`U+FE0F`). If this character is in RegExp character class, it will match to either `❇` (`U+2747`) or VARIATION SELECTOR-16 (`U+FE0F`) rather than `❇️`.\n\nThis rule reports the regular expressions which include multiple code point characters in character class syntax. This rule considers the following characters as multiple code point characters.\n\n**A character with combining characters:**\n\nThe combining characters are characters which belong to one of `Mc`, `Me`, and `Mn` [Unicode general categories](http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category).\n\n```js\n/^[Á]$/u.test(\"Á\") //→ false\n/^[❇️]$/u.test(\"❇️\") //→ false\n```\n\n**A character with Emoji modifiers:**\n\n```js\n/^[👶🏻]$/u.test(\"👶🏻\") //→ false\n/^[👶🏽]$/u.test(\"👶🏽\") //→ false\n```\n\n**A pair of regional indicator symbols:**\n\n```js\n/^[🇯🇵]$/u.test(\"🇯🇵\") //→ false\n```\n\n**Characters that ZWJ joins:**\n\n```js\n/^[👨‍👩‍👦]$/u.test(\"👨‍👩‍👦\") //→ false\n```\n\n**A surrogate pair without Unicode flag:**\n\n```js\n/^[👍]$/.test(\"👍\") //→ false\n\n// Surrogate pair is OK if with u flag.\n/^[👍]$/u.test(\"👍\") //→ true\n```\n\n## Rule Details\n\nThis rule reports the regular expressions which include multiple code point characters in character class syntax.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-misleading-character-class: error */\n\n/^[Á]$/u\n/^[❇️]$/u\n/^[👶🏻]$/u\n/^[🇯🇵]$/u\n/^[👨‍👩‍👦]$/u\n/^[👍]$/\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-misleading-character-class: error */\n\n/^[abc]$/\n/^[👍]$/u\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you don't want to check RegExp character class syntax for multiple code point characters.\n"
	],
	[
		"no-mixed-operators",
		"# Disallow mixes of different operators (no-mixed-operators)\n\nEnclosing complex expressions by parentheses clarifies the developer's intention, which makes the code more readable.\nThis rule warns when different operators are used consecutively without parentheses in an expression.\n\n```js\nvar foo = a && b || c || d;    /*BAD: Unexpected mix of '&&' and '||'.*/\nvar foo = a && b ? c : d;      /*BAD: Unexpected mix of '&&' and '?:'.*/\nvar foo = (a && b) ? c : d;    /*GOOD*/\nvar foo = (a && b) || c || d;  /*GOOD*/\nvar foo = a && (b || c || d);  /*GOOD*/\n```\n\n**Note:**\nIt is expected for this rule to emit one error for each mixed operator in a pair. As a result, for each two consecutive mixed operators used, a distinct error will be displayed, pointing to where the specific operator that breaks the rule is used:\n\n```js\nvar foo = a && b || c || d;\n```\n\nwill generate\n\n```sh\n1:13  Unexpected mix of '&&' and '||'. (no-mixed-operators)\n1:18  Unexpected mix of '&&' and '||'. (no-mixed-operators)\n```\n\n```js\nvar foo = a && b ? c : d;\n```\n\nwill generate\n\n```sh\n1:13  Unexpected mix of '&&' and '?:'. (no-mixed-operators)\n1:18  Unexpected mix of '&&' and '?:'. (no-mixed-operators)\n```\n\n\n## Rule Details\n\nThis rule checks `BinaryExpression`, `LogicalExpression` and `ConditionalExpression`.\n\nThis rule may conflict with [no-extra-parens](no-extra-parens.md) rule.\nIf you use both this and [no-extra-parens](no-extra-parens.md) rule together, you need to use the `nestedBinaryExpressions` option of [no-extra-parens](no-extra-parens.md) rule.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-mixed-operators: \"error\"*/\n\nvar foo = a && b < 0 || c > 0 || d + 1 === 0;\nvar foo = a + b * c;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-mixed-operators: \"error\"*/\n\nvar foo = a || b || c;\nvar foo = a && b && c;\nvar foo = (a && b < 0) || c > 0 || d + 1 === 0;\nvar foo = a && (b < 0 || c > 0 || d + 1 === 0);\nvar foo = a + (b * c);\nvar foo = (a + b) * c;\n```\n\n## Options\n\n```json\n{\n    \"no-mixed-operators\": [\n        \"error\",\n        {\n            \"groups\": [\n                [\"+\", \"-\", \"*\", \"/\", \"%\", \"**\"],\n                [\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"],\n                [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n                [\"&&\", \"||\"],\n                [\"in\", \"instanceof\"]\n            ],\n            \"allowSamePrecedence\": true\n        }\n    ]\n}\n```\n\nThis rule has 2 options.\n\n* `groups` (`string[][]`) - specifies operator groups to be checked. The `groups` option is a list of groups, and a group is a list of binary operators. Default operator groups are defined as arithmetic, bitwise, comparison, logical, and relational operators. Note: Ternary operator(?:) can be part of any group and by default is allowed to be mixed with other operators.\n\n* `allowSamePrecedence` (`boolean`) - specifies whether to allow mixed operators if they are of equal precedence. Default is `true`.\n\n### groups\n\nThe following operators can be used in `groups` option:\n\n* Arithmetic Operators: `\"+\"`, `\"-\"`, `\"*\"`, `\"/\"`, `\"%\"`, `\"**\"`\n* Bitwise Operators: `\"&\"`, `\"|\"`, `\"^\"`, `\"~\"`, `\"<<\"`, `\">>\"`, `\">>>\"`\n* Comparison Operators: `\"==\"`, `\"!=\"`, `\"===\"`, `\"!==\"`, `\">\"`, `\">=\"`, `\"<\"`, `\"<=\"`\n* Logical Operators: `\"&&\"`, `\"||\"`\n* Relational Operators: `\"in\"`, `\"instanceof\"`\n* Ternary Operator: `?:`\n\nNow, consider the following group configuration: `{\"groups\": [[\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"], [\"&&\", \"||\"]]}`.\nThere are 2 groups specified in this configuration: bitwise operators and logical operators.\nThis rule checks if the operators belong to the same group only.\nIn this case, this rule checks if bitwise operators and logical operators are mixed, but ignores all other operators.\n\nExamples of **incorrect** code for this rule with `{\"groups\": [[\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"], [\"&&\", \"||\"]]}` option:\n\n```js\n/*eslint no-mixed-operators: [\"error\", {\"groups\": [[\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"], [\"&&\", \"||\"]]}]*/\n\nvar foo = a && b < 0 || c > 0 || d + 1 === 0;\nvar foo = a & b | c;\n```\n\n```js\n/*eslint no-mixed-operators: [\"error\", {\"groups\": [[\"&&\", \"||\", \"?:\"]]}]*/\n\nvar foo = a || b ? c : d;\n```\n\nExamples of **correct** code for this rule with `{\"groups\": [[\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"], [\"&&\", \"||\"]]}` option:\n\n```js\n/*eslint no-mixed-operators: [\"error\", {\"groups\": [[\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"], [\"&&\", \"||\"]]}]*/\n\nvar foo = a || b > 0 || c + 1 === 0;\nvar foo = a && b > 0 && c + 1 === 0;\nvar foo = (a && b < 0) || c > 0 || d + 1 === 0;\nvar foo = a && (b < 0 ||  c > 0 || d + 1 === 0);\nvar foo = (a & b) | c;\nvar foo = a & (b | c);\nvar foo = a + b * c;\nvar foo = a + (b * c);\nvar foo = (a + b) * c;\n```\n\n```js\n/*eslint no-mixed-operators: [\"error\", {\"groups\": [[\"&&\", \"||\", \"?:\"]]}]*/\n\nvar foo = (a || b) ? c : d;\nvar foo = a || (b ? c : d);\n```\n\n### allowSamePrecedence\n\nExamples of **correct** code for this rule with `{\"allowSamePrecedence\": true}` option:\n\n```js\n/*eslint no-mixed-operators: [\"error\", {\"allowSamePrecedence\": true}]*/\n\n// + and - have the same precedence.\nvar foo = a + b - c;\n```\n\nExamples of **incorrect** code for this rule with `{\"allowSamePrecedence\": false}` option:\n\n```js\n/*eslint no-mixed-operators: [\"error\", {\"allowSamePrecedence\": false}]*/\n\n// + and - have the same precedence.\nvar foo = a + b - c;\n```\n\nExamples of **correct** code for this rule with `{\"allowSamePrecedence\": false}` option:\n\n```js\n/*eslint no-mixed-operators: [\"error\", {\"allowSamePrecedence\": false}]*/\n\n// + and - have the same precedence.\nvar foo = (a + b) - c;\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about mixed operators, then it's safe to disable this rule.\n\n## Related Rules\n\n* [no-extra-parens](no-extra-parens.md)\n"
	],
	[
		"no-mixed-requires",
		"# disallow `require` calls to be mixed with regular variable declarations (no-mixed-requires)\n\nIn the Node.js community it is often customary to separate initializations with calls to `require` modules from other variable declarations, sometimes also grouping them by the type of module. This rule helps you enforce this convention.\n\n## Rule Details\n\nWhen this rule is enabled, each `var` statement must satisfy the following conditions:\n\n* either none or all variable declarations must be require declarations (default)\n* all require declarations must be of the same type (grouping)\n\nThis rule distinguishes between six kinds of variable declaration types:\n\n* `core`: declaration of a required [core module][1]\n* `file`: declaration of a required [file module][2]\n* `module`: declaration of a required module from the [node_modules folder][3]\n* `computed`: declaration of a required module whose type could not be determined (either because it is computed or because require was called without an argument)\n* `uninitialized`: a declaration that is not initialized\n* `other`: any other kind of declaration\n\nIn this document, the first four types are summed up under the term *require declaration*.\n\n```js\nvar fs = require('fs'),        // \"core\"     \\\n    async = require('async'),  // \"module\"   |- these are \"require declaration\"s\n    foo = require('./foo'),    // \"file\"     |\n    bar = require(getName()),  // \"computed\" /\n    baz = 42,                  // \"other\"\n    bam;                       // \"uninitialized\"\n```\n\n## Options\n\nThis rule can have an object literal option whose two properties have `false` values by default.\n\nConfiguring this rule with one boolean option `true` is deprecated.\n\nExamples of **incorrect** code for this rule with the default `{ \"grouping\": false, \"allowCall\": false }` options:\n\n```js\n/*eslint no-mixed-requires: \"error\"*/\n\nvar fs = require('fs'),\n    i = 0;\n\nvar async = require('async'),\n    debug = require('diagnostics').someFunction('my-module'),\n    eslint = require('eslint');\n```\n\nExamples of **correct** code for this rule with the default `{ \"grouping\": false, \"allowCall\": false }` options:\n\n```js\n/*eslint no-mixed-requires: \"error\"*/\n\n// only require declarations (grouping off)\nvar eventEmitter = require('events').EventEmitter,\n    myUtils = require('./utils'),\n    util = require('util'),\n    bar = require(getBarModuleName());\n\n// only non-require declarations\nvar foo = 42,\n    bar = 'baz';\n\n// always valid regardless of grouping because all declarations are of the same type\nvar foo = require('foo' + VERSION),\n    bar = require(getBarModuleName()),\n    baz = require();\n```\n\n### grouping\n\nExamples of **incorrect** code for this rule with the `{ \"grouping\": true }` option:\n\n```js\n/*eslint no-mixed-requires: [\"error\", { \"grouping\": true }]*/\n\n// invalid because of mixed types \"core\" and \"module\"\nvar fs = require('fs'),\n    async = require('async');\n\n// invalid because of mixed types \"file\" and \"unknown\"\nvar foo = require('foo'),\n    bar = require(getBarModuleName());\n```\n\n### allowCall\n\nExamples of **incorrect** code for this rule with the `{ \"allowCall\": true }` option:\n\n```js\n/*eslint no-mixed-requires: [\"error\", { \"allowCall\": true }]*/\n\nvar async = require('async'),\n    debug = require('diagnostics').someFunction('my-module'), /* allowCall doesn't allow calling any function */\n    eslint = require('eslint');\n```\n\nExamples of **correct** code for this rule with the `{ \"allowCall\": true }` option:\n\n```js\n/*eslint no-mixed-requires: [\"error\", { \"allowCall\": true }]*/\n\nvar async = require('async'),\n    debug = require('diagnostics')('my-module'),\n    eslint = require('eslint');\n```\n\n## Known Limitations\n\n* The implementation is not aware of any local functions with the name `require` that may shadow Node.js' global `require`.\n\n* Internally, the list of core modules is retrieved via `require(\"repl\")._builtinLibs`. If you use different versions of Node.js for ESLint and your application, the list of core modules for each version may be different.\n  The above mentioned `_builtinLibs` property became available in 0.8, for earlier versions a hardcoded list of module names is used as a fallback. If your version of Node.js is older than 0.6 that list may be inaccurate.\n\n## When Not To Use It\n\nIf you use a pattern such as [UMD][4] where the `require`d modules are not loaded in variable declarations, this rule will obviously do nothing for you.\n\n[1]: https://nodejs.org/api/modules.html#modules_core_modules\n[2]: https://nodejs.org/api/modules.html#modules_file_modules\n[3]: https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\n[4]: https://github.com/umdjs/umd\n"
	],
	[
		"no-mixed-spaces-and-tabs",
		"# disallow mixed spaces and tabs for indentation (no-mixed-spaces-and-tabs)\n\nMost code conventions require either tabs or spaces be used for indentation. As such, it's usually an error if a single line of code is indented with both tabs and spaces.\n\n## Rule Details\n\nThis rule disallows mixed spaces and tabs for indentation.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-mixed-spaces-and-tabs: \"error\"*/\n\nfunction add(x, y) {\n// --->..return x + y;\n\n      return x + y;\n}\n\nfunction main() {\n// --->var x = 5,\n// --->....y = 7;\n\n    var x = 5,\n        y = 7;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-mixed-spaces-and-tabs: \"error\"*/\n\nfunction add(x, y) {\n// --->return x + y;\n    return x + y;\n}\n```\n\n## Options\n\nThis rule has a string option.\n\n* `\"smart-tabs\"` allows mixed tabs and spaces when the spaces are used for alignment.\n\n### smart-tabs\n\nExamples of **correct** code for this rule with the `\"smart-tabs\"` option:\n\n```js\n/*eslint no-mixed-spaces-and-tabs: [\"error\", \"smart-tabs\"]*/\n\nfunction main() {\n// --->var x = 5,\n// --->....y = 7;\n\n    var x = 5,\n        y = 7;\n}\n```\n\n\n## Further Reading\n\n* [Smart Tabs](https://www.emacswiki.org/emacs/SmartTabs)\n"
	],
	[
		"no-multi-assign",
		"# Disallow Use of Chained Assignment Expressions (no-multi-assign)\n\nChaining the assignment of variables can lead to unexpected results and be difficult to read.\n\n```js\na = b = c = d;\n```\n\n## Rule Details\n\nThis rule disallows using multiple assignments within a single statement.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-multi-assign: \"error\"*/\n\nvar a = b = c = 5;\n\nvar foo = bar = \"baz\";\n\nvar a =\n    b =\n    c;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-multi-assign: \"error\"*/\nvar a = 5;\nvar b = 5;\nvar c = 5;\n\nvar foo = \"baz\";\nvar bar = \"baz\";\n\nvar a = c;\nvar b = c;\n```\n\n## Related Rules\n\n* [max-statements-per-line](max-statements-per-line.md)\n"
	],
	[
		"no-multi-spaces",
		"# Disallow multiple spaces (no-multi-spaces)\n\nMultiple spaces in a row that are not used for indentation are typically mistakes. For example:\n\n```js\n\nif(foo  === \"bar\") {}\n\n```\n\nIt's hard to tell, but there are two spaces between `foo` and `===`. Multiple spaces such as this are generally frowned upon in favor of single spaces:\n\n```js\n\nif(foo === \"bar\") {}\n\n```\n\n## Rule Details\n\nThis rule aims to disallow multiple whitespace around logical expressions, conditional expressions, declarations, array elements, object properties, sequences and function parameters.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-multi-spaces: \"error\"*/\n\nvar a =  1;\n\nif(foo   === \"bar\") {}\n\na <<  b\n\nvar arr = [1,  2];\n\na ?  b: c\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-multi-spaces: \"error\"*/\n\nvar a = 1;\n\nif(foo === \"bar\") {}\n\na << b\n\nvar arr = [1, 2];\n\na ? b: c\n```\n\n## Options\n\nThis rule's configuration consists of an object with the following properties:\n\n* `\"ignoreEOLComments\": true` (defaults to `false`) ignores multiple spaces before comments that occur at the end of lines\n* `\"exceptions\": { \"Property\": true }` (`\"Property\"` is the only node specified by default) specifies nodes to ignore\n\n### ignoreEOLComments\n\nExamples of **incorrect** code for this rule with the `{ \"ignoreEOLComments\": false }` (default) option:\n\n```js\n/*eslint no-multi-spaces: [\"error\", { ignoreEOLComments: false }]*/\n\nvar x = 5;      // comment\nvar x = 5;      /* multiline\n * comment\n */\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreEOLComments\": false }` (default) option:\n\n```js\n/*eslint no-multi-spaces: [\"error\", { ignoreEOLComments: false }]*/\n\nvar x = 5; // comment\nvar x = 5; /* multiline\n * comment\n */\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreEOLComments\": true }` option:\n\n```js\n/*eslint no-multi-spaces: [\"error\", { ignoreEOLComments: true }]*/\n\nvar x = 5; // comment\nvar x = 5;      // comment\nvar x = 5; /* multiline\n * comment\n */\nvar x = 5;      /* multiline\n * comment\n */\n```\n\n### exceptions\n\nTo avoid contradictions with other rules that require multiple spaces, this rule has an `exceptions` option to ignore certain nodes.\n\nThis option is an object that expects property names to be AST node types as defined by [ESTree](https://github.com/estree/estree). The easiest way to determine the node types for `exceptions` is to use the [online demo](https://eslint.org/parser).\n\nOnly the `Property` node type is ignored by default, because for the [key-spacing](key-spacing.md) rule some alignment options require multiple spaces in properties of object literals.\n\nExamples of **correct** code for the default `\"exceptions\": { \"Property\": true }` option:\n\n```js\n/*eslint no-multi-spaces: \"error\"*/\n/*eslint key-spacing: [\"error\", { align: \"value\" }]*/\n\nvar obj = {\n    first:  \"first\",\n    second: \"second\"\n};\n```\n\nExamples of **incorrect** code for the `\"exceptions\": { \"Property\": false }` option:\n\n```js\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"Property\": false } }]*/\n/*eslint key-spacing: [\"error\", { align: \"value\" }]*/\n\nvar obj = {\n    first:  \"first\",\n    second: \"second\"\n};\n```\n\nExamples of **correct** code for the `\"exceptions\": { \"BinaryExpression\": true }` option:\n\n```js\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"BinaryExpression\": true } }]*/\n\nvar a = 1  *  2;\n```\n\nExamples of **correct** code for the `\"exceptions\": { \"VariableDeclarator\": true }` option:\n\n```js\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"VariableDeclarator\": true } }]*/\n\nvar someVar      = 'foo';\nvar someOtherVar = 'barBaz';\n```\n\nExamples of **correct** code for the `\"exceptions\": { \"ImportDeclaration\": true }` option:\n\n```js\n/*eslint no-multi-spaces: [\"error\", { exceptions: { \"ImportDeclaration\": true } }]*/\n\nimport mod          from 'mod';\nimport someOtherMod from 'some-other-mod';\n```\n\n## When Not To Use It\n\nIf you don't want to check and disallow multiple spaces, then you should turn this rule off.\n\n## Related Rules\n\n* [key-spacing](key-spacing.md)\n* [space-infix-ops](space-infix-ops.md)\n* [space-in-brackets](space-in-brackets.md) (deprecated)\n* [space-in-parens](space-in-parens.md)\n* [space-after-keywords](space-after-keywords.md)\n* [space-unary-ops](space-unary-ops.md)\n* [space-return-throw-case](space-return-throw-case.md)\n"
	],
	[
		"no-multi-str",
		"# Disallow Multiline Strings (no-multi-str)\n\nIt's possible to create multiline strings in JavaScript by using a slash before a newline, such as:\n\n```js\nvar x = \"Line 1 \\\n         Line 2\";\n```\n\nSome consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.\n\n## Rule Details\n\nThis rule is aimed at preventing the use of multiline strings.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-multi-str: \"error\"*/\nvar x = \"Line 1 \\\n         Line 2\";\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-multi-str: \"error\"*/\n\nvar x = \"Line 1\\n\" +\n        \"Line 2\";\n```\n"
	],
	[
		"no-multiple-empty-lines",
		"# disallow multiple empty lines (no-multiple-empty-lines)\n\nSome developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.\n\n## Rule Details\n\nThis rule aims to reduce the scrolling required when reading through your code. It will warn when the maximum amount of empty lines has been exceeded.\n\n## Options\n\nThis rule has an object option:\n\n* `\"max\"` (default: `2`) enforces a maximum number of consecutive empty lines.\n* `\"maxEOF\"` enforces a maximum number of consecutive empty lines at the end of files.\n* `\"maxBOF\"` enforces a maximum number of consecutive empty lines at the beginning of files.\n\n### max\n\nExamples of **incorrect** code for this rule with the default `{ \"max\": 2 }` option:\n\n```js\n/*eslint no-multiple-empty-lines: \"error\"*/\n\nvar foo = 5;\n\n\n\nvar bar = 3;\n```\n\nExamples of **correct** code for this rule with the default `{ \"max\": 2 }` option:\n\n```js\n/*eslint no-multiple-empty-lines: \"error\"*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n```\n\n### maxEOF\n\nExamples of **incorrect** code for this rule with the `{ max: 2, maxEOF: 1 }` options:\n\n```js\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxEOF\": 1 }]*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n\n\n```\n\nExamples of **correct** code for this rule with the `{ max: 2, maxEOF: 1 }` options:\n\n```js\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxEOF\": 1 }]*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n\n```\n\n### maxBOF\n\nExamples of **incorrect** code for this rule with the `{ max: 2, maxBOF: 1 }` options:\n\n```js\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxBOF\": 1 }]*/\n\n\nvar foo = 5;\n\n\nvar bar = 3;\n```\n\nExamples of **correct** code for this rule with the `{ max: 2, maxBOF: 1 }` options:\n\n```js\n/*eslint no-multiple-empty-lines: [\"error\", { \"max\": 2, \"maxBOF\": 1}]*/\n\nvar foo = 5;\n\n\nvar bar = 3;\n```\n\n## When Not To Use It\n\nIf you do not care about extra blank lines, turn this off.\n"
	],
	[
		"no-native-reassign",
		"# Disallow Reassignment of Native Objects (no-native-reassign)\n\nThis rule was **deprecated** in ESLint v3.3.0 and replaced by the [no-global-assign](no-global-assign.md) rule.\n\nJavaScript environments contain a number of built-in global variables, such as `window` in browsers and `process` in Node.js. In almost all cases, you don't want to assign a value to these global variables as doing so could result in losing access to important functionality. For example, you probably don't want to do this in browser code:\n\n```js\nwindow = {};\n```\n\nWhile examples such as `window` are obvious, there are often hundreds of built-in global objects provided by JavaScript environments. It can be hard to know if you're assigning to a global variable or not.\n\n## Rule Details\n\nThis rule disallows modifications to read-only global variables.\n\nESLint has the capability to configure global variables as read-only.\n\n* [Specifying Environments](../user-guide/configuring#specifying-environments)\n* [Specifying Globals](../user-guide/configuring#specifying-globals)\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-native-reassign: \"error\"*/\n\nObject = null\nundefined = 1\n```\n\n```js\n/*eslint no-native-reassign: \"error\"*/\n/*eslint-env browser*/\n\nwindow = {}\nlength = 1\ntop = 1\n```\n\n```js\n/*eslint no-native-reassign: \"error\"*/\n/*global a:readonly*/\n\na = 1\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-native-reassign: \"error\"*/\n\na = 1\nvar b = 1\nb = 2\n```\n\n```js\n/*eslint no-native-reassign: \"error\"*/\n/*eslint-env browser*/\n\nonload = function() {}\n```\n\n```js\n/*eslint no-native-reassign: \"error\"*/\n/*global a:writable*/\n\na = 1\n```\n\n## Options\n\nThis rule accepts an `exceptions` option, which can be used to specify a list of builtins for which reassignments will be allowed:\n\n```json\n{\n    \"rules\": {\n        \"no-native-reassign\": [\"error\", {\"exceptions\": [\"Object\"]}]\n    }\n}\n```\n\n## When Not To Use It\n\nIf you are trying to override one of the native objects.\n\n## Related Rules\n\n* [no-extend-native](no-extend-native.md)\n* [no-redeclare](no-redeclare.md)\n* [no-shadow](no-shadow.md)\n"
	],
	[
		"no-negated-condition",
		"# disallow negated conditions (no-negated-condition)\n\nNegated conditions are more difficult to understand. Code can be made more readable by inverting the condition instead.\n\n## Rule Details\n\nThis rule disallows negated conditions in either of the following:\n\n* `if` statements which have an `else` branch\n* ternary expressions\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-negated-condition: \"error\"*/\n\nif (!a) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif (a != b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\nif (a !== b) {\n    doSomething();\n} else {\n    doSomethingElse();\n}\n\n!a ? c : b\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-negated-condition: \"error\"*/\n\nif (!a) {\n    doSomething();\n}\n\nif (!a) {\n    doSomething();\n} else if (b) {\n    doSomething();\n}\n\nif (a != b) {\n    doSomething();\n}\n\na ? b : c\n```\n"
	],
	[
		"no-negated-in-lhs",
		"# disallow negating the left operand in `in` expressions (no-negated-in-lhs)\n\nThis rule was **deprecated** in ESLint v3.3.0 and replaced by the [no-unsafe-negation](no-unsafe-negation.md) rule.\n\n## Rule Details\n\nJust as developers might type `-a + b` when they mean `-(a + b)` for the negative of a sum, they might type `!key in object` by mistake when they almost certainly mean `!(key in object)` to test that a key is not in an object.\n\n## Rule Details\n\nThis rule disallows negating the left operand in `in` expressions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-negated-in-lhs: \"error\"*/\n\nif(!key in object) {\n    // operator precedence makes it equivalent to (!key) in object\n    // and type conversion makes it equivalent to (key ? \"false\" : \"true\") in object\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-negated-in-lhs: \"error\"*/\n\nif(!(key in object)) {\n    // key is not in object\n}\n\nif(('' + !key) in object) {\n    // make operator precedence and type conversion explicit\n    // in a rare situation when that is the intended meaning\n}\n```\n\n## When Not To Use It\n\nNever.\n"
	],
	[
		"no-nested-ternary",
		"# disallow nested ternary expressions (no-nested-ternary)\n\nNesting ternary expressions can make code more difficult to understand.\n\n```js\nvar foo = bar ? baz : qux === quxx ? bing : bam;\n```\n\n## Rule Details\n\nThe `no-nested-ternary` rule disallows nested ternary expressions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-nested-ternary: \"error\"*/\n\nvar thing = foo ? bar : baz === qux ? quxx : foobar;\n\nfoo ? baz === qux ? quxx() : foobar() : bar();\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-nested-ternary: \"error\"*/\n\nvar thing = foo ? bar : foobar;\n\nvar thing;\n\nif (foo) {\n  thing = bar;\n} else if (baz === qux) {\n  thing = quxx;\n} else {\n  thing = foobar;\n}\n```\n\n## Related Rules\n\n* [no-ternary](no-ternary.md)\n* [no-unneeded-ternary](no-unneeded-ternary.md)\n"
	],
	[
		"no-new",
		"# Disallow new For Side Effects (no-new)\n\nThe goal of using `new` with a constructor is typically to create an object of a particular type and store that object in a variable, such as:\n\n```js\nvar person = new Person();\n```\n\nIt's less common to use `new` and not store the result, such as:\n\n```js\nnew Person();\n```\n\nIn this case, the created object is thrown away because its reference isn't stored anywhere, and in many cases, this means that the constructor should be replaced with a function that doesn't require `new` to be used.\n\n## Rule Details\n\nThis rule is aimed at maintaining consistency and convention by disallowing constructor calls using the `new` keyword that do not assign the resulting object to a variable.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new: \"error\"*/\n\nnew Thing();\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new: \"error\"*/\n\nvar thing = new Thing();\n\nThing();\n```\n"
	],
	[
		"no-new-func",
		"# Disallow Function Constructor (no-new-func)\n\nIt's possible to create functions in JavaScript using the `Function` constructor, such as:\n\n```js\nvar x = new Function(\"a\", \"b\", \"return a + b\");\n```\n\nThis is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions.\n\n## Rule Details\n\nThis error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the `eval` function.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new-func: \"error\"*/\n\nvar x = new Function(\"a\", \"b\", \"return a + b\");\nvar x = Function(\"a\", \"b\", \"return a + b\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new-func: \"error\"*/\n\nvar x = function (a, b) {\n    return a + b;\n};\n```\n\n## When Not To Use It\n\nIn more advanced cases where you really need to use the `Function` constructor.\n"
	],
	[
		"no-new-object",
		"# disallow `Object` constructors (no-new-object)\n\nThe `Object` constructor is used to create new generic objects in JavaScript, such as:\n\n```js\nvar myObject = new Object();\n```\n\nHowever, this is no different from using the more concise object literal syntax:\n\n```js\nvar myObject = {};\n```\n\nFor this reason, many prefer to always use the object literal syntax and never use the `Object` constructor.\n\nWhile there are no performance differences between the two approaches, the byte savings and conciseness of the object literal form is what has made it the de facto way of creating new objects.\n\n## Rule Details\n\nThis rule disallows `Object` constructors.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new-object: \"error\"*/\n\nvar myObject = new Object();\n\nvar myObject = new Object;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new-object: \"error\"*/\n\nvar myObject = new CustomObject();\n\nvar myObject = {};\n```\n\n## When Not To Use It\n\nIf you wish to allow the use of the `Object` constructor, you can safely turn this rule off.\n\n## Related Rules\n\n* [no-array-constructor](no-array-constructor.md)\n* [no-new-wrappers](no-new-wrappers.md)\n"
	],
	[
		"no-new-require",
		"# Disallow new require (no-new-require)\n\nThe `require` function is used to include modules that exist in separate files, such as:\n\n```js\nvar appHeader = require('app-header');\n```\n\nSome modules return a constructor which can potentially lead to code such as:\n\n```js\nvar appHeader = new require('app-header');\n```\n\nUnfortunately, this introduces a high potential for confusion since the code author likely meant to write:\n\n```js\nvar appHeader = new (require('app-header'));\n```\n\nFor this reason, it is usually best to disallow this particular expression.\n\n## Rule Details\n\nThis rule aims to eliminate use of the `new require` expression.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new-require: \"error\"*/\n\nvar appHeader = new require('app-header');\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new-require: \"error\"*/\n\nvar AppHeader = require('app-header');\nvar appHeader = new AppHeader();\n```\n\n## When Not To Use It\n\nIf you are using a custom implementation of `require` and your code will never be used in projects where a standard `require` (CommonJS, Node.js, AMD) is expected, you can safely turn this rule off.\n"
	],
	[
		"no-new-symbol",
		"# Disallow Symbol Constructor (no-new-symbol)\n\n`Symbol` is not intended to be used with the `new` operator, but to be called as a function.\n\n```js\nvar foo = new Symbol(\"foo\");\n```\n\nThis throws a `TypeError` exception.\n\n## Rule Details\n\nThis rule is aimed at preventing the accidental calling of `Symbol` with the `new` operator.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new-symbol: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = new Symbol('foo');\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new-symbol: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = Symbol('foo');\n\n\n// Ignores shadowed Symbol.\nfunction bar(Symbol) {\n    const baz = new Symbol(\"baz\");\n}\n\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\n## Further Reading\n\n* [Symbol Objects specification](https://www.ecma-international.org/ecma-262/6.0/#sec-symbol-objects)\n"
	],
	[
		"no-new-wrappers",
		"# Disallow Primitive Wrapper Instances (no-new-wrappers)\n\nThere are three primitive types in JavaScript that have wrapper objects: string, number, and boolean. These are represented by the constructors `String`, `Number`, and `Boolean`, respectively. The primitive wrapper types are used whenever one of these primitive values is read, providing them with object-like capabilities such as methods. Behind the scenes, an object of the associated wrapper type is created and then destroyed, which is why you can call methods on primitive values, such as:\n\n```js\nvar text = \"Hello world\".substring(2);\n```\n\nBehind the scenes in this example, a `String` object is constructed. The `substring()` method exists on `String.prototype` and so is accessible to the string instance.\n\nIt's also possible to manually create a new wrapper instance:\n\n```js\nvar stringObject = new String(\"Hello world\");\nvar numberObject = new Number(33);\nvar booleanObject = new Boolean(false);\n```\n\nAlthough possible, there aren't any good reasons to use these primitive wrappers as constructors. They tend to confuse other developers more than anything else because they seem like they should act as primitives, but they do not. For example:\n\n```js\nvar stringObject = new String(\"Hello world\");\nconsole.log(typeof stringObject);       // \"object\"\n\nvar text = \"Hello world\";\nconsole.log(typeof text);               // \"string\"\n\nvar booleanObject = new Boolean(false);\nif (booleanObject) {    // all objects are truthy!\n    console.log(\"This executes\");\n}\n```\n\nThe first problem is that primitive wrapper objects are, in fact, objects. That means `typeof` will return `\"object\"` instead of `\"string\"`, `\"number\"`, or `\"boolean\"`. The second problem comes with boolean objects. Every object is truthy, that means an instance of `Boolean` always resolves to `true` even when its actual value is `false`.\n\nFor these reasons, it's considered a best practice to avoid using primitive wrapper types with `new`.\n\n## Rule Details\n\nThis rule aims to eliminate the use of `String`, `Number`, and `Boolean` with the `new` operator. As such, it warns whenever it sees `new String`, `new Number`, or `new Boolean`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-new-wrappers: \"error\"*/\n\nvar stringObject = new String(\"Hello world\");\nvar numberObject = new Number(33);\nvar booleanObject = new Boolean(false);\n\nvar stringObject = new String;\nvar numberObject = new Number;\nvar booleanObject = new Boolean;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-new-wrappers: \"error\"*/\n\nvar text = String(someValue);\nvar num = Number(someValue);\n\nvar object = new MyString();\n```\n\n## When Not To Use It\n\nIf you want to allow the use of primitive wrapper objects, then you can safely disable this rule.\n\n## Further Reading\n\n* [Wrapper objects](https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-3/wrapper-objects)\n\n## Related Rules\n\n* [no-array-constructor](no-array-constructor.md)\n* [no-new-object](no-new-object.md)\n"
	],
	[
		"no-obj-calls",
		"# disallow calling global object properties as functions (no-obj-calls)\n\nECMAScript provides several global objects that are intended to be used as-is. Some of these objects look as if they could be constructors due their capitalization (such as `Math` and `JSON`) but will throw an error if you try to execute them as functions.\n\nThe [ECMAScript 5 specification](https://es5.github.io/#x15.8) makes it clear that both `Math` and `JSON` cannot be invoked:\n\n> The Math object does not have a `[[Call]]` internal property; it is not possible to invoke the Math object as a function.\n\nAnd the [ECMAScript 2015 specification](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object) makes it clear that `Reflect` cannot be invoked:\n\n> The Reflect object also does not have a `[[Call]]` internal method; it is not possible to invoke the Reflect object as a function.\n\n## Rule Details\n\nThis rule disallows calling the `Math`, `JSON` and `Reflect` objects as functions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-obj-calls: \"error\"*/\n\nvar math = Math();\nvar json = JSON();\nvar reflect = Reflect();\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-obj-calls: \"error\"*/\n\nfunction area(r) {\n    return Math.PI * r * r;\n}\nvar object = JSON.parse(\"{}\");\nvar value = Reflect.get({ x: 1, y: 2 }, \"x\");\n```\n\n## Further Reading\n\n* [The Math Object](https://es5.github.io/#x15.8)\n"
	],
	[
		"no-octal",
		"# disallow octal literals (no-octal)\n\nOctal literals are numerals that begin with a leading zero, such as:\n\n```js\nvar num = 071;      // 57\n```\n\nBecause the leading zero which identifies an octal literal has been a source of confusion and error in JavaScript code, ECMAScript 5 deprecates the use of octal numeric literals.\n\n## Rule Details\n\nThe rule disallows octal literals.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-octal: \"error\"*/\n\nvar num = 071;\nvar result = 5 + 07;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-octal: \"error\"*/\n\nvar num  = \"071\";\n```\n\n## Compatibility\n\n* **JSHint**: W115\n"
	],
	[
		"no-octal-escape",
		"# disallow octal escape sequences in string literals (no-octal-escape)\n\nAs of the ECMAScript 5 specification, octal escape sequences in string literals are deprecated and should not be used. Unicode escape sequences should be used instead.\n\n```js\nvar foo = \"Copyright \\251\";\n```\n\n## Rule Details\n\nThis rule disallows octal escape sequences in string literals.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-octal-escape: \"error\"*/\n\nvar foo = \"Copyright \\251\";\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-octal-escape: \"error\"*/\n\nvar foo = \"Copyright \\u00A9\";   // unicode\n\nvar foo = \"Copyright \\xA9\";     // hexadecimal\n```\n"
	],
	[
		"no-param-reassign",
		"# Disallow Reassignment of Function Parameters (no-param-reassign)\n\nAssignment to variables declared as function parameters can be misleading and lead to confusing behavior, as modifying function parameters will also mutate the `arguments` object. Often, assignment to function parameters is unintended and indicative of a mistake or programmer error.\n\nThis rule can be also configured to fail when function parameters are modified. Side effects on parameters can cause counter-intuitive execution flow and make errors difficult to track down.\n\n## Rule Details\n\nThis rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-param-reassign: \"error\"*/\n\nfunction foo(bar) {\n    bar = 13;\n}\n\nfunction foo(bar) {\n    bar++;\n}\n\nfunction foo(bar) {\n    for (bar in baz) {}\n}\n\nfunction foo(bar) {\n    for (bar of baz) {}\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-param-reassign: \"error\"*/\n\nfunction foo(bar) {\n    var baz = bar;\n}\n```\n\n## Options\n\nThis rule takes one option, an object, with a boolean property `\"props\"` and an array `\"ignorePropertyModificationsFor\"`. `\"props\"` is `false` by default. If `\"props\"` is set to `true`, this rule warns against the modification of parameter properties unless they're included in `\"ignorePropertyModificationsFor\"`, which is an empty array by default.\n\n### props\n\nExamples of **correct** code for the default `{ \"props\": false }` option:\n\n```js\n/*eslint no-param-reassign: [\"error\", { \"props\": false }]*/\n\nfunction foo(bar) {\n    bar.prop = \"value\";\n}\n\nfunction foo(bar) {\n    delete bar.aaa;\n}\n\nfunction foo(bar) {\n    bar.aaa++;\n}\n\nfunction foo(bar) {\n    for (bar.aaa in baz) {}\n}\n\nfunction foo(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\nExamples of **incorrect** code for the `{ \"props\": true }` option:\n\n```js\n/*eslint no-param-reassign: [\"error\", { \"props\": true }]*/\n\nfunction foo(bar) {\n    bar.prop = \"value\";\n}\n\nfunction foo(bar) {\n    delete bar.aaa;\n}\n\nfunction foo(bar) {\n    bar.aaa++;\n}\n\nfunction foo(bar) {\n    for (bar.aaa in baz) {}\n}\n\nfunction foo(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\nExamples of **correct** code for the `{ \"props\": true }` option with `\"ignorePropertyModificationsFor\"` set:\n\n```js\n/*eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"bar\"] }]*/\n\nfunction foo(bar) {\n    bar.prop = \"value\";\n}\n\nfunction foo(bar) {\n    delete bar.aaa;\n}\n\nfunction foo(bar) {\n    bar.aaa++;\n}\n\nfunction foo(bar) {\n    for (bar.aaa in baz) {}\n}\n\nfunction foo(bar) {\n    for (bar.aaa of baz) {}\n}\n```\n\n\n## When Not To Use It\n\nIf you want to allow assignment to function parameters, then you can safely disable this rule.\n\n## Further Reading\n\n* [JavaScript: Don’t Reassign Your Function Arguments](https://spin.atomicobject.com/2011/04/10/javascript-don-t-reassign-your-function-arguments/)\n"
	],
	[
		"no-path-concat",
		"# Disallow string concatenation when using `__dirname` and `__filename` (no-path-concat)\n\nIn Node.js, the `__dirname` and `__filename` global variables contain the directory path and the file path of the currently executing script file, respectively. Sometimes, developers try to use these variables to create paths to other files, such as:\n\n```js\nvar fullPath = __dirname + \"/foo.js\";\n```\n\nHowever, there are a few problems with this. First, you can't be sure what type of system the script is running on. Node.js can be run on any computer, including Windows, which uses a different path separator. It's very easy, therefore, to create an invalid path using string concatenation and assuming Unix-style separators. There's also the possibility of having double separators, or otherwise ending up with an invalid path.\n\nIn order to avoid any confusion as to how to create the correct path, Node.js provides the `path` module. This module uses system-specific information to always return the correct value. So you can rewrite the previous example as:\n\n```js\nvar fullPath = path.join(__dirname, \"foo.js\");\n```\n\nThis example doesn't need to include separators as `path.join()` will do it in the most appropriate manner. Alternately, you can use `path.resolve()` to retrieve the fully-qualified path:\n\n```js\nvar fullPath = path.resolve(__dirname, \"foo.js\");\n```\n\nBoth `path.join()` and `path.resolve()` are suitable replacements for string concatenation wherever file or directory paths are being created.\n\n## Rule Details\n\nThis rule aims to prevent string concatenation of directory paths in Node.js\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-path-concat: \"error\"*/\n\nvar fullPath = __dirname + \"/foo.js\";\n\nvar fullPath = __filename + \"/foo.js\";\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-path-concat: \"error\"*/\n\nvar fullPath = dirname + \"/foo.js\";\n```\n\n## When Not To Use It\n\nIf you want to allow string concatenation of path names.\n"
	],
	[
		"no-plusplus",
		"# disallow the unary operators `++` and `--` (no-plusplus)\n\nBecause the unary `++` and `--` operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code.\n\n```js\nvar i = 10;\nvar j = 20;\n\ni ++\nj\n// i = 11, j = 20\n```\n\n```js\nvar i = 10;\nvar j = 20;\n\ni\n++\nj\n// i = 10, j = 21\n```\n\n## Rule Details\n\nThis rule disallows the unary operators `++` and `--`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-plusplus: \"error\"*/\n\nvar foo = 0;\nfoo++;\n\nvar bar = 42;\nbar--;\n\nfor (i = 0; i < l; i++) {\n    return;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-plusplus: \"error\"*/\n\nvar foo = 0;\nfoo += 1;\n\nvar bar = 42;\nbar -= 1;\n\nfor (i = 0; i < l; i += 1) {\n    return;\n}\n```\n\n## Options\n\nThis rule has an object option.\n\n* `\"allowForLoopAfterthoughts\": true` allows unary operators `++` and `--` in the afterthought (final expression) of a `for` loop.\n\n### allowForLoopAfterthoughts\n\nExamples of **correct** code for this rule with the `{ \"allowForLoopAfterthoughts\": true }` option:\n\n```js\n/*eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }]*/\n\nfor (i = 0; i < l; i++) {\n    return;\n}\n\nfor (i = 0; i < l; i--) {\n    return;\n}\n```\n"
	],
	[
		"no-process-env",
		"# Disallow process.env (no-process-env)\n\nThe `process.env` object in Node.js is used to store deployment/configuration parameters. Littering it through out a project could lead to maintenance issues as it's another kind of global dependency. As such, it could lead to merge conflicts in a multi-user setup and deployment issues in a multi-server setup. Instead, one of the best practices is to define all those parameters in a single configuration/settings file which could be accessed throughout the project.\n\n\n## Rule Details\n\nThis rule is aimed at discouraging use of `process.env` to avoid global dependencies. As such, it will warn whenever `process.env` is used.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-process-env: \"error\"*/\n\nif(process.env.NODE_ENV === \"development\") {\n    //...\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-process-env: \"error\"*/\n\nvar config = require(\"./config\");\n\nif(config.env === \"development\") {\n    //...\n}\n```\n\n## When Not To Use It\n\nIf prefer to use `process.env` throughout your project to retrieve values from environment variables, then you can safely disable this rule.\n\n## Further Reading\n\n* [How to store Node.js deployment settings/configuration files? - Stack Overflow](https://stackoverflow.com/questions/5869216/how-to-store-node-js-deployment-settings-configuration-files)\n* [Storing Node.js application config data - Ben Hall's blog](https://blog.benhall.me.uk/2012/02/storing-application-config-data-in/)\n"
	],
	[
		"no-process-exit",
		"# Disallow process.exit() (no-process-exit)\n\nThe `process.exit()` method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:\n\n```js\nif (somethingBadHappened) {\n    console.error(\"Something bad happened!\");\n    process.exit(1);\n}\n```\n\nThis code could appear in any module and will stop the entire application when `somethingBadHappened` is truthy. This doesn't give the application any chance to respond to the error. It's usually better to throw an error and allow the application to handle it appropriately:\n\n```js\nif (somethingBadHappened) {\n    throw new Error(\"Something bad happened!\");\n}\n```\n\nBy throwing an error in this way, other parts of the application have an opportunity to handle the error rather than stopping the application altogether. If the error bubbles all the way up to the process without being handled, then the process will exit and a non-zero exit code will returned, so the end result is the same.\n\nIf you are using `process.exit()` only for specifying the exit code, you can set [`process.exitCode`](https://nodejs.org/api/process.html#process_process_exitcode) (introduced in Node.js 0.11.8) instead.\n\n## Rule Details\n\nThis rule aims to prevent the use of `process.exit()` in Node.js JavaScript. As such, it warns whenever `process.exit()` is found in code.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-process-exit: \"error\"*/\n\nprocess.exit(1);\nprocess.exit(0);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-process-exit: \"error\"*/\n\nProcess.exit();\nvar exit = process.exit;\n```\n\n## When Not To Use It\n\nThere may be a part of a Node.js application that is responsible for determining the correct exit code to return upon exiting. In that case, you should turn this rule off to allow proper handling of the exit code.\n"
	],
	[
		"no-proto",
		"# Disallow Use of `__proto__` (no-proto)\n\n`__proto__` property has been deprecated as of ECMAScript 3.1 and shouldn't be used in the code. Use `Object.getPrototypeOf` and `Object.setPrototypeOf` instead.\n\n## Rule Details\n\nWhen an object is created with the `new` operator, `__proto__` is set to the original \"prototype\" property of the object's constructor function. `Object.getPrototypeOf` is the preferred method of getting the object's prototype. To change an object's prototype, use `Object.setPrototypeOf`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-proto: \"error\"*/\n\nvar a = obj.__proto__;\n\nvar a = obj[\"__proto__\"];\n\nobj.__proto__ = b;\n\nobj[\"__proto__\"] = b;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-proto: \"error\"*/\n\nvar a = Object.getPrototypeOf(obj);\n\nObject.setPrototypeOf(obj, b);\n\nvar c = { __proto__: a };\n```\n\n## When Not To Use It\n\nYou might want to turn this rule off if you need to support legacy browsers which implement the\n`__proto__` property but not `Object.getPrototypeOf` or `Object.setPrototypeOf`.\n\n## Further Reading\n\n* [Object.getPrototypeOf](http://ejohn.org/blog/objectgetprototypeof/)\n"
	],
	[
		"no-prototype-builtins",
		"# Disallow use of Object.prototypes builtins directly (no-prototype-builtins)\n\nIn ECMAScript 5.1, `Object.create` was added, which enables the creation of objects with a specified `[[Prototype]]`. `Object.create(null)` is a common pattern used to create objects that will be used as a Map. This can lead to errors when it is assumed that objects will have properties from `Object.prototype`. This rule prevents calling some `Object.prototype` methods directly from an object.\n\nAdditionally, objects can have properties that shadow the builtins on `Object.prototype`, potentially causing unintended behavior or denial-of-service security vulnerabilities. For example, it would be unsafe for a webserver to parse JSON input from a client and call `hasOwnProperty` directly on the resulting object, because a malicious client could send a JSON value like `{\"hasOwnProperty\": 1}` and cause the server to crash.\n\nTo avoid subtle bugs like this, it's better to always call these methods from `Object.prototype`. For example, `foo.hasOwnProperty(\"bar\")` should be replaced with `Object.prototype.hasOwnProperty.call(foo, \"bar\")`.\n\n## Rule Details\n\nThis rule disallows calling some `Object.prototype` methods directly on object instances.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-prototype-builtins: \"error\"*/\n\nvar hasBarProperty = foo.hasOwnProperty(\"bar\");\n\nvar isPrototypeOfBar = foo.isPrototypeOf(bar);\n\nvar barIsEnumerable = foo.propertyIsEnumerable(\"bar\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-prototype-builtins: \"error\"*/\n\nvar hasBarProperty = Object.prototype.hasOwnProperty.call(foo, \"bar\");\n\nvar isPrototypeOfBar = Object.prototype.isPrototypeOf.call(foo, bar);\n\nvar barIsEnumerable = {}.propertyIsEnumerable.call(foo, \"bar\");\n```\n\n## When Not To Use It\n\nYou may want to turn this rule off if your code only touches objects with hardcoded keys, and you will never use an object that shadows an `Object.prototype` method or which does not inherit from `Object.prototype`.\n"
	],
	[
		"no-redeclare",
		"# disallow variable redeclaration (no-redeclare)\n\nIn JavaScript, it's possible to redeclare the same variable name using `var`. This can lead to confusion as to where the variable is actually declared and initialized.\n\n## Rule Details\n\nThis rule is aimed at eliminating variables that have multiple declarations in the same scope.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\nvar a = 10;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\n// ...\na = 10;\n```\n\n## Options\n\nThis rule takes one optional argument, an object with a boolean property `\"builtinGlobals\"`. It defaults to `true`.\nIf set to `true`, this rule also checks redeclaration of built-in globals, such as `Object`, `Array`, `Number`...\n\n### builtinGlobals\n\nThe `\"builtinGlobals\"` option will check for redeclaration of built-in globals in global scope.\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option:\n\n```js\n/*eslint no-redeclare: [\"error\", { \"builtinGlobals\": true }]*/\n\nvar Object = 0;\n```\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option and the `browser` environment:\n\n```js\n/*eslint no-redeclare: [\"error\", { \"builtinGlobals\": true }]*/\n/*eslint-env browser*/\n\nvar top = 0;\n```\n\nThe `browser` environment has many built-in global variables (for example, `top`). Some of built-in global variables cannot be redeclared.\n\nNote that when using the `node` or `commonjs` environments (or `ecmaFeatures.globalReturn`, if using the default parser), the top scope of a program is not actually the global scope, but rather a \"module\" scope. When this is the case, declaring a variable named after a builtin global is not a redeclaration, but rather a shadowing of the global variable. In that case, the [`no-shadow`](no-shadow.md) rule with the `\"builtinGlobals\"` option should be used.\n\n## Related Rules\n\n* [no-shadow](no-shadow.md)\n"
	],
	[
		"no-regex-spaces",
		"# disallow multiple spaces in regular expression literals (no-regex-spaces)\n\nRegular expressions can be very complex and difficult to understand, which is why it's important to keep them as simple as possible in order to avoid mistakes. One of the more error-prone things you can do with a regular expression is to use more than one space, such as:\n\n```js\nvar re = /foo   bar/;\n```\n\nIn this regular expression, it's very hard to tell how many spaces are intended to be matched. It's better to use only one space and then specify how many spaces are expected, such as:\n\n```js\nvar re = /foo {3}bar/;\n```\n\nNow it is very clear that three spaces are expected to be matched.\n\n## Rule Details\n\nThis rule disallows multiple spaces in regular expression literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-regex-spaces: \"error\"*/\n\nvar re = /foo   bar/;\nvar re = new RegExp(\"foo   bar\");\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-regex-spaces: \"error\"*/\n\nvar re = /foo {3}bar/;\nvar re = new RegExp(\"foo {3}bar\");\n```\n\n## When Not To Use It\n\nIf you want to allow multiple spaces in a regular expression, then you can safely turn this rule off.\n\n## Related Rules\n\n* [no-div-regex](no-div-regex.md)\n* [no-control-regex](no-control-regex.md)\n"
	],
	[
		"no-restricted-globals",
		"# Disallow specific global variables (no-restricted-globals)\n\nDisallowing usage of specific global variables can be useful if you want to allow a set of global\nvariables by enabling an environment, but still want to disallow some of those.\n\nFor instance, early Internet Explorer versions exposed the current DOM event as a global variable\n`event`, but using this variable has been considered as a bad practice for a long time. Restricting\nthis will make sure this variable isn't used in browser code.\n\n## Rule Details\n\nThis rule allows you to specify global variable names that you don't want to use in your application.\n\n## Options\n\nThis rule takes a list of strings, where each string is a global to be restricted:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-globals\": [\"error\", \"event\", \"fdescribe\"]\n    }\n}\n```\n\nAlternatively, the rule also accepts objects, where the global name and an optional custom message are specified:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-globals\": [\n            \"error\",\n            {\n                \"name\": \"event\",\n                \"message\": \"Use local parameter instead.\"\n            },\n            {\n                \"name\": \"fdescribe\",\n                \"message\": \"Do not commit fdescribe. Use describe instead.\"\n            }\n        ]\n    }\n}\n```\n\nExamples of **incorrect** code for sample `\"event\", \"fdescribe\"` global variable names:\n\n```js\n/*global event, fdescribe*/\n/*eslint no-restricted-globals: [\"error\", \"event\", \"fdescribe\"]*/\n\nfunction onClick() {\n    console.log(event);\n}\n\nfdescribe(\"foo\", function() {\n});\n```\n\nExamples of **correct** code for a sample `\"event\"` global variable name:\n\n```js\n/*global event*/\n/*eslint no-restricted-globals: [\"error\", \"event\"]*/\n\nimport event from \"event-module\";\n```\n\n```js\n/*global event*/\n/*eslint no-restricted-globals: [\"error\", \"event\"]*/\n\nvar event = 1;\n```\n\nExamples of **incorrect** code for a sample `\"event\"` global variable name, along with a custom error message:\n\n```js\n/*global event*/\n/* eslint no-restricted-globals: [\"error\", { name: \"event\", message: \"Use local parameter instead.\" }] */\n\nfunction onClick() {\n    console.log(event);    // Unexpected global variable 'event'. Use local parameter instead.\n}\n```\n\n## Related Rules\n\n* [no-restricted-properties](no-restricted-properties.md)\n* [no-restricted-syntax](no-restricted-syntax.md)\n"
	],
	[
		"no-restricted-imports",
		"# Disallow specific imports (no-restricted-imports)\n\nImports are an ES6/ES2015 standard for making the functionality of other modules available in your current module. In CommonJS this is implemented through the `require()` call which makes this ESLint rule roughly equivalent to its CommonJS counterpart `no-restricted-modules`.\n\nWhy would you want to restrict imports?\n\n* Some imports might not make sense in a particular environment. For example, Node.js' `fs` module would not make sense in an environment that didn't have a file system.\n\n* Some modules provide similar or identical functionality, think `lodash` and `underscore`. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.\n\n## Rule Details\n\nThis rule allows you to specify imports that you don't want to use in your application.\n\n## Options\n\nThe syntax to specify restricted imports looks like this:\n\n```json\n\"no-restricted-imports\": [\"error\", \"import1\", \"import2\"]\n```\n\nor like this:\n\n```json\n\"no-restricted-imports\": [\"error\", { \"paths\": [\"import1\", \"import2\"] }]\n```\n\nWhen using the object form, you can also specify an array of gitignore-style patterns:\n\n```json\n\"no-restricted-imports\": [\"error\", {\n    \"paths\": [\"import1\", \"import2\"],\n    \"patterns\": [\"import1/private/*\", \"import2/*\", \"!import2/good\"]\n}]\n```\n\nYou may also specify a custom message for any paths you want to restrict as follows:\n\n```json\n\"no-restricted-imports\": [\"error\", [{\n  \"name\": \"import-foo\",\n  \"message\": \"Please use import-bar instead.\"\n}]]\n```\n\nor like this:\n\n```json\n\"no-restricted-imports\": [\"error\", {\n  \"paths\": [{\n    \"name\": \"import-foo\",\n    \"message\": \"Please use import-bar instead.\"\n  }]\n}]\n```\n\nor like this if you need to restrict only certain imports from a module:\n\n```json\n\"no-restricted-imports\": [\"error\", {\n  \"paths\": [{\n    \"name\": \"import-foo\",\n    \"importNames\": [\"Bar\"],\n    \"message\": \"Please use Bar from /import-bar/baz/ instead.\"\n  }]\n}]\n```\n\nThe custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular import may match more than one pattern.\n\nTo restrict the use of all Node.js core imports (via https://github.com/nodejs/node/tree/master/lib):\n\n```json\n    \"no-restricted-imports\": [\"error\",\n         \"assert\",\"buffer\",\"child_process\",\"cluster\",\"crypto\",\"dgram\",\"dns\",\"domain\",\"events\",\"freelist\",\"fs\",\"http\",\"https\",\"module\",\"net\",\"os\",\"path\",\"punycode\",\"querystring\",\"readline\",\"repl\",\"smalloc\",\"stream\",\"string_decoder\",\"sys\",\"timers\",\"tls\",\"tracing\",\"tty\",\"url\",\"util\",\"vm\",\"zlib\"\n    ],\n```\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nimport fs from 'fs';\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nexport { fs } from 'fs';\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nexport * from 'fs';\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { \"paths\": [\"cluster\"] }]*/\n\nimport cluster from 'cluster';\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { \"patterns\": [\"lodash/*\"] }]*/\n\nimport pick from 'lodash/pick';\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"default\"],\n    message: \"Please use the default import from '/bar/baz/' instead.\"\n}]}]*/\n\nimport DisallowedObject from \"foo\";\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"DisallowedObject\"],\n    message: \"Please import 'DisallowedObject' from '/bar/baz/' instead.\"\n}]}]*/\n\nimport { DisallowedObject as AllowedObject } from \"foo\";\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"DisallowedObject\"],\n    message: \"Please import 'DisallowedObject' from '/bar/baz/' instead.\"\n}]}]*/\n\nimport * as Foo from \"foo\";\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-restricted-imports: [\"error\", \"fs\"]*/\n\nimport crypto from 'crypto';\nexport { foo } from \"bar\";\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { \"paths\": [\"fs\"], \"patterns\": [\"eslint/*\"] }]*/\n\nimport crypto from 'crypto';\nimport eslint from 'eslint';\nexport * from \"path\";\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { paths: [{ name: \"foo\", importNames: [\"DisallowedObject\"] }] }]*/\n\nimport DisallowedObject from \"foo\"\n```\n\n```js\n/*eslint no-restricted-imports: [\"error\", { paths: [{\n    name: \"foo\",\n    importNames: [\"DisallowedObject\"],\n    message: \"Please import 'DisallowedObject' from '/bar/baz/' instead.\"\n}]}]*/\n\nimport { AllowedObject as DisallowedObject } from \"foo\";\n```\n\n## When Not To Use It\n\nDon't use this rule or don't include a module in the list for this rule if you want to be able to import a module in your project without an ESLint error or warning.\n"
	],
	[
		"no-restricted-modules",
		"# Disallow Node.js modules (no-restricted-modules)\n\nA module in Node.js is a simple or complex functionality organized in a JavaScript file which can be reused throughout the Node.js\napplication. The keyword `require` is used in Node.js/CommonJS to import modules into an application. This way you can have dynamic loading where the loaded module name isn't predefined /static, or where you conditionally load a module only if it's \"truly required\".\n\nWhy would you want to restrict a module?\n\nDisallowing usage of specific Node.js modules can be useful if you want to limit the available methods a developer can use. For example, you can block usage of the `fs` module if you want to disallow file system access.\n\n## Rule Details\n\nThis rule allows you to specify modules that you don’t want to use in your application.\n\n## Options\n\nThe rule takes one or more strings as options: the names of restricted modules.\n\n```json\n\"no-restricted-modules\": [\"error\", \"foo-module\", \"bar-module\"]\n```\n\nIt can also take an object with lists of `paths` and gitignore-style `patterns` strings.\n\n```json\n\"no-restricted-modules\": [\"error\", { \"paths\": [\"foo-module\", \"bar-module\"] }]\n```\n\n```json\n\"no-restricted-modules\": [\"error\", {\n    \"paths\": [\"foo-module\", \"bar-module\"],\n    \"patterns\": [\"foo-module/private/*\", \"bar-module/*\",\"!baz-module/good\"]\n}]\n```\n\nYou may also specify a custom message for any paths you want to restrict as follows:\n\n```json\n\"no-restricted-modules\": [\"error\", {\n  \"name\": \"foo-module\",\n  \"message\": \"Please use bar-module instead.\"\n  }\n]\n```\n\nor like this:\n\n```json\n\"no-restricted-modules\": [\"error\",{\n\"paths\":[{\n  \"name\": \"foo-module\",\n  \"message\": \"Please use bar-module instead.\"\n  }]\n}]\n```\n\nThe custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular module may match more than one pattern.\n\n\nTo restrict the use of all Node.js core modules (via https://github.com/nodejs/node/tree/master/lib):\n\n```json\n{\n    \"no-restricted-modules\": [\"error\",\n        \"assert\",\"buffer\",\"child_process\",\"cluster\",\"crypto\",\"dgram\",\"dns\",\"domain\",\"events\",\"freelist\",\"fs\",\"http\",\"https\",\"module\",\"net\",\"os\",\"path\",\"punycode\",\"querystring\",\"readline\",\"repl\",\"smalloc\",\"stream\",\"string_decoder\",\"sys\",\"timers\",\"tls\",\"tracing\",\"tty\",\"url\",\"util\",\"vm\",\"zlib\"\n    ]\n}\n```\n\n## Examples\n\nExamples of **incorrect** code for this rule  with sample `\"fs\", \"cluster\", \"lodash\"` restricted modules:\n\n```js\n/*eslint no-restricted-modules: [\"error\", \"fs\", \"cluster\"]*/\n\nvar fs = require('fs');\nvar cluster = require('cluster');\n```\n\n```js\n/*eslint no-restricted-modules: [\"error\", {\"paths\": [\"cluster\"] }]*/\n\nvar cluster = require('cluster');\n```\n\n```js\n/*eslint no-restricted-modules: [\"error\", { \"patterns\": [\"lodash/*\"] }]*/\n\nvar pick = require('lodash/pick');\n```\n\nExamples of **correct** code for this rule with sample `\"fs\", \"cluster\", \"lodash\"` restricted modules:\n\n```js\n/*eslint no-restricted-modules: [\"error\", \"fs\", \"cluster\"]*/\n\nvar crypto = require('crypto');\n```\n\n```js\n/*eslint no-restricted-modules: [\"error\", {\n    \"paths\": [\"fs\", \"cluster\"],\n    \"patterns\": [\"lodash/*\", \"!lodash/pick\"]\n}]*/\n\nvar crypto = require('crypto');\nvar pick = require('lodash/pick');\n```\n"
	],
	[
		"no-restricted-properties",
		"# disallow certain object properties (no-restricted-properties)\n\nCertain properties on objects may be disallowed in a codebase. This is useful for deprecating an API or restricting usage of a module's methods. For example, you may want to disallow using `describe.only` when using Mocha or telling people to use `Object.assign` instead of `_.extend`.\n\n\n## Rule Details\n\nThis rule looks for accessing a given property key on a given object name, either when reading the property's value or invoking it as a function. You may specify an optional message to indicate an alternative API or a reason for the restriction.\n\n### Options\n\nThis rule takes a list of objects, where the object name and property names are specified:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"disallowedPropertyName\"\n        }]\n    }\n}\n```\n\nMultiple object/property values can be disallowed, and you can specify an optional message:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"disallowedPropertyName\"\n        }, {\n            \"object\": \"disallowedObjectName\",\n            \"property\": \"anotherDisallowedPropertyName\",\n            \"message\": \"Please use allowedObjectName.allowedPropertyName.\"\n        }]\n    }\n}\n```\n\nIf the object name is omitted, the property is disallowed for all objects:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"property\": \"__defineGetter__\",\n            \"message\": \"Please use Object.defineProperty instead.\"\n        }]\n    }\n}\n```\n\nIf the property name is omitted, accessing any property of the given object is disallowed:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-properties\": [2, {\n            \"object\": \"require\",\n            \"message\": \"Please call require() directly.\"\n        }]\n    }\n}\n```\n\nExamples of **incorrect** code for this rule:\n\n```js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"disallowedObjectName\",\n    \"property\": \"disallowedPropertyName\"\n}] */\n\nvar example = disallowedObjectName.disallowedPropertyName; /*error Disallowed object property: disallowedObjectName.disallowedPropertyName.*/\n\ndisallowedObjectName.disallowedPropertyName(); /*error Disallowed object property: disallowedObjectName.disallowedPropertyName.*/\n```\n\n```js\n/* eslint no-restricted-properties: [2, {\n    \"property\": \"__defineGetter__\"\n}] */\n\nfoo.__defineGetter__(bar, baz);\n```\n\n```js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"require\"\n}] */\n\nrequire.resolve('foo');\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"disallowedObjectName\",\n    \"property\": \"disallowedPropertyName\"\n}] */\n\nvar example = disallowedObjectName.somePropertyName;\n\nallowedObjectName.disallowedPropertyName();\n```\n\n```js\n/* eslint no-restricted-properties: [2, {\n    \"object\": \"require\"\n}] */\n\nrequire('foo');\n```\n\n## When Not To Use It\n\nIf you don't have any object/property combinations to restrict, you should not use this rule.\n\n## Related Rules\n\n* [no-restricted-globals](no-restricted-globals.md)\n* [no-restricted-syntax](no-restricted-syntax.md)\n"
	],
	[
		"no-restricted-syntax",
		"# disallow specified syntax (no-restricted-syntax)\n\nJavaScript has a lot of language features, and not everyone likes all of them. As a result, some projects choose to disallow the use of certain language features altogether. For instance, you might decide to disallow the use of `try-catch` or `class`, or you might decide to disallow the use of the `in` operator.\n\nRather than creating separate rules for every language feature you want to turn off, this rule allows you to configure the syntax elements you want to restrict use of. These elements are represented by their [ESTree](https://github.com/estree/estree) node types. For example, a function declaration is represented by `FunctionDeclaration` and the `with` statement is represented by `WithStatement`. You may find the full list of AST node names you can use [on GitHub](https://github.com/eslint/espree/blob/master/lib/ast-node-types.js) and use the [online parser](https://eslint.org/parser/) to see what type of nodes your code consists of.\n\nYou can also specify [AST selectors](../developer-guide/selectors) to restrict, allowing much more precise control over syntax patterns.\n\n## Rule Details\n\nThis rule disallows specified (that is, user-defined) syntax.\n\n## Options\n\nThis rule takes a list of strings, where each string is an AST selector:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"]\n    }\n}\n```\n\nAlternatively, the rule also accepts objects, where the selector and an optional custom message are specified:\n\n```json\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"FunctionExpression\",\n                \"message\": \"Function expressions are not allowed.\"\n            },\n            {\n                \"selector\": \"CallExpression[callee.name='setTimeout'][arguments.length!=2]\",\n                \"message\": \"setTimeout must always be invoked with two arguments.\"\n            }\n        ]\n    }\n}\n```\n\nIf a custom message is specified with the `message` property, ESLint will use that message when reporting occurrences of the syntax specified in the `selector` property.\n\nThe string and object formats can be freely mixed in the configuration as needed.\n\nExamples of **incorrect** code for this rule with the `\"FunctionExpression\", \"WithStatement\", BinaryExpression[operator='in']` options:\n\n```js\n/* eslint no-restricted-syntax: [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"] */\n\nwith (me) {\n    dontMess();\n}\n\nvar doSomething = function () {};\n\nfoo in bar;\n```\n\nExamples of **correct** code for this rule with the `\"FunctionExpression\", \"WithStatement\", BinaryExpression[operator='in']` options:\n\n```js\n/* eslint no-restricted-syntax: [\"error\", \"FunctionExpression\", \"WithStatement\", \"BinaryExpression[operator='in']\"] */\n\nme.dontMess();\n\nfunction doSomething() {};\n\nfoo instanceof bar;\n```\n\n## When Not To Use It\n\nIf you don't want to restrict your code from using any JavaScript features or syntax, you should not use this rule.\n\n## Related Rules\n\n* [no-alert](no-alert.md)\n* [no-console](no-console.md)\n* [no-debugger](no-debugger.md)\n* [no-restricted-properties](no-restricted-properties.md)\n"
	],
	[
		"no-return-assign",
		"# Disallow Assignment in return Statement (no-return-assign)\n\nOne of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point. Because of this, an errant equals sign can end up causing assignment when the true intent was to do a comparison. This is especially true when using a `return` statement. For example:\n\n```js\nfunction doSomething() {\n    return foo = bar + 2;\n}\n```\n\nIt is difficult to tell the intent of the `return` statement here. It's possible that the function is meant to return the result of `bar + 2`, but then why is it assigning to `foo`? It's also possible that the intent was to use a comparison operator such as `==` and that this code is an error.\n\nBecause of this ambiguity, it's considered a best practice to not use assignment in `return` statements.\n\n## Rule Details\n\nThis rule aims to eliminate assignments from `return` statements. As such, it will warn whenever an assignment is found as part of `return`.\n\n## Options\n\nThe rule takes one option, a string, which must contain one of the following values:\n\n* `except-parens` (default): Disallow assignments unless they are enclosed in parentheses.\n* `always`: Disallow all assignments.\n\n### except-parens\n\nThis is the default option.\nIt disallows assignments unless they are enclosed in parentheses.\n\nExamples of **incorrect** code for the default `\"except-parens\"` option:\n\n```js\n/*eslint no-return-assign: \"error\"*/\n\nfunction doSomething() {\n    return foo = bar + 2;\n}\n\nfunction doSomething() {\n    return foo += 2;\n}\n```\n\nExamples of **correct** code for the default `\"except-parens\"` option:\n\n```js\n/*eslint no-return-assign: \"error\"*/\n\nfunction doSomething() {\n    return foo == bar + 2;\n}\n\nfunction doSomething() {\n    return foo === bar + 2;\n}\n\nfunction doSomething() {\n    return (foo = bar + 2);\n}\n```\n\n### always\n\nThis option disallows all assignments in `return` statements.\nAll assignments are treated as problems.\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint no-return-assign: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n    return foo = bar + 2;\n}\n\nfunction doSomething() {\n    return foo += 2;\n}\n\nfunction doSomething() {\n    return (foo = bar + 2);\n}\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint no-return-assign: [\"error\", \"always\"]*/\n\nfunction doSomething() {\n    return foo == bar + 2;\n}\n\nfunction doSomething() {\n    return foo === bar + 2;\n}\n```\n\n## When Not To Use It\n\nIf you want to allow the use of assignment operators in a `return` statement, then you can safely disable this rule.\n"
	],
	[
		"no-return-await",
		"# Disallows unnecessary `return await` (no-return-await)\n\nInside an `async function`, `return await` is seldom useful. Since the return value of an `async function` is always wrapped in `Promise.resolve`, `return await` doesn’t actually do anything except add extra time before the overarching Promise resolves or rejects. The only valid exception is if `return await` is used in a try/catch statement to catch errors from another Promise-based function.\n\n## Rule Details\n\nThis rule aims to prevent a likely common performance hazard due to a lack of understanding of the semantics of `async function`.\n\nExamples of **incorrect** code for this rule:\n\n```js\nasync function foo() {\n    return await bar();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\nasync function foo() {\n    return bar();\n}\n\nasync function foo() {\n    await bar();\n    return;\n}\n\nasync function foo() {\n    const x = await bar();\n    return x;\n}\n\nasync function foo() {\n    try {\n        return await bar();\n    } catch (error) {}\n}\n```\n\nIn the last example the `await` is necessary to be able to catch errors thrown from `bar()`.\n\n## When Not To Use It\n\nIf you want to use `await` to denote a value that is a thenable, even when it is not necessary; or if you do not want the performance benefit of avoiding `return await`, you can turn off this rule.\n\n## Further Reading\n\n[`async function` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n"
	],
	[
		"no-script-url",
		"# Disallow Script URLs (no-script-url)\n\nUsing `javascript:` URLs is considered by some as a form of `eval`. Code passed in `javascript:` URLs has to be parsed and evaluated by the browser in the same way that `eval` is processed.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-script-url: \"error\"*/\n\nlocation.href = \"javascript:void(0)\";\n```\n\n## Compatibility\n\n* **JSHint**: This rule corresponds to `scripturl` rule of JSHint.\n\n## Further Reading\n\n* [What is the matter with script-targeted URLs?](https://stackoverflow.com/questions/13497971/what-is-the-matter-with-script-targeted-urls)\n"
	],
	[
		"no-self-assign",
		"# Disallow Self Assignment (no-self-assign)\n\nSelf assignments have no effect, so probably those are an error due to incomplete refactoring.\nThose indicate that what you should do is still remaining.\n\n```js\nfoo = foo;\n[bar, baz] = [bar, qiz];\n```\n\n## Rule Details\n\nThis rule is aimed at eliminating self assignments.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-self-assign: \"error\"*/\n\nfoo = foo;\n\n[a, b] = [a, b];\n\n[a, ...b] = [x, ...b];\n\n({a, b} = {a, x});\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-self-assign: \"error\"*/\n\nfoo = bar;\n[a, b] = [b, a];\n\n// This pattern is warned by the `no-use-before-define` rule.\nlet foo = foo;\n\n// The default values have an effect.\n[foo = 1] = [foo];\n\n// non-self-assignments with properties.\nobj.a = obj.b;\nobj.a.b = obj.c.b;\nobj.a.b = obj.a.c;\nobj[a] = obj[\"a\"];\n\n// This ignores if there is a function call.\nobj.a().b = obj.a().b;\na().b = a().b;\n\n// Known limitation: this does not support computed properties except single literal or single identifier.\nobj[a + b] = obj[a + b];\nobj[\"a\" + \"b\"] = obj[\"a\" + \"b\"];\n```\n\n## Options\n\nThis rule has the option to check properties as well.\n\n```json\n{\n    \"no-self-assign\": [\"error\", {\"props\": true}]\n}\n```\n\n- `props` - if this is `true`, `no-self-assign` rule warns self-assignments of properties. Default is `true`.\n\n### props\n\nExamples of **correct** code with the `{ \"props\": false }` option:\n\n```js\n/*eslint no-self-assign: [\"error\", {\"props\": false}]*/\n\n// self-assignments with properties.\nobj.a = obj.a;\nobj.a.b = obj.a.b;\nobj[\"a\"] = obj[\"a\"];\nobj[a] = obj[a];\n```\n\n## When Not To Use It\n\nIf you don't want to notify about self assignments, then it's safe to disable this rule.\n"
	],
	[
		"no-self-compare",
		"# Disallow Self Compare (no-self-compare)\n\nComparing a variable against itself is usually an error, either a typo or refactoring error. It is confusing to the reader and may potentially introduce a runtime error.\n\nThe only time you would compare a variable against itself is when you are testing for `NaN`. However, it is far more appropriate to use `typeof x === 'number' && isNaN(x)` or the [Number.isNaN ES2015 function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) for that use case rather than leaving the reader of the code to determine the intent of self comparison.\n\n## Rule Details\n\nThis error is raised to highlight a potentially confusing and potentially pointless piece of code. There are almost no situations in which you would need to compare something to itself.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-self-compare: \"error\"*/\n\nvar x = 10;\nif (x === x) {\n    x = 20;\n}\n```\n"
	],
	[
		"no-sequences",
		"# Disallow Use of the Comma Operator (no-sequences)\n\nThe comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:\n\n```js\nvar a = (3, 5); // a = 5\n\na = b += 5, a + b;\n\nwhile (a = next(), a && a.length);\n\n(0, eval)(\"doSomething();\");\n```\n\n## Rule Details\n\nThis rule forbids the use of the comma operator, with the following exceptions:\n\n* In the initialization or update portions of a `for` statement.\n* If the expression sequence is explicitly wrapped in parentheses.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-sequences: \"error\"*/\n\nfoo = doSomething(), val;\n\n0, eval(\"doSomething();\");\n\ndo {} while (doSomething(), !!test);\n\nfor (; doSomething(), !!test; );\n\nif (doSomething(), !!test);\n\nswitch (val = foo(), val) {}\n\nwhile (val = foo(), val < 42);\n\nwith (doSomething(), val) {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-sequences: \"error\"*/\n\nfoo = (doSomething(), val);\n\n(0, eval)(\"doSomething();\");\n\ndo {} while ((doSomething(), !!test));\n\nfor (i = 0, j = 10; i < j; i++, j--);\n\nif ((doSomething(), !!test));\n\nswitch ((val = foo(), val)) {}\n\nwhile ((val = foo(), val < 42));\n\n// with ((doSomething(), val)) {}\n```\n\n## When Not To Use It\n\nDisable this rule if sequence expressions with the comma operator are acceptable.\nAnother case is where you might want to report all usages of the comma operator, even if they are wrapped in parentheses or in a for loop. You can achieve this using rule `no-restricted-syntax`:\n\n```js\n{\n    \"rules\": {\n        \"no-restricted-syntax\": [\"error\", \"SequenceExpression\"]\n    }\n}\n```\n"
	],
	[
		"no-shadow",
		"# disallow variable declarations from shadowing variables declared in the outer scope (no-shadow)\n\nShadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:\n\n```js\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n```\n\nIn this case, the variable `a` inside of `b()` is shadowing the variable `a` in the global scope. This can cause confusion while reading the code and it's impossible to access the global variable.\n\n## Rule Details\n\nThis rule aims to eliminate shadowed variable declarations.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-shadow: \"error\"*/\n/*eslint-env es6*/\n\nvar a = 3;\nfunction b() {\n    var a = 10;\n}\n\nvar b = function () {\n    var a = 10;\n}\n\nfunction b(a) {\n    a = 10;\n}\nb(a);\n\nif (true) {\n    let a = 5;\n}\n```\n\n## Options\n\nThis rule takes one option, an object, with properties `\"builtinGlobals\"`, `\"hoist\"` and `\"allow\"`.\n\n```json\n{\n    \"no-shadow\": [\"error\", { \"builtinGlobals\": false, \"hoist\": \"functions\", \"allow\": [] }]\n}\n```\n\n### builtinGlobals\n\nThe `builtinGlobals` option is `false` by default.\nIf it is `true`, the rule prevents shadowing of built-in global variables: `Object`, `Array`, `Number`, and so on.\n\nExamples of **incorrect** code for the `{ \"builtinGlobals\": true }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"builtinGlobals\": true }]*/\n\nfunction foo() {\n    var Object = 0;\n}\n```\n\n### hoist\n\nThe `hoist` option has three settings:\n\n* `functions` (by default) - reports shadowing before the outer functions are defined.\n* `all` - reports all shadowing before the outer variables/functions are defined.\n* `never` - never report shadowing before the outer variables/functions are defined.\n\n#### hoist: functions\n\nExamples of **incorrect** code for the default `{ \"hoist\": \"functions\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let b = 6;\n}\n\nfunction b() {}\n```\n\nAlthough `let b` in the `if` statement is before the *function* declaration in the outer scope, it is incorrect.\n\nExamples of **correct** code for the default `{ \"hoist\": \"functions\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"functions\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n}\n\nlet a = 5;\n```\n\nBecause `let a` in the `if` statement is before the *variable* declaration in the outer scope, it is correct.\n\n#### hoist: all\n\nExamples of **incorrect** code for the `{ \"hoist\": \"all\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"all\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\n#### hoist: never\n\nExamples of **correct** code for the `{ \"hoist\": \"never\" }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"hoist\": \"never\" }]*/\n/*eslint-env es6*/\n\nif (true) {\n    let a = 3;\n    let b = 6;\n}\n\nlet a = 5;\nfunction b() {}\n```\n\nBecause `let a` and `let b` in the `if` statement are before the declarations in the outer scope, they are correct.\n\n### allow\n\nThe `allow` option is an array of identifier names for which shadowing is allowed. For example, `\"resolve\"`, `\"reject\"`, `\"done\"`, `\"cb\"`.\n\nExamples of **correct** code for the `{ \"allow\": [\"done\"] }` option:\n\n```js\n/*eslint no-shadow: [\"error\", { \"allow\": [\"done\"] }]*/\n/*eslint-env es6*/\n\nimport async from 'async';\n\nfunction foo(done) {\n  async.map([1, 2], function (e, done) {\n    done(null, e * 2)\n  }, done);\n}\n\nfoo(function (err, result) {\n  console.log({ err, result });\n});\n```\n\n## Further Reading\n\n* [Variable Shadowing](https://en.wikipedia.org/wiki/Variable_shadowing)\n\n## Related Rules\n\n* [no-shadow-restricted-names](no-shadow-restricted-names.md)\n"
	],
	[
		"no-shadow-restricted-names",
		"# Disallow Shadowing of Restricted Names (no-shadow-restricted-names)\n\nES5 §15.1.1 Value Properties of the Global Object (`NaN`, `Infinity`, `undefined`) as well as strict mode restricted identifiers `eval` and `arguments` are considered to be restricted names in JavaScript. Defining them to mean something else can have unintended consequences and confuse others reading the code. For example, there's nothing preventing you from writing:\n\n```js\nvar undefined = \"foo\";\n```\n\nThen any code used within the same scope would not get the global `undefined`, but rather the local version with a very different meaning.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nfunction NaN(){}\n\n!function(Infinity){};\n\nvar undefined = 5;\n\ntry {} catch(eval){}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-shadow-restricted-names: \"error\"*/\n\nvar Object;\n\nfunction f(a, b){}\n\n// Exception: `undefined` may be shadowed if the variable is never assigned a value.\nvar undefined;\n```\n\n## Further Reading\n\n* [Annotated ES5 - §15.1.1](https://es5.github.io/#x15.1.1)\n* [Annotated ES5 - Annex C](https://es5.github.io/#C)\n\n## Related Rules\n\n* [no-shadow](no-shadow.md)\n"
	],
	[
		"no-spaced-func",
		"# disallow spacing between function identifiers and their applications (no-spaced-func)\n\nThis rule was **deprecated** in ESLint v3.3.0 and replaced by the [func-call-spacing](func-call-spacing.md) rule.\n\nWhile it's possible to have whitespace between the name of a function and the parentheses that execute it, such patterns tend to look more like errors.\n\n## Rule Details\n\nThis rule disallows spacing between function identifiers and their applications.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-spaced-func: \"error\"*/\n\nfn ()\n\nfn\n()\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-spaced-func: \"error\"*/\n\nfn()\n```\n"
	],
	[
		"no-sparse-arrays",
		"# disallow sparse arrays (no-sparse-arrays)\n\nSparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:\n\n```js\nvar items = [,,];\n```\n\nWhile the `items` array in this example has a `length` of 2, there are actually no values in `items[0]` or `items[1]`. The fact that the array literal is valid with only commas inside, coupled with the `length` being set and actual item values not being set, make sparse arrays confusing for many developers. Consider the following:\n\n```js\nvar colors = [ \"red\",, \"blue\" ];\n```\n\nIn this example, the `colors` array has a `length` of 3. But did the developer intend for there to be an empty spot in the middle of the array? Or is it a typo?\n\nThe confusion around sparse arrays defined in this manner is enough that it's recommended to avoid using them unless you are certain that they are useful in your code.\n\n## Rule Details\n\nThis rule disallows sparse array literals which have \"holes\" where commas are not preceded by elements. It does not apply to a trailing comma following the last element.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-sparse-arrays: \"error\"*/\n\nvar items = [,];\nvar colors = [ \"red\",, \"blue\" ];\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-sparse-arrays: \"error\"*/\n\nvar items = [];\nvar items = new Array(23);\n\n// trailing comma (after the last element) is not a problem\nvar colors = [ \"red\", \"blue\", ];\n```\n\n## When Not To Use It\n\nIf you want to use sparse arrays, then it is safe to disable this rule.\n\n## Further Reading\n\n* [Inconsistent array literals](https://www.nczonline.net/blog/2007/09/09/inconsistent-array-literals/)\n"
	],
	[
		"no-sync",
		"# Disallow Synchronous Methods (no-sync)\n\nIn Node.js, most I/O is done through asynchronous methods. However, there are often synchronous versions of the asynchronous methods. For example, `fs.exists()` and `fs.existsSync()`. In some contexts, using synchronous operations is okay (if, as with ESLint, you are writing a command line utility). However, in other contexts the use of synchronous operations is considered a bad practice that should be avoided. For example, if you are running a high-travel web server on Node.js, you should consider carefully if you want to allow any synchronous operations that could lock up the server.\n\n## Rule Details\n\nThis rule is aimed at preventing synchronous methods from being called in Node.js. It looks specifically for the method suffix \"`Sync`\" (as is the convention with Node.js operations).\n\n## Options\n\nThis rule has an optional object option `{ allowAtRootLevel: <boolean> }`, which determines whether synchronous methods should be allowed at the top level of a file, outside of any functions. This option defaults to `false`.\n\nExamples of **incorrect** code for this rule with the default `{ allowAtRootLevel: false }` option:\n\n```js\n/*eslint no-sync: \"error\"*/\n\nfs.existsSync(somePath);\n\nfunction foo() {\n  var contents = fs.readFileSync(somePath).toString();\n}\n```\n\nExamples of **correct** code for this rule with the default `{ allowAtRootLevel: false }` option:\n\n```js\n/*eslint no-sync: \"error\"*/\n\nobj.sync();\n\nasync(function() {\n    // ...\n});\n```\n\nExamples of **incorrect** code for this rule with the `{ allowAtRootLevel: true }` option\n\n```js\n/*eslint no-sync: [\"error\", { allowAtRootLevel: true }]*/\n\nfunction foo() {\n  var contents = fs.readFileSync(somePath).toString();\n}\n\nvar bar = baz => fs.readFileSync(qux);\n```\n\nExamples of **correct** code for this rule with the `{ allowAtRootLevel: true }` option\n\n```js\n/*eslint no-sync: [\"error\", { allowAtRootLevel: true }]*/\n\nfs.readFileSync(somePath).toString();\n```\n\n## When Not To Use It\n\nIf you want to allow synchronous operations in your script, do not enable this rule.\n"
	],
	[
		"no-tabs",
		"# disallow all tabs (no-tabs)\n\nSome style guides don't allow the use of tab characters at all, including within comments.\n\n## Rule Details\n\nThis rule looks for tabs anywhere inside a file: code, comments or anything else.\n\nExamples of **incorrect** code for this rule:\n\n```js\nvar a \\t= 2;\n\n/**\n* \\t\\t it's a test function\n*/\nfunction test(){}\n\nvar x = 1; // \\t test\n```\n\nExamples of **correct** code for this rule:\n\n```js\nvar a = 2;\n\n/**\n* it's a test function\n*/\nfunction test(){}\n\nvar x = 1; // test\n```\n\n### Options\n\nThis rule has an optional object option with the following properties:\n\n* `allowIndentationTabs` (default: false): If this is set to true, then the rule will not report tabs used for indentation.\n\n#### allowIndentationTabs\n\nExamples of **correct** code for this rule with the `allowIndentationTabs: true` option:\n\n```js\n/* eslint no-tabs: [\"error\", { allowIndentationTabs: true }] */\n\nfunction test() {\n\\tdoSomething();\n}\n\n\\t// comment with leading indentation tab\n```\n\n## When Not To Use It\n\nIf you have established a standard where having tabs is fine, then you can disable this rule.\n\n## Compatibility\n\n* **JSCS**: [disallowTabs](https://jscs-dev.github.io/rule/disallowTabs)\n"
	],
	[
		"no-template-curly-in-string",
		"# Disallow template literal placeholder syntax in regular strings (no-template-curly-in-string)\n\nECMAScript 6 allows programmers to create strings containing variable or expressions using template literals, instead of string concatenation, by writing expressions like `${variable}` between two backtick quotes (\\`). It can be easy to use the wrong quotes when wanting to use template literals, by writing `\"${variable}\"`, and end up with the literal value `\"${variable}\"` instead of a string containing the value of the injected expressions.\n\n\n## Rule Details\n\nThis rule aims to warn when a regular string contains what looks like a template literal placeholder. It will warn when it finds a string containing the template literal placeholder (`${something}`) that uses either `\"` or `'` for the quotes.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-template-curly-in-string: \"error\"*/\n\"Hello ${name}!\";\n'Hello ${name}!';\n\"Time: ${12 * 60 * 60 * 1000}\";\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-template-curly-in-string: \"error\"*/\n`Hello ${name}!`;\n`Time: ${12 * 60 * 60 * 1000}`;\n\ntemplateFunction`Hello ${name}`;\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n"
	],
	[
		"no-ternary",
		"# disallow ternary operators (no-ternary)\n\nThe ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.\n\n```js\nvar foo = isBar ? baz : qux;\n```\n\n## Rule Details\n\nThis rule disallows ternary operators.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-ternary: \"error\"*/\n\nvar foo = isBar ? baz : qux;\n\nfunction quux() {\n  return foo ? bar() : baz();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-ternary: \"error\"*/\n\nvar foo;\n\nif (isBar) {\n    foo = baz;\n} else {\n    foo = qux;\n}\n\nfunction quux() {\n    if (foo) {\n        return bar();\n    } else {\n        return baz();\n    }\n}\n```\n\n## Related Rules\n\n* [no-nested-ternary](no-nested-ternary.md)\n* [no-unneeded-ternary](no-unneeded-ternary.md)\n"
	],
	[
		"no-this-before-super",
		"# Disallow use of `this`/`super` before calling `super()` in constructors. (no-this-before-super)\n\nIn the constructor of derived classes, if `this`/`super` are used before `super()` calls, it raises a reference error.\n\nThis rule checks `this`/`super` keywords in constructors, then reports those that are before `super()`.\n\n## Rule Details\n\nThis rule is aimed to flag `this`/`super` keywords before `super()` callings.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-this-before-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A extends B {\n    constructor() {\n        this.a = 0;\n        super();\n    }\n}\n\nclass A extends B {\n    constructor() {\n        this.foo();\n        super();\n    }\n}\n\nclass A extends B {\n    constructor() {\n        super.foo();\n        super();\n    }\n}\n\nclass A extends B {\n    constructor() {\n        super(this.foo());\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-this-before-super: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    constructor() {\n        this.a = 0; // OK, this class doesn't have an `extends` clause.\n    }\n}\n\nclass A extends B {\n    constructor() {\n        super();\n        this.a = 0; // OK, this is after `super()`.\n    }\n}\n\nclass A extends B {\n    foo() {\n        this.a = 0; // OK. this is not in a constructor.\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about using `this`/`super` before `super()` in constructors, you can safely disable this rule.\n"
	],
	[
		"no-throw-literal",
		"# Restrict what can be thrown as an exception (no-throw-literal)\n\nIt is considered good practice to only `throw` the `Error` object itself or an object using the `Error` object as base objects for user-defined exceptions.\nThe fundamental benefit of `Error` objects is that they automatically keep track of where they were built and originated.\n\nThis rule restricts what can be thrown as an exception.  When it was first created, it only prevented literals from being thrown (hence the name), but it has now been expanded to only allow expressions which have a possibility of being an `Error` object.\n\n## Rule Details\n\nThis rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an `Error` object.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-throw-literal: \"error\"*/\n/*eslint-env es6*/\n\nthrow \"error\";\n\nthrow 0;\n\nthrow undefined;\n\nthrow null;\n\nvar err = new Error();\nthrow \"an \" + err;\n// err is recast to a string literal\n\nvar err = new Error();\nthrow `${err}`\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-throw-literal: \"error\"*/\n\nthrow new Error();\n\nthrow new Error(\"error\");\n\nvar e = new Error(\"error\");\nthrow e;\n\ntry {\n    throw new Error(\"error\");\n} catch (e) {\n    throw e;\n}\n```\n\n## Known Limitations\n\nDue to the limits of static analysis, this rule cannot guarantee that you will only throw `Error` objects.\n\nExamples of **correct** code for this rule, but which do not throw an `Error` object:\n\n```js\n/*eslint no-throw-literal: \"error\"*/\n\nvar err = \"error\";\nthrow err;\n\nfunction foo(bar) {\n    console.log(bar);\n}\nthrow foo(\"error\");\n\nthrow new String(\"error\");\n\nvar foo = {\n    bar: \"error\"\n};\nthrow foo.bar;\n```\n"
	],
	[
		"no-trailing-spaces",
		"# disallow trailing whitespace at the end of lines (no-trailing-spaces)\n\nSometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before check-in.\n\n## Rule Details\n\nThis rule disallows trailing whitespace (spaces, tabs, and other Unicode whitespace characters) at the end of lines.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-trailing-spaces: \"error\"*/\n\nvar foo = 0;//•••••\nvar baz = 5;//••\n//•••••\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-trailing-spaces: \"error\"*/\n\nvar foo = 0;\nvar baz = 5;\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"skipBlankLines\": false` (default) disallows trailing whitespace on empty lines\n* `\"skipBlankLines\": true` allows trailing whitespace on empty lines\n* `\"ignoreComments\": false` (default) disallows trailing whitespace in comment blocks\n* `\"ignoreComments\": true` allows trailing whitespace in comment blocks\n\n### skipBlankLines\n\nExamples of **correct** code for this rule with the `{ \"skipBlankLines\": true }` option:\n\n```js\n/*eslint no-trailing-spaces: [\"error\", { \"skipBlankLines\": true }]*/\n\nvar foo = 0;\nvar baz = 5;\n//•••••\n```\n\n### ignoreComments\n\nExamples of **correct** code for this rule with the `{ \"ignoreComments\": true }` option:\n\n```js\n/*eslint no-trailing-spaces: [\"error\", { \"ignoreComments\": true }]*/\n\n//foo•\n//•••••\n/**\n *•baz\n *••\n *•bar\n */\n```\n"
	],
	[
		"no-undef",
		"# Disallow Undeclared Variables (no-undef)\n\nThis rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the `var` keyword in a `for` loop initializer).\n\n## Rule Details\n\nAny reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a `/*global ...*/` comment, or specified in the [`globals` key in the configuration file](https://eslint.org/docs/user-guide/configuring#specifying-globals). A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nvar foo = someFunction();\nvar bar = a + 1;\n```\n\nExamples of **correct** code for this rule with `global` declaration:\n\n```js\n/*global someFunction, a*/\n/*eslint no-undef: \"error\"*/\n\nvar foo = someFunction();\nvar bar = a + 1;\n```\n\nNote that this rule does not disallow assignments to read-only global variables.\nSee [no-global-assign](no-global-assign.md) if you also want to disallow those assignments.\n\nThis rule also does not disallow redeclarations of global variables.\nSee [no-redeclare](no-redeclare.md) if you also want to disallow those redeclarations.\n\n## Options\n\n* `typeof` set to true will warn for variables used inside typeof check (Default false).\n\n### typeof\n\nExamples of **correct** code for the default `{ \"typeof\": false }` option:\n\n```js\n/*eslint no-undef: \"error\"*/\n\nif (typeof UndefinedIdentifier === \"undefined\") {\n    // do something ...\n}\n```\n\nYou can use this option if you want to prevent `typeof` check on a variable which has not been declared.\n\nExamples of **incorrect** code for the `{ \"typeof\": true }` option:\n\n```js\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\nExamples of **correct** code for the `{ \"typeof\": true }` option with `global` declaration:\n\n```js\n/*global a*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}\n```\n\n## Environments\n\nFor convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in [Specifying Environments](../user-guide/configuring.md#specifying-environments).  A few examples are given below.\n\n### browser\n\nExamples of **correct** code for this rule with `browser` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env browser*/\n\nsetTimeout(function() {\n    alert(\"Hello\");\n});\n```\n\n### Node.js\n\nExamples of **correct** code for this rule with `node` environment:\n\n```js\n/*eslint no-undef: \"error\"*/\n/*eslint-env node*/\n\nvar fs = require(\"fs\");\nmodule.exports = function() {\n    console.log(fs);\n};\n```\n\n## When Not To Use It\n\nIf explicit declaration of global variables is not to your taste.\n\n## Compatibility\n\nThis rule provides compatibility with treatment of global variables in [JSHint](http://jshint.com/) and [JSLint](http://www.jslint.com).\n\n## Related Rules\n\n* [no-global-assign](no-global-assign.md)\n* [no-redeclare](no-redeclare.md)\n"
	],
	[
		"no-undef-init",
		"# Disallow Initializing to undefined (no-undef-init)\n\nIn JavaScript, a variable that is declared and not initialized to any value automatically gets the value of `undefined`. For example:\n\n```js\nvar foo;\n\nconsole.log(foo === undefined);     // true\n```\n\nIt's therefore unnecessary to initialize a variable to `undefined`, such as:\n\n```js\nvar foo = undefined;\n```\n\nIt's considered a best practice to avoid initializing variables to `undefined`.\n\n\n## Rule Details\n\nThis rule aims to eliminate variable declarations that initialize to `undefined`.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = undefined;\nlet bar = undefined;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n/*eslint-env es6*/\n\nvar foo;\nlet bar;\nconst baz = undefined;\n```\n\n## When Not To Use It\n\nThere is one situation where initializing to `undefined` behaves differently than omitting the initialization, and that's when a `var` declaration occurs inside of a loop. For example:\n\nExample of **incorrect** code for this rule:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIn this case, the `var x` is hoisted out of the loop, effectively creating:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    x = undefined;\n    console.log(x);\n    x = i;\n}\n```\n\nIf you were to remove the initialization, then the behavior of the loop changes:\n\n```js\nfor (i = 0; i < 10; i++) {\n    var x;\n    console.log(x);\n    x = i;\n}\n```\n\nThis code is equivalent to:\n\n```js\nvar x;\n\nfor (i = 0; i < 10; i++) {\n    console.log(x);\n    x = i;\n}\n```\n\nThis produces a different outcome than defining `var x = undefined` in the loop, as `x` is no longer reset to `undefined` each time through the loop.\n\nIf you're using such an initialization inside of a loop, then you should disable this rule.\n\nExample of **correct** code for this rule, because it is disabled on a specific line:\n\n```js\n/*eslint no-undef-init: \"error\"*/\n\nfor (i = 0; i < 10; i++) {\n    var x = undefined; // eslint-disable-line no-undef-init\n    console.log(x);\n    x = i;\n}\n```\n\n## Related Rules\n\n* [no-undefined](no-undefined.md)\n* [no-void](no-void.md)\n"
	],
	[
		"no-undefined",
		"# Disallow Use of `undefined` Variable (no-undefined)\n\nThe `undefined` variable in JavaScript is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of `undefined`. While ECMAScript 5 disallows overwriting `undefined`, it's still possible to shadow `undefined`, such as:\n\n```js\nfunction doSomething(data) {\n    var undefined = \"hi\";\n\n    // doesn't do what you think it does\n    if (data === undefined) {\n        // ...\n    }\n\n}\n```\n\nBecause `undefined` can be overwritten or shadowed, reading `undefined` can give an unexpected value. (This is not the case for `null`, which is a keyword that always produces the same value.) To guard against this, you can avoid all uses of `undefined`, which is what some style guides recommend and what this rule enforces. Those style guides then also recommend:\n\n* Variables that should be `undefined` are simply left uninitialized. (All uninitialized variables automatically get the value of `undefined` in JavaScript.)\n* Checking if a value is `undefined` should be done with `typeof`.\n* Using the `void` operator to generate the value of `undefined` if necessary.\n\nAs an alternative, you can use the [no-global-assign](no-global-assign.md) and [no-shadow-restricted-names](no-shadow-restricted-names.md) rules to prevent `undefined` from being shadowed or assigned a different value. This ensures that `undefined` will always hold its original, expected value.\n\n\n## Rule Details\n\nThis rule aims to eliminate the use of `undefined`, and as such, generates a warning whenever it is used.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-undefined: \"error\"*/\n\nvar foo = undefined;\n\nvar undefined = \"foo\";\n\nif (foo === undefined) {\n    // ...\n}\n\nfunction foo(undefined) {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-undefined: \"error\"*/\n\nvar foo = void 0;\n\nvar Undefined = \"foo\";\n\nif (typeof foo === \"undefined\") {\n    // ...\n}\n\nglobal.undefined = \"foo\";\n```\n\n## When Not To Use It\n\nIf you want to allow the use of `undefined` in your code, then you can safely turn this rule off.\n\n## Further Reading\n\n* [undefined - JavaScript \\| MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)\n* [Understanding JavaScript’s ‘undefined’ \\| JavaScript, JavaScript...](https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/)\n* [ECMA262 edition 5.1 &sect;15.1.1.3: undefined](https://es5.github.io/#x15.1.1.3)\n\n## Related Rules\n\n* [no-undef-init](no-undef-init.md)\n* [no-void](no-void.md)\n* [no-shadow-restricted-names](no-shadow-restricted-names.md)\n* [no-global-assign](no-global-assign.md)\n"
	],
	[
		"no-underscore-dangle",
		"# disallow dangling underscores in identifiers (no-underscore-dangle)\n\nAs far as naming conventions for identifiers go, dangling underscores may be the most polarizing in JavaScript. Dangling underscores are underscores at either the beginning or end of an identifier, such as:\n\n```js\nvar _foo;\n```\n\nThere is actually a long history of using dangling underscores to indicate \"private\" members of objects in JavaScript (though JavaScript doesn't have truly private members, this convention served as a warning). This began with SpiderMonkey adding nonstandard methods such as `__defineGetter__()`. The intent with the underscores was to make it obvious that this method was special in some way. Since that time, using a single underscore prefix has become popular as a way to indicate \"private\" members of objects.\n\nWhether or not you choose to allow dangling underscores in identifiers is purely a convention and has no effect on performance, readability, or complexity. It's purely a preference.\n\n## Rule Details\n\nThis rule disallows dangling underscores in identifiers.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-underscore-dangle: \"error\"*/\n\nvar foo_;\nvar __proto__ = {};\nfoo._bar();\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-underscore-dangle: \"error\"*/\n\nvar _ = require('underscore');\nvar obj = _.contains(items, item);\nobj.__proto__ = {};\nvar file = __filename;\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"allow\"` allows specified identifiers to have dangling underscores\n* `\"allowAfterThis\": false` (default) disallows dangling underscores in members of the `this` object\n* `\"allowAfterSuper\": false` (default) disallows dangling underscores in members of the `super` object\n* `\"enforceInMethodNames\": false` (default) allows dangling underscores in method names\n\n### allow\n\nExamples of additional **correct** code for this rule with the `{ \"allow\": [\"foo_\", \"_bar\"] }` option:\n\n```js\n/*eslint no-underscore-dangle: [\"error\", { \"allow\": [\"foo_\", \"_bar\"] }]*/\n\nvar foo_;\nfoo._bar();\n```\n\n### allowAfterThis\n\nExamples of **correct** code for this rule with the `{ \"allowAfterThis\": true }` option:\n\n```js\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterThis\": true }]*/\n\nvar a = this.foo_;\nthis._bar();\n```\n\n### allowAfterSuper\n\nExamples of **correct** code for this rule with the `{ \"allowAfterSuper\": true }` option:\n\n```js\n/*eslint no-underscore-dangle: [\"error\", { \"allowAfterSuper\": true }]*/\n\nvar a = super.foo_;\nsuper._bar();\n```\n\n### enforceInMethodNames\n\nExamples of **incorrect** code for this rule with the `{ \"enforceInMethodNames\": true }` option:\n\n```js\n/*eslint no-underscore-dangle: [\"error\", { \"enforceInMethodNames\": true }]*/\n\nclass Foo {\n  _bar() {}\n}\n\nclass Foo {\n  bar_() {}\n}\n\nconst o = {\n  _bar() {}\n};\n\nconst o = {\n  bar_() = {}\n};\n```\n\n## When Not To Use It\n\nIf you want to allow dangling underscores in identifiers, then you can safely turn this rule off.\n"
	],
	[
		"no-unexpected-multiline",
		"# disallow confusing multiline expressions (no-unexpected-multiline)\n\nSemicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the [semi](./semi.md) rule.\n\nThe rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, **except** where one of the following is true:\n\n* The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n* The line is `--` or `++` (in which case it will decrement/increment the next token.)\n* It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n* The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\nIn the exceptions where a newline does **not** end a statement, a typing mistake to omit a semicolon causes two unrelated consecutive lines to be interpreted as one expression. Especially for a coding style without semicolons, readers might overlook the mistake. Although syntactically correct, the code might throw exceptions when it is executed.\n\n## Rule Details\n\nThis rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar\n(1 || 2).baz();\n\nvar hello = 'world'\n[1, 2, 3].forEach(addNumber);\n\nlet x = function() {}\n`hello`\n\nlet x = function() {}\nx\n`hello`\n\nlet x = foo\n/regex/g.test(bar)\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unexpected-multiline: \"error\"*/\n\nvar foo = bar;\n(1 || 2).baz();\n\nvar foo = bar\n;(1 || 2).baz()\n\nvar hello = 'world';\n[1, 2, 3].forEach(addNumber);\n\nvar hello = 'world'\nvoid [1, 2, 3].forEach(addNumber);\n\nlet x = function() {};\n`hello`\n\nlet tag = function() {}\ntag `hello`\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are confident that you will not accidentally introduce code like this.\n\nNote that the patterns considered problems are **not** flagged by the [semi](semi.md) rule.\n\n## Related Rules\n\n* [func-call-spacing](func-call-spacing.md)\n* [semi](semi.md)\n* [space-unary-ops](space-unary-ops.md)\n"
	],
	[
		"no-unmodified-loop-condition",
		"# Disallow unmodified conditions of loops (no-unmodified-loop-condition)\n\nVariables in a loop condition often are modified in the loop.\nIf not, it's possibly a mistake.\n\n```js\nwhile (node) {\n    doSomething(node);\n}\n```\n\n```js\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n```\n\n## Rule Details\n\nThis rule finds references which are inside of loop conditions, then checks the\nvariables of those references are modified in the loop.\n\nIf a reference is inside of a binary expression or a ternary expression, this rule checks the result of\nthe expression instead.\nIf a reference is inside of a dynamic expression (e.g. `CallExpression`,\n`YieldExpression`, ...), this rule ignores it.\n\nExamples of **incorrect** code for this rule:\n\n```js\nwhile (node) {\n    doSomething(node);\n}\nnode = other;\n\nfor (var j = 0; j < items.length; ++i) {\n    doSomething(items[j]);\n}\n\nwhile (node !== root) {\n    doSomething(node);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n\nfor (var j = 0; j < items.length; ++j) {\n    doSomething(items[j]);\n}\n\n// OK, the result of this binary expression is changed in this loop.\nwhile (node !== root) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// OK, the result of this ternary expression is changed in this loop.\nwhile (node ? A : B) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// A property might be a getter which has side effect...\n// Or \"doSomething\" can modify \"obj.foo\".\nwhile (obj.foo) {\n    doSomething(obj);\n}\n\n// A function call can return various values.\nwhile (check(obj)) {\n    doSomething(obj);\n}\n```\n\n## When Not To Use It\n\nIf you don't want to notified about references inside of loop conditions, then it's safe to disable this rule.\n"
	],
	[
		"no-unneeded-ternary",
		"# disallow ternary operators when simpler alternatives exist (no-unneeded-ternary)\n\nIt's a common mistake in JavaScript to use a conditional expression to select between two Boolean values instead of using ! to convert the test to a Boolean.\nHere are some examples:\n\n```js\n// Bad\nvar isYes = answer === 1 ? true : false;\n\n// Good\nvar isYes = answer === 1;\n\n\n// Bad\nvar isNo = answer === 1 ? false : true;\n\n// Good\nvar isNo = answer !== 1;\n```\n\nAnother common mistake is using a single variable as both the conditional test and the consequent. In such cases, the logical `OR` can be used to provide the same functionality.\nHere is an example:\n\n```js\n// Bad\nfoo(bar ? bar : 1);\n\n// Good\nfoo(bar || 1);\n```\n\n## Rule Details\n\nThis rule disallow ternary operators when simpler alternatives exist.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unneeded-ternary: \"error\"*/\n\nvar a = x === 2 ? true : false;\n\nvar a = x ? true : false;\n\nvar a = f(x ? x : 1);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unneeded-ternary: \"error\"*/\n\nvar a = x === 2 ? \"Yes\" : \"No\";\n\nvar a = x !== false;\n\nvar a = x ? \"Yes\" : \"No\";\n\nvar a = x ? y : x;\n\nvar a = x ? x : 1;  // Note that this is only allowed as it on the right hand side of an assignment; this type of ternary is disallowed everywhere else. See defaultAssignment option below for more details.\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"defaultAssignment\": true` (default) allows the conditional expression as a default assignment pattern\n* `\"defaultAssignment\": false` disallows the conditional expression as a default assignment pattern\n\n### defaultAssignment\n\nThe defaultAssignment option allows expressions of the form `x ? x : expr` (where `x` is any identifier and `expr` is any expression) as the right hand side of assignments (but nowhere else).\n\nExamples of additional **incorrect** code for this rule with the `{ \"defaultAssignment\": false }` option:\n\n```js\n/*eslint no-unneeded-ternary: [\"error\", { \"defaultAssignment\": false }]*/\n\nvar a = x ? x : 1;\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with unnecessary complexity in conditional expressions.\n\n## Related Rules\n\n* [no-ternary](no-ternary.md)\n* [no-nested-ternary](no-nested-ternary.md)\n"
	],
	[
		"no-unreachable",
		"# disallow unreachable code after `return`, `throw`, `continue`, and `break` statements (no-unreachable)\n\nBecause the `return`, `throw`, `break`, and `continue` statements unconditionally exit a block of code, any statements after them cannot be executed. Unreachable statements are usually a mistake.\n\n```js\nfunction fn() {\n    x = 1;\n    return x;\n    x = 3; // this will never execute\n}\n```\n\n## Rule Details\n\nThis rule disallows unreachable code after `return`, `throw`, `continue`, and `break` statements.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unreachable: \"error\"*/\n\nfunction foo() {\n    return true;\n    console.log(\"done\");\n}\n\nfunction bar() {\n    throw new Error(\"Oops!\");\n    console.log(\"done\");\n}\n\nwhile(value) {\n    break;\n    console.log(\"done\");\n}\n\nthrow new Error(\"Oops!\");\nconsole.log(\"done\");\n\nfunction baz() {\n    if (Math.random() < 0.5) {\n        return;\n    } else {\n        throw new Error();\n    }\n    console.log(\"done\");\n}\n\nfor (;;) {}\nconsole.log(\"done\");\n```\n\nExamples of **correct** code for this rule, because of JavaScript function and variable hoisting:\n\n```js\n/*eslint no-unreachable: \"error\"*/\n\nfunction foo() {\n    return bar();\n    function bar() {\n        return 1;\n    }\n}\n\nfunction bar() {\n    return x;\n    var x;\n}\n\nswitch (foo) {\n    case 1:\n        break;\n        var x;\n}\n```\n"
	],
	[
		"no-unsafe-finally",
		"# disallow control flow statements in `finally` blocks (no-unsafe-finally)\n\nJavaScript suspends the control flow statements of `try` and `catch` blocks until the execution of `finally` block finishes. So, when `return`, `throw`, `break`, or `continue` is used in `finally`, control flow statements inside `try` and `catch` are overwritten, which is considered as unexpected behavior. Such as:\n\n```js\n// We expect this function to return 1;\n(() => {\n    try {\n        return 1; // 1 is returned but suspended until finally block ends\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3; // 3 is returned before 1, which we did not expect\n    }\n})();\n\n// > 3\n```\n\n```js\n// We expect this function to throw an error, then return\n(() => {\n    try {\n        throw new Error(\"Try\"); // error is thrown but suspended until finally block ends\n    } finally {\n        return 3; // 3 is returned before the error is thrown, which we did not expect\n    }\n})();\n\n// > 3\n```\n\n```js\n// We expect this function to throw Try(...) error from the catch block\n(() => {\n    try {\n        throw new Error(\"Try\")\n    } catch(err) {\n        throw err; // The error thrown from try block is caught and rethrown\n    } finally {\n        throw new Error(\"Finally\"); // Finally(...) is thrown, which we did not expect\n    }\n})();\n\n// > Uncaught Error: Finally(...)\n```\n\n```js\n// We expect this function to return 0 from try block.\n(() => {\n  label: try {\n    return 0; // 0 is returned but suspended until finally block ends\n  } finally {\n    break label; // It breaks out the try-finally block, before 0 is returned.\n  }\n  return 1;\n})();\n\n// > 1\n```\n\n## Rule Details\n\nThis rule disallows `return`, `throw`, `break`, and `continue` statements inside `finally` blocks. It allows indirect usages, such as in `function` or `class` definitions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3;\n    }\n};\n```\n\n```js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        throw new Error;\n    }\n};\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        console.log(\"hola!\");\n    }\n};\n```\n\n```js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function() {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        let a = function() {\n            return \"hola!\";\n        }\n    }\n};\n```\n\n```js\n/*eslint no-unsafe-finally: \"error\"*/\nlet foo = function(a) {\n    try {\n        return 1;\n    } catch(err) {\n        return 2;\n    } finally {\n        switch(a) {\n            case 1: {\n                console.log(\"hola!\")\n                break;\n            }\n        }\n    }\n};\n```\n\n## When Not To Use It\n\nIf you want to allow control flow operations in `finally` blocks, you can turn this rule off.\n"
	],
	[
		"no-unsafe-negation",
		"# disallow negating the left operand of relational operators (no-unsafe-negation)\n\nJust as developers might type `-a + b` when they mean `-(a + b)` for the negative of a sum, they might type `!key in object` by mistake when they almost certainly mean `!(key in object)` to test that a key is not in an object. `!obj instanceof Ctor` is similar.\n\n## Rule Details\n\nThis rule disallows negating the left operand of [Relational Operators](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Expressions_and_Operators#Relational_operators).\n\nRelational Operators are:\n\n- `in` operator.\n- `instanceof` operator.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!key in object) {\n    // operator precedence makes it equivalent to (!key) in object\n    // and type conversion makes it equivalent to (key ? \"false\" : \"true\") in object\n}\n\nif (!obj instanceof Ctor) {\n    // operator precedence makes it equivalent to (!obj) instanceof Ctor\n    // and it equivalent to always false since boolean values are not objects.\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!(key in object)) {\n    // key is not in object\n}\n\nif (!(obj instanceof Ctor)) {\n    // obj is not an instance of Ctor\n}\n```\n\n### Exception\n\nFor rare situations when negating the left operand is intended, this rule allows an exception.\nIf the whole negation is explicitly wrapped in parentheses, the rule will not report a problem.\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif ((!foo) in object) {\n    // allowed, because the negation is explicitly wrapped in parentheses\n    // it is equivalent to (foo ? \"false\" : \"true\") in object\n    // this is allowed as an exception for rare situations when that is the intended meaning\n}\n\nif((\"\" + !foo) in object) {\n    // you can also make the intention more explicit, with type conversion\n}\n```\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unsafe-negation: \"error\"*/\n\nif (!(foo) in object) {\n    // this is not an allowed exception\n}\n```\n\n## When Not To Use It\n\nIf you don't want to notify unsafe logical negations, then it's safe to disable this rule.\n"
	],
	[
		"no-unused-expressions",
		"# Disallow Unused Expressions (no-unused-expressions)\n\nAn unused expression which has no effect on the state of the program indicates a logic error.\n\nFor example, `n + 1;` is not a syntax error, but it might be a typing mistake where a programmer meant an assignment statement `n += 1;` instead. Sometimes, such unused expressions may be eliminated by some build tools in production environment, which possibly breaks application logic.\n\n## Rule Details\n\nThis rule aims to eliminate unused expressions which have no effect on the state of the program.\n\nThis rule does not apply to function calls or constructor calls with the `new` operator, because they could have *side effects* on the state of the program.\n\n```js\nvar i = 0;\nfunction increment() { i += 1; }\nincrement(); // return value is unused, but i changed as a side effect\n\nvar nThings = 0;\nfunction Thing() { nThings += 1; }\nnew Thing(); // constructed object is unused, but nThings changed as a side effect\n```\n\nThis rule does not apply to directives (which are in the form of literal string expressions such as `\"use strict\";` at the beginning of a script, module, or function).\n\nSequence expressions (those using a comma, such as `a = 1, b = 2`) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.\n\n## Options\n\nThis rule, in its default state, does not require any arguments. If you would like to enable one or more of the following you may pass an object with the options set as follows:\n\n* `allowShortCircuit` set to `true` will allow you to use short circuit evaluations in your expressions (Default: `false`).\n* `allowTernary` set to `true` will enable you to use ternary operators in your expressions similarly to short circuit evaluations (Default: `false`).\n* `allowTaggedTemplates` set to `true` will enable you to use tagged template literals in your expressions (Default: `false`).\n\nThese options allow unused expressions *only if all* of the code paths either directly change the state (for example, assignment statement) or could have *side effects* (for example, function call).\n\nExamples of **incorrect** code for the default `{ \"allowShortCircuit\": false, \"allowTernary\": false }` options:\n\n```js\n/*eslint no-unused-expressions: \"error\"*/\n\n0\n\nif(0) 0\n\n{0}\n\nf(0), {}\n\na && b()\n\na, b()\n\nc = a, b;\n\na() && function namedFunctionInExpressionContext () {f();}\n\n(function anIncompleteIIFE () {});\n\ninjectGlobal`body{ color: red; }`\n\n```\n\nNote that one or more string expression statements (with or without semi-colons) will only be considered as unused if they are not in the beginning of a script, module, or function (alone and uninterrupted by other statements). Otherwise, they will be treated as part of a \"directive prologue\", a section potentially usable by JavaScript engines. This includes \"strict mode\" directives.\n\n```js\n\"use strict\";\n\"use asm\"\n\"use stricter\";\n\"use babel\"\n\"any other strings like this in the prologue\";\n```\n\nExamples of **correct** code for the default `{ \"allowShortCircuit\": false, \"allowTernary\": false }` options:\n\n```js\n/*eslint no-unused-expressions: \"error\"*/\n\n{} // In this context, this is a block statement, not an object literal\n\n{myLabel: someVar} // In this context, this is a block statement with a label and expression, not an object literal\n\nfunction namedFunctionDeclaration () {}\n\n(function aGenuineIIFE () {}());\n\nf()\n\na = 0\n\nnew C\n\ndelete a.b\n\nvoid a\n```\n\n### allowShortCircuit\n\nExamples of **incorrect** code for the `{ \"allowShortCircuit\": true }` option:\n\n```js\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }]*/\n\na || b\n```\n\nExamples of **correct** code for the `{ \"allowShortCircuit\": true }` option:\n\n```js\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }]*/\n\na && b()\na() || (b = c)\n```\n\n### allowTernary\n\nExamples of **incorrect** code for the `{ \"allowTernary\": true }` option:\n\n```js\n/*eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }]*/\n\na ? b : 0\na ? b : c()\n```\n\nExamples of **correct** code for the `{ \"allowTernary\": true }` option:\n\n```js\n/*eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }]*/\n\na ? b() : c()\na ? (b = c) : d()\n```\n\n### allowShortCircuit and allowTernary\n\nExamples of **correct** code for the `{ \"allowShortCircuit\": true, \"allowTernary\": true }` options:\n\n```js\n/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true, \"allowTernary\": true }]*/\n\na ? b() || (c = d) : e()\n```\n\n### allowTaggedTemplates\n\nExamples of **incorrect** code for the `{ \"allowTaggedTemplates\": true }` option:\n\n```js\n/*eslint no-unused-expressions: [\"error\", { \"allowTaggedTemplates\": true }]*/\n\n`some untagged template string`;\n```\n\nExamples of **correct** code for the `{ \"allowTaggedTemplates\": true }` option:\n\n```js\n/*eslint no-unused-expressions: [\"error\", { \"allowTaggedTemplates\": true }]*/\n\ntag`some tagged template string`;\n```\n"
	],
	[
		"no-unused-labels",
		"# Disallow Unused Labels (no-unused-labels)\n\nLabels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.\n\n```js\nOUTER_LOOP:\nfor (const student of students) {\n    if (checkScores(student.scores)) {\n        continue;\n    }\n    doSomething(student);\n}\n```\n\nIn this case, probably removing `OUTER_LOOP:` had been forgotten.\nSuch labels take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused labels.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-labels: \"error\"*/\n\nA: var foo = 0;\n\nB: {\n    foo();\n}\n\nC:\nfor (let i = 0; i < 10; ++i) {\n    foo();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-labels: \"error\"*/\n\nA: {\n    if (foo()) {\n        break A;\n    }\n    bar();\n}\n\nB:\nfor (let i = 0; i < 10; ++i) {\n    if (foo()) {\n        break B;\n    }\n    bar();\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unused labels, then it's safe to disable this rule.\n\n## Related Rules\n\n* [no-extra-label](./no-extra-label.md)\n* [no-labels](./no-labels.md)\n* [no-label-var](./no-label-var.md)\n"
	],
	[
		"no-unused-vars",
		"# Disallow Unused Variables (no-unused-vars)\n\nVariables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.\n\n## Rule Details\n\nThis rule is aimed at eliminating unused variables, functions, and function parameters.\n\nA variable `foo` is considered to be used if any of the following are true:\n\n* It is called (`foo()`) or constructed (`new foo()`)\n* It is read (`var bar = foo`)\n* It is passed into a function as an argument (`doSomething(foo)`)\n* It is read inside of a function that is passed to another function (`doSomething(function() { foo(); })`)\n\nA variable is *not* considered to be used if it is only ever declared (`var foo = 5`) or assigned to (`foo = 7`).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nvar x;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-unused-vars: \"error\"*/\n\nvar x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the descructured array is used.\nfunction getY([, y]) {\n    return y;\n}\n```\n\n### exported\n\nIn environments outside of CommonJS or ECMAScript modules, you may use `var` to create a global variable that may be used by other scripts. You can use the `/* exported variableName */` comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that `/* exported */` has no effect for any of the following:\n\n* when the environment is `node` or `commonjs`\n* when `parserOptions.sourceType` is `module`\n* when `ecmaFeatures.globalReturn` is `true`\n\nThe line comment `// exported variableName` will not work as `exported` is not line-specific.\n\nExamples of **correct** code for `/* exported variableName */` operation:\n\n```js\n/* exported global_var */\n\nvar global_var = 42;\n```\n\n## Options\n\nThis rule takes one argument which can be a string or an object. The string settings are the same as those of the `vars` property (explained below).\n\nBy default this rule is enabled with `all` option for variables and `after-used` for arguments.\n\n```json\n{\n    \"rules\": {\n        \"no-unused-vars\": [\"error\", { \"vars\": \"all\", \"args\": \"after-used\", \"ignoreRestSiblings\": false }]\n    }\n}\n```\n\n### vars\n\nThe `vars` option has two settings:\n\n* `all` checks all variables for usage, including those in the global scope. This is the default setting.\n* `local` checks only that locally-declared variables are used but will allow global variables to be unused.\n\n#### vars: local\n\nExamples of **correct** code for the `{ \"vars\": \"local\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }]*/\n/*global some_unused_var */\n\nsome_unused_var = 42;\n```\n\n### varsIgnorePattern\n\nThe `varsIgnorePattern` option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain `ignored` or `Ignored`.\n\nExamples of **correct** code for the `{ \"varsIgnorePattern\": \"[iI]gnored\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"[iI]gnored\" }]*/\n\nvar firstVarIgnored = 1;\nvar secondVar = 2;\nconsole.log(secondVar);\n```\n\n### args\n\nThe `args` option has three settings:\n\n* `after-used` - unused positional arguments that occur before the last used argument will not be checked, but all named arguments and all positional arguments after the last used argument will be checked.\n* `all` - all named arguments must be used.\n* `none` - do not check arguments.\n\n#### args: after-used\n\nExamples of **incorrect** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"after-used\" }]*/\n\n// 2 errors, for the parameters after the last used parameter (bar)\n// \"baz\" is defined but never used\n// \"qux\" is defined but never used\n(function(foo, bar, baz, qux) {\n    return bar;\n})();\n```\n\nExamples of **correct** code for the default `{ \"args\": \"after-used\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", {\"args\": \"after-used\"}]*/\n\n(function(foo, bar, baz, qux) {\n    return qux;\n})();\n```\n\n#### args: all\n\nExamples of **incorrect** code for the `{ \"args\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"all\" }]*/\n\n// 2 errors\n// \"foo\" is defined but never used\n// \"baz\" is defined but never used\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n#### args: none\n\nExamples of **correct** code for the `{ \"args\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"args\": \"none\" }]*/\n\n(function(foo, bar, baz) {\n    return bar;\n})();\n```\n\n### ignoreRestSiblings\n\nThe `ignoreRestSiblings` option is a boolean (default: `false`). Using a [Rest Property](https://github.com/tc39/proposal-object-rest-spread) it is possible to \"omit\" properties from an object, but by default the sibling properties are marked as \"unused\". With this option enabled the rest property's siblings are ignored.\n\nExamples of **correct** code for the `{ \"ignoreRestSiblings\": true }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n// 'type' is ignored because it has a rest property sibling.\nvar { type, ...coords } = data;\n```\n\n### argsIgnorePattern\n\nThe `argsIgnorePattern` option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.\n\nExamples of **correct** code for the `{ \"argsIgnorePattern\": \"^_\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"argsIgnorePattern\": \"^_\" }]*/\n\nfunction foo(x, _y) {\n    return x + 1;\n}\nfoo();\n```\n\n### caughtErrors\n\nThe `caughtErrors` option is used for `catch` block arguments validation.\n\nIt has two settings:\n\n* `none` - do not check error objects. This is the default setting.\n* `all` - all named arguments must be used.\n\n#### caughtErrors: none\n\nNot specifying this rule is equivalent of assigning it to `none`.\n\nExamples of **correct** code for the `{ \"caughtErrors\": \"none\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"none\" }]*/\n\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n#### caughtErrors: all\n\nExamples of **incorrect** code for the `{ \"caughtErrors\": \"all\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrors\": \"all\" }]*/\n\n// 1 error\n// \"err\" is defined but never used\ntry {\n    //...\n} catch (err) {\n    console.error(\"errors\");\n}\n```\n\n### caughtErrorsIgnorePattern\n\nThe `caughtErrorsIgnorePattern` option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.\n\nExamples of **correct** code for the `{ \"caughtErrorsIgnorePattern\": \"^ignore\" }` option:\n\n```js\n/*eslint no-unused-vars: [\"error\", { \"caughtErrorsIgnorePattern\": \"^ignore\" }]*/\n\ntry {\n    //...\n} catch (ignoreErr) {\n    console.error(\"errors\");\n}\n```\n\n\n## When Not To Use It\n\nIf you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.\n"
	],
	[
		"no-use-before-define",
		"# Disallow Early Use (no-use-before-define)\n\nIn JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.\n\nIn ES6, block-level bindings (`let` and `const`) introduce a \"temporal dead zone\" where a `ReferenceError` will be thrown with any attempt to access the variable before its declaration.\n\n## Rule Details\n\nThis rule will warn when it encounters a reference to an identifier that has not yet been declared.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nalert(a);\nvar a = 10;\n\nf();\nfunction f() {}\n\nfunction g() {\n    return b;\n}\nvar b = 1;\n\n{\n    alert(c);\n    let c = 1;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-use-before-define: \"error\"*/\n/*eslint-env es6*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n{\n    let c;\n    c++;\n}\n```\n\n## Options\n\n```json\n{\n    \"no-use-before-define\": [\"error\", { \"functions\": true, \"classes\": true }]\n}\n```\n\n* `functions` (`boolean`) -\n  The flag which shows whether or not this rule checks function declarations.\n  If this is `true`, this rule warns every reference to a function before the function declaration.\n  Otherwise, ignores those references.\n  Function declarations are hoisted, so it's safe.\n  Default is `true`.\n* `classes` (`boolean`) -\n  The flag which shows whether or not this rule checks class declarations of upper scopes.\n  If this is `true`, this rule warns every reference to a class before the class declaration.\n  Otherwise, ignores those references if the declaration is in upper function scopes.\n  Class declarations are not hoisted, so it might be danger.\n  Default is `true`.\n* `variables` (`boolean`) -\n  This flag determines whether or not the rule checks variable declarations in upper scopes.\n  If this is `true`, the rule warns every reference to a variable before the variable declaration.\n  Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration.\n  Default is `true`.\n\nThis rule accepts `\"nofunc\"` string as an option.\n`\"nofunc\"` is the same as `{ \"functions\": false, \"classes\": true }`.\n\n### functions\n\nExamples of **correct** code for the `{ \"functions\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"functions\": false }]*/\n\nf();\nfunction f() {}\n```\n\n### classes\n\nExamples of **incorrect** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nnew A();\nclass A {\n}\n```\n\nExamples of **correct** code for the `{ \"classes\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"classes\": false }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    return new A();\n}\n\nclass A {\n}\n```\n\n### variables\n\nExamples of **incorrect** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nconsole.log(foo);\nvar foo = 1;\n```\n\nExamples of **correct** code for the `{ \"variables\": false }` option:\n\n```js\n/*eslint no-use-before-define: [\"error\", { \"variables\": false }]*/\n\nfunction baz() {\n    console.log(foo);\n}\n\nvar foo = 1;\n```\n"
	],
	[
		"no-useless-call",
		"# Disallow unnecessary `.call()` and `.apply()`. (no-useless-call)\n\nThe function invocation can be written by `Function.prototype.call()` and `Function.prototype.apply()`.\nBut `Function.prototype.call()` and `Function.prototype.apply()` are slower than the normal function invocation.\n\n## Rule Details\n\nThis rule is aimed to flag usage of `Function.prototype.call()` and `Function.prototype.apply()` that can be replaced with the normal function invocation.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-call: \"error\"*/\n\n// These are same as `foo(1, 2, 3);`\nfoo.call(undefined, 1, 2, 3);\nfoo.apply(undefined, [1, 2, 3]);\nfoo.call(null, 1, 2, 3);\nfoo.apply(null, [1, 2, 3]);\n\n// These are same as `obj.foo(1, 2, 3);`\nobj.foo.call(obj, 1, 2, 3);\nobj.foo.apply(obj, [1, 2, 3]);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-call: \"error\"*/\n\n// The `this` binding is different.\nfoo.call(obj, 1, 2, 3);\nfoo.apply(obj, [1, 2, 3]);\nobj.foo.call(null, 1, 2, 3);\nobj.foo.apply(null, [1, 2, 3]);\nobj.foo.call(otherObj, 1, 2, 3);\nobj.foo.apply(otherObj, [1, 2, 3]);\n\n// The argument list is variadic.\n// Those are warned by the `prefer-spread` rule.\nfoo.apply(undefined, args);\nfoo.apply(null, args);\nobj.foo.apply(obj, args);\n```\n\n## Known Limitations\n\nThis rule compares code statically to check whether or not `thisArg` is changed.\nSo if the code about `thisArg` is a dynamic expression, this rule cannot judge correctly.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-call: \"error\"*/\n\na[i++].foo.call(a[i++], 1, 2, 3);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-call: \"error\"*/\n\na[++i].foo.call(a[i], 1, 2, 3);\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary `.call()` and `.apply()`, you can safely disable this rule.\n\n## Related Rules\n\n* [prefer-spread](prefer-spread.md)\n"
	],
	[
		"no-useless-catch",
		"# Disallow unnecessary catch clauses (no-useless-catch)\n\nA `catch` clause that only rethrows the original error is redundant, and has no effect on the runtime behavior of the program. These redundant clauses can be a source of confusion and code bloat, so it's better to disallow these unnecessary `catch` clauses.\n\n## Rule Details\n\nThis rule reports `catch` clauses that only `throw` the caught error.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-catch: \"error\"*/\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n}\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n} finally {\n  cleanUp();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-catch: \"error\"*/\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  doSomethingBeforeRethrow();\n  throw e;\n}\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  handleError(e);\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary catch clauses, you can safely disable this rule.\n"
	],
	[
		"no-useless-computed-key",
		"# Disallow unnecessary computed property keys on objects (no-useless-computed-key)\n\nIt's unnecessary to use computed properties with literals such as:\n\n```js\nvar foo = {[\"a\"]: \"b\"};\n```\n\nThe code can be rewritten as:\n\n```js\nvar foo = {\"a\": \"b\"};\n```\n\n## Rule Details\n\nThis rule disallows unnecessary usage of computed property keys.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-computed-key: \"error\"*/\n/*eslint-env es6*/\n\nvar a = { ['0']: 0 };\nvar a = { ['0+1,234']: 0 };\nvar a = { [0]: 0 };\nvar a = { ['x']: 0 };\nvar a = { ['x']() {} };\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-computed-key: \"error\"*/\n\nvar c = { 'a': 0 };\nvar c = { 0: 0 };\nvar a = { x() {} };\nvar c = { a: 0 };\nvar c = { '0+1,234': 0 };\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary computed property keys, you can safely disable this rule.\n"
	],
	[
		"no-useless-concat",
		"# Disallow unnecessary concatenation of strings (no-useless-concat)\n\nIt's unnecessary to concatenate two strings together, such as:\n\n```js\nvar foo = \"a\" + \"b\";\n```\n\nThis code is likely the result of refactoring where a variable was removed from the concatenation (such as `\"a\" + b + \"b\"`). In such a case, the concatenation isn't important and the code can be rewritten as:\n\n```js\nvar foo = \"ab\";\n```\n\n## Rule Details\n\nThis rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n/*eslint-env es6*/\n\nvar a = `some` + `string`;\n\n// these are the same as \"10\"\nvar a = '1' + '0';\nvar a = '1' + `0`;\nvar a = `1` + '0';\nvar a = `1` + `0`;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-concat: \"error\"*/\n\n// when a non string is included\nvar c = a + b;\nvar c = '1' + a;\nvar a = 1 + '1';\nvar c = 1 - 2;\n// when the string concatenation is multiline\nvar c = \"foo\" +\n    \"bar\";\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary string concatenation, you can safely disable this rule.\n"
	],
	[
		"no-useless-constructor",
		"# Disallow unnecessary constructor (no-useless-constructor)\n\nES2015 provides a default class constructor if one is not specified. As such, it is unnecessary to provide an empty constructor or one that simply delegates into its parent class, as in the following examples:\n\n```js\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (value) {\n      super(value);\n    }\n}\n```\n\n## Rule Details\n\nThis rule flags class constructors that can be safely removed without changing how the class works.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-constructor: \"error\"*/\n/*eslint-env es6*/\n\nclass A {\n    constructor () {\n    }\n}\n\nclass B extends A {\n    constructor (...args) {\n      super(...args);\n    }\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-constructor: \"error\"*/\n\nclass A { }\n\nclass A {\n    constructor () {\n        doSomething();\n    }\n}\n\nclass B extends A {\n    constructor() {\n        super('foo');\n    }\n}\n\nclass B extends A {\n    constructor() {\n        super();\n        doSomething();\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary constructors, you can safely disable this rule.\n"
	],
	[
		"no-useless-escape",
		"# Disallow unnecessary escape usage (no-useless-escape)\n\nEscaping non-special characters in strings, template literals, and regular expressions doesn't have any effect, as demonstrated in the following example:\n\n```js\nlet foo = \"hol\\a\"; // > foo = \"hola\"\nlet bar = `${foo}\\!`; // > bar = \"hola!\"\nlet baz = /\\:/ // same functionality with /:/\n```\n\n## Rule Details\n\nThis rule flags escapes that can be safely removed without changing behavior.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-useless-escape: \"error\"*/\n\n\"\\'\";\n'\\\"';\n\"\\#\";\n\"\\e\";\n`\\\"`;\n`\\\"${foo}\\\"`;\n`\\#{foo}`;\n/\\!/;\n/\\@/;\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-useless-escape: \"error\"*/\n\n\"\\\"\";\n'\\'';\n\"\\x12\";\n\"\\u00a9\";\n\"\\371\";\n\"xs\\u2111\";\n`\\``;\n`\\${${foo}}`;\n`$\\{${foo}}`;\n/\\\\/g;\n/\\t/g;\n/\\w\\$\\*\\^\\./;\n\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about unnecessary escapes, you can safely disable this rule.\n"
	],
	[
		"no-useless-rename",
		"# Disallow renaming import, export, and destructured assignments to the same name (no-useless-rename)\n\nES2015 allows for the renaming of references in import and export statements as well as destructuring assignments. This gives programmers a concise syntax for performing these operations while renaming these references:\n\n```js\nimport { foo as bar } from \"baz\";\nexport { foo as bar };\nlet { foo: bar } = baz;\n```\n\nWith this syntax, it is possible to rename a reference to the same name. This is a completely redundant operation, as this is the same as not renaming at all. For example, this:\n\n```js\nimport { foo as foo } from \"bar\";\nexport { foo as foo };\nlet { foo: foo } = bar;\n```\n\nis the same as:\n\n```js\nimport { foo } from \"bar\";\nexport { foo };\nlet { foo } = bar;\n```\n\n## Rule Details\n\nThis rule disallows the renaming of import, export, and destructured assignments to the same name.\n\nSee Also:\n\n- [`object-shorthand`](https://eslint.org/docs/rules/object-shorthand) which can enforce this behavior for properties in object literals.\n\n## Options\n\nThis rule allows for more fine-grained control with the following options:\n\n- `ignoreImport`: When set to `true`, this rule does not check imports\n- `ignoreExport`: When set to `true`, this rule does not check exports\n- `ignoreDestructuring`: When set to `true`, this rule does not check destructuring assignments\n\nBy default, all options are set to `false`:\n\n```json\n\"no-useless-rename\": [\"error\", {\n    \"ignoreDestructuring\": false,\n    \"ignoreImport\": false,\n    \"ignoreExport\": false\n}]\n```\n\nExamples of **incorrect** code for this rule by default:\n\n```js\n/*eslint no-useless-rename: \"error\"*/\n\nimport { foo as foo } from \"bar\";\nexport { foo as foo };\nexport { foo as foo } from \"bar\";\nlet { foo: foo } = bar;\nlet { 'foo': foo } = bar;\nfunction foo({ bar: bar }) {}\n({ foo: foo }) => {}\n```\n\nExamples of **correct** code for this rule by default:\n\n```js\n/*eslint no-useless-rename: \"error\"*/\n\nimport * as foo from \"foo\";\nimport { foo } from \"bar\";\nimport { foo as bar } from \"baz\";\n\nexport { foo };\nexport { foo as bar };\nexport { foo as bar } from \"foo\";\n\nlet { foo } = bar;\nlet { foo: bar } = baz;\nlet { [foo]: foo } = bar;\n\nfunction foo({ bar }) {}\nfunction foo({ bar: baz }) {}\n\n({ foo }) => {}\n({ foo: bar }) => {}\n```\n\nExamples of **correct** code for this rule with `{ ignoreImport: true }`:\n\n```js\n/*eslint no-useless-rename: [\"error\", { ignoreImport: true }]*/\n\nimport { foo as foo } from \"bar\";\n```\n\nExamples of **correct** code for this rule with `{ ignoreExport: true }`:\n\n```js\n/*eslint no-useless-rename: [\"error\", { ignoreExport: true }]*/\n\nexport { foo as foo };\nexport { foo as foo } from \"bar\";\n```\n\nExamples of **correct** code for this rule with `{ ignoreDestructuring: true }`:\n\n```js\n/*eslint no-useless-rename: [\"error\", { ignoreDestructuring: true }]*/\n\nlet { foo: foo } = bar;\nfunction foo({ bar: bar }) {}\n({ foo: foo }) => {}\n```\n\n## When Not To Use It\n\nYou can safely disable this rule if you do not care about redundantly renaming import, export, and destructuring assignments.\n\n## Compatibility\n\n- **JSCS**: [disallowIdenticalDestructuringNames](https://jscs-dev.github.io/rule/disallowIdenticalDestructuringNames)\n"
	],
	[
		"no-useless-return",
		"# Disallow redundant return statements (no-useless-return)\n\nA `return;` statement with nothing after it is redundant, and has no effect on the runtime behavior of a function. This can be confusing, so it's better to disallow these redundant statements.\n\n## Rule Details\n\nThis rule aims to report redundant `return` statements.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/* eslint no-useless-return: \"error\" */\n\nfunction foo() { return; }\n\nfunction foo() {\n  doSomething();\n  return;\n}\n\nfunction foo() {\n  if (condition) {\n    bar();\n    return;\n  } else {\n    baz();\n  }\n}\n\nfunction foo() {\n  switch (bar) {\n    case 1:\n      doSomething();\n    default:\n      doSomethingElse();\n      return;\n  }\n}\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/* eslint no-useless-return: \"error\" */\n\nfunction foo() { return 5; }\n\nfunction foo() {\n  return doSomething();\n}\n\nfunction foo() {\n  if (condition) {\n    bar();\n    return;\n  } else {\n    baz();\n  }\n  qux();\n}\n\nfunction foo() {\n  switch (bar) {\n    case 1:\n      doSomething();\n      return;\n    default:\n      doSomethingElse();\n  }\n}\n\nfunction foo() {\n  for (const foo of bar) {\n    return;\n  }\n}\n\n```\n\n## When Not To Use It\n\nIf you don't care about disallowing redundant return statements, you can turn off this rule.\n"
	],
	[
		"no-var",
		"# require `let` or `const` instead of `var` (no-var)\n\nECMAScript 6 allows programmers to create variables with block scope instead of function scope using the `let`\nand `const` keywords. Block scope is common in many other programming languages and helps programmers avoid mistakes\nsuch as:\n\n```js\nvar count = people.length;\nvar enoughFood = count > sandwiches.length;\n\nif (enoughFood) {\n    var count = sandwiches.length; // accidentally overriding the count variable\n    console.log(\"We have \" + count + \" sandwiches for everyone. Plenty for all!\");\n}\n\n// our count variable is no longer accurate\nconsole.log(\"We have \" + count + \" people and \" + sandwiches.length + \" sandwiches!\");\n```\n\n## Rule Details\n\nThis rule is aimed at discouraging the use of `var` and encouraging the use of `const` or `let` instead.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-var: \"error\"*/\n\nvar x = \"y\";\nvar CONFIG = {};\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-var: \"error\"*/\n/*eslint-env es6*/\n\nlet x = \"y\";\nconst CONFIG = {};\n```\n\n## When Not To Use It\n\nIn addition to non-ES6 environments, existing JavaScript projects that are beginning to introduce ES6 into their\ncodebase may not want to apply this rule if the cost of migrating from `var` to `let` is too costly.\n"
	],
	[
		"no-void",
		"# Disallow use of the void operator. (no-void)\n\nThe `void` operator takes an operand and returns `undefined`: `void expression` will evaluate `expression` and return `undefined`. It can be used to ignore any side effects `expression` may produce:\n\nThe common case of using `void` operator is to get a \"pure\" `undefined` value as prior to ES5 the `undefined` variable was mutable:\n\n```js\n// will always return undefined\n(function(){\n    return void 0;\n})();\n\n// will return 1 in ES3 and undefined in ES5+\n(function(){\n    undefined = 1;\n    return undefined;\n})();\n\n// will throw TypeError in ES5+\n(function(){\n    'use strict';\n    undefined = 1;\n})();\n```\n\nAnother common case is to minify code as `void 0` is shorter than `undefined`:\n\n```js\nfoo = void 0;\nfoo = undefined;\n```\n\nWhen used with IIFE (immediately-invoked function expression), `void` can be used to force the function keyword to be treated as an expression instead of a declaration:\n\n```js\nvar foo = 1;\nvoid function(){ foo = 1; }() // will assign foo a value of 1\n+function(){ foo = 1; }() // same as above\n```\n\n```\nfunction(){ foo = 1; }() // will throw SyntaxError\n```\n\nSome code styles prohibit `void` operator, marking it as non-obvious and hard to read.\n\n## Rule Details\n\nThis rule aims to eliminate use of void operator.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-void: \"error\"*/\n\nvoid foo\n\nvar foo = void bar();\n```\n\n## When Not To Use It\n\nIf you intentionally use the `void` operator then you can disable this rule.\n\n## Further Reading\n\n* [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void)\n* [Bad Parts: Appendix B - JavaScript: The Good Parts by Douglas Crockford](https://oreilly.com/javascript/excerpts/javascript-good-parts/bad-parts.html)\n\n## Related Rules\n\n* [no-undef-init](no-undef-init.md)\n* [no-undefined](no-undefined.md)\n"
	],
	[
		"no-warning-comments",
		"# Disallow Warning Comments (no-warning-comments)\n\nDevelopers often add comments to code which is not complete or needs review. Most likely you want to fix or review the code, and then remove the comment, before you consider the code to be production ready.\n\n```js\n// TODO: do something\n// FIXME: this is not a good idea\n```\n\n## Rule Details\n\nThis rule reports comments that include any of the predefined terms specified in its configuration.\n\n## Options\n\nThis rule has an options object literal:\n\n* `\"terms\"`: optional array of terms to match. Defaults to `[\"todo\", \"fixme\", \"xxx\"]`. Terms are matched case-insensitive and as whole words: `fix` would match `FIX` but not `fixing`. Terms can consist of multiple words: `really bad idea`.\n* `\"location\"`: optional string that configures where in your comments to check for matches. Defaults to `\"start\"`. The other value is match `anywhere` in comments.\n\nExample of **incorrect** code for the default `{ \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }` options:\n\n```js\n/*eslint no-warning-comments: \"error\"*/\n\nfunction callback(err, results) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  // TODO\n}\n```\n\nExample of **correct** code for the default `{ \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }` options:\n\n```js\n/*eslint no-warning-comments: \"error\"*/\n\nfunction callback(err, results) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  // NOT READY FOR PRIME TIME\n  // but too bad, it is not a predefined warning term\n}\n```\n\n### terms and location\n\nExamples of **incorrect** code for the `{ \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }` options:\n\n```js\n/*eslint no-warning-comments: [\"error\", { \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }]*/\n\n// TODO: this\n// todo: this too\n// Even this: TODO\n/* /*\n * The same goes for this TODO comment\n * Or a fixme\n * as well as any other term\n */\n```\n\nExamples of **correct** code for the `{ \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }` options:\n\n```js\n/*eslint no-warning-comments: [\"error\", { \"terms\": [\"todo\", \"fixme\", \"any other term\"], \"location\": \"anywhere\" }]*/\n\n// This is to do\n// even not any other    term\n// any other terminal\n/*\n * The same goes for block comments\n * with any other interesting term\n * or fix me this\n */\n```\n\n## When Not To Use It\n\n* If you have a large code base that was not developed with a policy to not use such warning terms, you might get hundreds of warnings / errors which might be counter-productive if you can't fix all of them (e.g. if you don't get the time to do it) as you might overlook other warnings / errors or get used to many of them and don't pay attention on it anymore.\n* Same reason as the point above: You shouldn't configure terms that are used very often (e.g. central parts of the native language used in your comments).\n"
	],
	[
		"no-whitespace-before-property",
		"# disallow whitespace before properties (no-whitespace-before-property)\n\nJavaScript allows whitespace between objects and their properties. However, inconsistent spacing can make code harder to read and can lead to errors.\n\n```js\nfoo. bar .baz . quz\n```\n\n## Rule Details\n\nThis rule disallows whitespace around the dot or before the opening bracket before properties of objects if they are on the same line. This rule allows whitespace when the object and property are on separate lines, as it is common to add newlines to longer chains of properties:\n\n```js\nfoo\n  .bar()\n  .baz()\n  .qux()\n```\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-whitespace-before-property: \"error\"*/\n\nfoo [bar]\n\nfoo. bar\n\nfoo .bar\n\nfoo. bar. baz\n\nfoo. bar()\n  .baz()\n\nfoo\n  .bar(). baz()\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-whitespace-before-property: \"error\"*/\n\nfoo.bar\n\nfoo[bar]\n\nfoo[ bar ]\n\nfoo.bar.baz\n\nfoo\n  .bar().baz()\n\nfoo\n  .bar()\n  .baz()\n\nfoo.\n  bar().\n  baz()\n```\n\n## When Not To Use It\n\nTurn this rule off if you do not care about allowing whitespace around the dot or before the opening bracket before properties of objects if they are on the same line.\n"
	],
	[
		"no-with",
		"# disallow `with` statements (no-with)\n\nThe `with` statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.\n\n## Rule Details\n\nThis rule disallows `with` statements.\n\nIf ESLint parses code in strict mode, the parser (instead of this rule) reports the error.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint no-with: \"error\"*/\n\nwith (point) {\n    r = Math.sqrt(x * x + y * y); // is r a member of point?\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint no-with: \"error\"*/\n/*eslint-env es6*/\n\nconst r = ({x, y}) => Math.sqrt(x * x + y * y);\n```\n\n## When Not To Use It\n\nIf you intentionally use `with` statements then you can disable this rule.\n\n## Further Reading\n\n* [with Statement Considered Harmful](https://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/)\n"
	],
	[
		"nonblock-statement-body-position",
		"# enforce the location of single-line statements (nonblock-statement-body-position)\n\nWhen writing `if`, `else`, `while`, `do-while`, and `for` statements, the body can be a single statement instead of a block. It can be useful to enforce a consistent location for these single statements.\n\nFor example, some developers avoid writing code like this:\n\n```js\nif (foo)\n  bar();\n```\n\nIf another developer attempts to add `baz();` to the `if` statement, they might mistakenly change the code to\n\n```js\nif (foo)\n  bar();\n  baz(); // this line is not in the `if` statement!\n```\n\nTo avoid this issue, one might require all single-line `if` statements to appear directly after the conditional, without a linebreak:\n\n```js\nif (foo) bar();\n```\n\n## Rule Details\n\nThis rule aims to enforce a consistent location for single-line statements.\n\nNote that this rule does not enforce the usage of single-line statements in general. If you would like to disallow single-line statements, use the [`curly`](/docs/rules/curly.md) rule instead.\n\n### Options\n\nThis rule accepts a string option:\n\n* `\"beside\"` (default) disallows a newline before a single-line statement.\n* `\"below\"` requires a newline before a single-line statement.\n* `\"any\"` does not enforce the position of a single-line statement.\n\nAdditionally, the rule accepts an optional object option with an `\"overrides\"` key. This can be used to specify a location for particular statements that override the default. For example:\n\n* `\"beside\", { \"overrides\": { \"while\": \"below\" } }` requires all single-line statements to appear on the same line as their parent, unless the parent is a `while` statement, in which case the single-line statement must not be on the same line.\n* `\"below\", { \"overrides\": { \"do\": \"any\" } }` disallows all single-line statements from appearing on the same line as their parent, unless the parent is a `do-while` statement, in which case the position of the single-line statement is not enforced.\n\nExamples of **incorrect** code for this rule with the default `\"beside\"` option:\n\n```js\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\"] */\n\nif (foo)\n  bar();\nelse\n  baz();\n\nwhile (foo)\n  bar();\n\nfor (let i = 1; i < foo; i++)\n  bar();\n\ndo\n  bar();\nwhile (foo)\n\n```\n\nExamples of **correct** code for this rule with the default `\"beside\"` option:\n\n```js\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\"] */\n\nif (foo) bar();\nelse baz();\n\nwhile (foo) bar();\n\nfor (let i = 1; i < foo; i++) bar();\n\ndo bar(); while (foo)\n\nif (foo) { // block statements are always allowed with this rule\n  bar();\n} else {\n  baz();\n}\n```\n\nExamples of **incorrect** code for this rule with the `\"below\"` option:\n\n```js\n/* eslint nonblock-statement-body-position: [\"error\", \"below\"] */\n\nif (foo) bar();\nelse baz();\n\nwhile (foo) bar();\n\nfor (let i = 1; i < foo; i++) bar();\n\ndo bar(); while (foo)\n```\n\nExamples of **correct** code for this rule with the `\"below\"` option:\n\n```js\n/* eslint nonblock-statement-body-position: [\"error\", \"below\"] */\n\nif (foo)\n  bar();\nelse\n  baz();\n\nwhile (foo)\n  bar();\n\nfor (let i = 1; i < foo; i++)\n  bar();\n\ndo\n  bar();\nwhile (foo)\n\nif (foo) {\n  // Although the second `if` statement is on the same line as the `else`, this is a very common\n  // pattern, so it's not checked by this rule.\n} else if (bar) {\n}\n```\n\nExamples of **incorrect** code for this rule with the `\"beside\", { \"overrides\": { \"while\": \"below\" } }` rule:\n\n```js\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\", { \"overrides\": { \"while\": \"below\" } }] */\n\nif (foo)\n  bar();\n\nwhile (foo) bar();\n```\n\nExamples of **correct** code for this rule with the `\"beside\", { \"overrides\": { \"while\": \"below\" } }` rule:\n\n```js\n/* eslint nonblock-statement-body-position: [\"error\", \"beside\", { \"overrides\": { \"while\": \"below\" } }] */\n\nif (foo) bar();\n\nwhile (foo)\n  bar();\n```\n\n## When Not To Use It\n\nIf you're not concerned about consistent locations of single-line statements, you should not turn on this rule. You can also disable this rule if you're using the `\"all\"` option for the [`curly`](/docs/rules/curly.md) rule, because this will disallow single-line statements entirely.\n\n## Further Reading\n\n* JSCS: [requireNewlineBeforeSingleStatementsInIf](https://jscs-dev.github.io/rule/requireNewlineBeforeSingleStatementsInIf)\n"
	],
	[
		"object-curly-newline",
		"# enforce consistent line breaks inside braces (object-curly-newline)\n\nA number of style guides require or disallow line breaks inside of object braces and other tokens.\n\n## Rule Details\n\nThis rule enforces consistent line breaks inside braces of object literals or destructuring assignments.\n\n## Options\n\nThis rule has either a string option:\n\n* `\"always\"` requires line breaks inside braces\n* `\"never\"` disallows line breaks inside braces\n\nOr an object option:\n\n* `\"multiline\": true` requires line breaks if there are line breaks inside properties or between properties. Otherwise, it disallows line breaks.\n* `\"minProperties\"` requires line breaks if the number of properties is at least the given integer. By default, an error will also be reported if an object contains linebreaks and has fewer properties than the given integer. However, the second behavior is disabled if the `consistent` option is set to `true`\n* `\"consistent\": true` (default) requires that either both curly braces, or neither, directly enclose newlines. Note that enabling this option will also change the behavior of the `minProperties` option. (See `minProperties` above for more information)\n\nYou can specify different options for object literals, destructuring assignments, and named imports and exports:\n\n```json\n{\n    \"object-curly-newline\": [\"error\", {\n        \"ObjectExpression\": \"always\",\n        \"ObjectPattern\": { \"multiline\": true },\n        \"ImportDeclaration\": \"never\",\n        \"ExportDeclaration\": { \"multiline\": true, \"minProperties\": 3 }\n    }]\n}\n```\n\n* `\"ObjectExpression\"` configuration for object literals\n* `\"ObjectPattern\"` configuration for object patterns of destructuring assignments\n* `\"ImportDeclaration\"` configuration for named imports\n* `\"ExportDeclaration\"` configuration for named exports\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo() {\n    dosomething();\n}};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n### multiline\n\nExamples of **incorrect** code for this rule with the `{ \"multiline\": true }` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"multiline\": true }]*/\n/*eslint-env es6*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\nExamples of **correct** code for this rule with the `{ \"multiline\": true }` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"multiline\": true }]*/\n/*eslint-env es6*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n### minProperties\n\nExamples of **incorrect** code for this rule with the `{ \"minProperties\": 2 }` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"minProperties\": 2 }]*/\n/*eslint-env es6*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\nExamples of **correct** code for this rule with the `{ \"minProperties\": 2 }` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"minProperties\": 2 }]*/\n/*eslint-env es6*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {} = obj;\nlet {f} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n### consistent\n\nExamples of **incorrect** code for this rule with the default `{ \"consistent\": true }` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"consistent\": true }]*/\n/*eslint-env es6*/\n\nlet a = {foo: 1\n};\nlet b = {\n    foo: 1};\nlet c = {foo: 1, bar: 2\n};\nlet d = {\n    foo: 1, bar: 2};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {f\n} = obj;\nlet {\n    g} = obj;\nlet {h, i\n} = obj;\nlet {\n    j, k} = obj;\nlet {l = function() {\n    dosomething();\n}} = obj;\n```\n\nExamples of **correct** code for this rule with the default `{ \"consistent\": true }` option:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"consistent\": true }]*/\n/*eslint-env es6*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {\n    foo: 1\n};\nlet d = {\n    foo: 1, bar: 2\n};\nlet e = {\n    foo: 1,\n    bar: 2\n};\nlet f = {foo: function() {dosomething();}};\nlet g = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {} = obj;\nlet {h} = obj;\nlet {i, j} = obj;\nlet {\n    k, l\n} = obj;\nlet {m,\n    n} = obj;\nlet {\n    o,\n    p\n} = obj;\nlet {q = function() {dosomething();}} = obj;\nlet {\n    r = function() {\n        dosomething();\n    }\n} = obj;\n```\n\n### ObjectExpression and ObjectPattern\n\nExamples of **incorrect** code for this rule with the `{ \"ObjectExpression\": \"always\", \"ObjectPattern\": \"never\" }` options:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"ObjectExpression\": \"always\", \"ObjectPattern\": \"never\" }]*/\n/*eslint-env es6*/\n\nlet a = {};\nlet b = {foo: 1};\nlet c = {foo: 1, bar: 2};\nlet d = {foo: 1,\n    bar: 2};\nlet e = {foo: function() {\n    dosomething();\n}};\n\nlet {\n} = obj;\nlet {\n    f\n} = obj;\nlet {\n    g, h\n} = obj;\nlet {\n    i,\n    j\n} = obj;\nlet {\n    k = function() {\n        dosomething();\n    }\n} = obj;\n```\n\nExamples of **correct** code for this rule with the `{ \"ObjectExpression\": \"always\", \"ObjectPattern\": \"never\" }` options:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"ObjectExpression\": \"always\", \"ObjectPattern\": \"never\" }]*/\n/*eslint-env es6*/\n\nlet a = {\n};\nlet b = {\n    foo: 1\n};\nlet c = {\n    foo: 1, bar: 2\n};\nlet d = {\n    foo: 1,\n    bar: 2\n};\nlet e = {\n    foo: function() {\n        dosomething();\n    }\n};\n\nlet {} = obj;\nlet {f} = obj;\nlet {g, h} = obj;\nlet {i,\n    j} = obj;\nlet {k = function() {\n    dosomething();\n}} = obj;\n```\n\n### ImportDeclaration and ExportDeclaration\n\nExamples of **incorrect** code for this rule with the `{ \"ImportDeclaration\": \"always\", \"ExportDeclaration\": \"never\" }` options:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"ImportDeclaration\": \"always\", \"ExportDeclaration\": \"never\" }]*/\n/*eslint-env es6*/\n\nimport {foo, bar} from 'foo-bar';\nimport {foo as f, bar} from 'foo-bar';\nimport {foo,\n    bar} from 'foo-bar';\n\nexport {\n   foo,\n   bar\n};\nexport {\n   foo as f,\n   bar\n} from 'foo-bar';\n```\n\nExamples of **correct** code for this rule with the `{ \"ImportDeclaration\": \"always\", \"ExportDeclaration\": \"never\" }` options:\n\n```js\n/*eslint object-curly-newline: [\"error\", { \"ImportDeclaration\": \"always\", \"ExportDeclaration\": \"never\" }]*/\n/*eslint-env es6*/\n\nimport {\n    foo,\n    bar\n} from 'foo-bar';\nimport {\n    foo as f,\n    bar\n} from 'foo-bar';\n\nexport { foo, bar } from 'foo-bar';\nexport { foo as f, bar } from 'foo-bar';\n```\n\n## Compatibility\n\n* **JSCS**: [requirePaddingNewLinesInObjects](https://jscs-dev.github.io/rule/requirePaddingNewLinesInObjects)\n* **JSCS**: [disallowPaddingNewLinesInObjects](https://jscs-dev.github.io/rule/disallowPaddingNewLinesInObjects)\n\n## When Not To Use It\n\nIf you don't want to enforce consistent line breaks inside braces, then it's safe to disable this rule.\n\n## Related Rules\n\n* [comma-spacing](comma-spacing.md)\n* [key-spacing](key-spacing.md)\n* [object-curly-spacing](object-curly-spacing.md)\n* [object-property-newline](object-property-newline.md)\n"
	],
	[
		"object-curly-spacing",
		"# enforce consistent spacing inside braces (object-curly-spacing)\n\nWhile formatting preferences are very personal, a number of style guides require\nor disallow spaces between curly braces in the following situations:\n\n```js\n// simple object literals\nvar obj = { foo: \"bar\" };\n\n// nested object literals\nvar obj = { foo: { zoo: \"bar\" } };\n\n// destructuring assignment (EcmaScript 6)\nvar { x, y } = y;\n\n// import/export declarations (EcmaScript 6)\nimport { foo } from \"bar\";\nexport { foo };\n```\n\n## Rule Details\n\nThis rule enforces consistent spacing inside braces of object literals, destructuring assignments, and import/export specifiers.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"never\"` (default) disallows spacing inside of braces\n* `\"always\"` requires spacing inside of braces (except `{}`)\n\nObject option:\n\n* `\"arraysInObjects\": true` requires spacing inside of braces of objects beginning and/or ending with an array element (applies when the first option is set to `never`)\n* `\"arraysInObjects\": false` disallows spacing inside of braces of objects beginning and/or ending with an array element (applies when the first option is set to `always`)\n* `\"objectsInObjects\": true` requires spacing inside of braces of objects beginning and/or ending with an object element (applies when the first option is set to `never`)\n* `\"objectsInObjects\": false` disallows spacing inside of braces of objects beginning and/or ending with an object element (applies when the first option is set to `always`)\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"never\"]*/\n\nvar obj = { 'foo': 'bar' };\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux'}, bar};\nvar {x } = y;\nimport { foo } from 'bar';\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"never\"]*/\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': {'bar': 'baz'}, 'qux': 'quxx'};\nvar obj = {\n  'foo': 'bar'\n};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\nvar obj = {};\nvar {x} = y;\nimport {foo} from 'bar';\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"always\"]*/\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': 'bar' };\nvar obj = { baz: {'foo': 'qux'}, bar};\nvar obj = {baz: { 'foo': 'qux' }, bar};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\nvar {x} = y;\nimport {foo } from 'bar';\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"always\"]*/\n\nvar obj = {};\nvar obj = { 'foo': 'bar' };\nvar obj = { 'foo': { 'bar': 'baz' }, 'qux': 'quxx' };\nvar obj = {\n  'foo': 'bar'\n};\nvar { x } = y;\nimport { foo } from 'bar';\n```\n\n#### arraysInObjects\n\nExamples of additional **correct** code for this rule with the `\"never\", { \"arraysInObjects\": true }` options:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"never\", { \"arraysInObjects\": true }]*/\n\nvar obj = {\"foo\": [ 1, 2 ] };\nvar obj = {\"foo\": [ \"baz\", \"bar\" ] };\n```\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"arraysInObjects\": false }` options:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"always\", { \"arraysInObjects\": false }]*/\n\nvar obj = { \"foo\": [ 1, 2 ]};\nvar obj = { \"foo\": [ \"baz\", \"bar\" ]};\n```\n\n#### objectsInObjects\n\nExamples of additional **correct** code for this rule with the `\"never\", { \"objectsInObjects\": true }` options:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"never\", { \"objectsInObjects\": true }]*/\n\nvar obj = {\"foo\": {\"baz\": 1, \"bar\": 2} };\n```\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"objectsInObjects\": false }` options:\n\n```js\n/*eslint object-curly-spacing: [\"error\", \"always\", { \"objectsInObjects\": false }]*/\n\nvar obj = { \"foo\": { \"baz\": 1, \"bar\": 2 }};\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing between curly braces.\n\n## Related Rules\n\n* [array-bracket-spacing](array-bracket-spacing.md)\n* [comma-spacing](comma-spacing.md)\n* [computed-property-spacing](computed-property-spacing.md)\n* [space-in-parens](space-in-parens.md)\n"
	],
	[
		"object-property-newline",
		"# enforce placing object properties on separate lines (object-property-newline)\n\nThis rule permits you to restrict the locations of property specifications in object literals. You may prohibit any part of any property specification from appearing on the same line as any part of any other property specification. You may make this prohibition absolute, or, by invoking an object option, you may allow an exception, permitting an object literal to have all parts of all of its property specifications on a single line.\n\n## Rule Details\n\n### Motivations\n\nThis rule makes it possible to ensure, as some style guides require, that property specifications appear on separate lines for better readability. For example, you can prohibit all of these:\n\n```js\nconst newObject = {a: 1, b: [2, {a: 3, b: 4}]};\nconst newObject = {\n    a: 1, b: [2, {a: 3, b: 4}]\n};\nconst newObject = {\n    a: 1,\n    b: [2, {a: 3, b: 4}]\n};\nconst newObject = {\n    a: 1,\n    b: [\n        2,\n        {a: 3, b: 4}\n    ]\n};\n\n```\n\nInstead of those, you can comply with the rule by writing\n\n```js\nconst newObject = {\n    a: 1,\n    b: [2, {\n        a: 3,\n        b: 4\n    }]\n};\n```\n\nor\n\n```js\nconst newObject = {\n    a: 1,\n    b: [\n        2,\n        {\n            a: 3,\n            b: 4\n        }\n    ]\n};\n```\n\nAnother benefit of this rule is specificity of diffs when a property is changed:\n\n```diff\n// More specific\n var obj = {\n     foo: \"foo\",\n-    bar: \"bar\",\n+    bar: \"bazz\",\n     baz: \"baz\"\n };\n```\n\n```diff\n// Less specific\n-var obj = { foo: \"foo\", bar: \"bar\", baz: \"baz\" };\n+var obj = { foo: \"foo\", bar: \"bazz\", baz: \"baz\" };\n```\n\n### Optional Exception\n\nThe rule offers one object option, `allowAllPropertiesOnSameLine` (a deprecated synonym is `allowMultiplePropertiesPerLine`). If you set it to `true`, object literals such as the first two above, with all property specifications on the same line, will be permitted, but one like\n\n```js\nconst newObject = {\n    a: 'a.m.', b: 'p.m.',\n    c: 'daylight saving time'\n};\n\n```\n\nwill be prohibited, because two properties, but not all properties, appear on the same line.\n\n### Notations\n\nThis rule applies equally to all property specifications, regardless of notation, including:\n\n- `a: 1` (ES5)\n- `a` (ES2015 shorthand property)\n- ``[`prop${a}`]`` (ES2015 computed property name)\n\nThus, the rule (without the object option) prohibits both of these:\n\n```js\nconst newObject = {\n    a: 1, [\n        process.argv[4]\n    ]: '01'\n};\nconst newObject = {\n    a: 1, [process.argv[4]]: '01'\n};\n```\n\n(This behavior differs from that of the JSCS rule cited below, which does not treat the leading `[` of a computed property name as part of that property specification. The JSCS rule prohibits the second of these formats but permits the first.)\n\n### Multiline Properties\n\nThe rule prohibits the colocation on any line of at least 1 character of one property specification with at least 1 character of any other property specification. For example, the rule prohibits\n\n```js\nconst newObject = {a: [\n    'Officiële website van de Europese Unie',\n    'Официален уебсайт на Европейския съюз'\n], b: 2};\n```\n\nbecause 1 character of the specification of `a` (i.e. the trailing `]` of its value) is on the same line as the specification of `b`.\n\nThe optional exception does not excuse this case, because the entire collection of property specifications spans 4 lines, not 1.\n\n### Inter-property Delimiters\n\nThe comma and any whitespace that delimit property specifications are not considered parts of them. Therefore, the rule permits both of these formats:\n\n```js\nconst newFunction = multiplier => ({\n    a: 2 * multiplier,\n    b: 4 * multiplier,\n    c: 8 * multiplier\n});\nconst newFunction = multiplier => ({\n    a: 2 * multiplier\n    , b: 4 * multiplier\n    , c: 8 * multiplier\n});\n```\n\n(This behavior differs from that of the JSCS rule cited below, which permits the first but prohibits the second format.)\n\n### --fix\n\nIf this rule is invoked with the command-line `--fix` option, object literals that violate the rule are generally modified to comply with it. The modification in each case is to move a property specification to the next line whenever there is part or all of a previous property specification on the same line. For example,\n\n```js\nconst newObject = {\n    a: 'a.m.', b: 'p.m.',\n    c: 'daylight saving time'\n};\n```\n\nis converted to\n\n```js\nconst newObject = {\n    a: 'a.m.',\nb: 'p.m.',\n    c: 'daylight saving time'\n};\n```\n\nThe modification does not depend on whether the object option is set to `true`. In other words, ESLint never collects all the property specifications onto a single line, even when the object option would permit that.\n\nESLint does not correct a violation of this rule if a comment immediately precedes the second or subsequent property specification on a line, since ESLint cannot determine which line to put the comment onto.\n\nAs illustrated above, the `--fix` option, applied to this rule, does not comply with other rules, such as `indent`, but, if those other rules are also in effect, the option applies them, too.\n\n## Examples\n\nExamples of **incorrect** code for this rule, with no object option or with `allowAllPropertiesOnSameLine` set to `false`:\n\n```js\n/*eslint object-property-newline: \"error\"*/\n\nconst obj0 = { foo: \"foo\", bar: \"bar\", baz: \"baz\" };\n\nconst obj1 = {\n    foo: \"foo\", bar: \"bar\", baz: \"baz\"\n};\n\nconst obj2 = {\n    foo: \"foo\", bar: \"bar\",\n    baz: \"baz\"\n};\n\nconst obj3 = {\n    [process.argv[3] ? \"foo\" : \"bar\"]: 0, baz: [\n        1,\n        2,\n        4,\n        8\n    ]\n};\n\nconst a = \"antidisestablishmentarianistically\";\nconst b = \"yugoslavyalılaştırabildiklerimizdenmişsiniz\";\nconst obj4 = {a, b};\n\nconst domain = process.argv[4];\nconst obj5 = {\n    foo: \"foo\", [\n    domain.includes(\":\") ? \"complexdomain\" : \"simpledomain\"\n]: true};\n```\n\nExamples of **correct** code for this rule, with no object option or with `allowAllPropertiesOnSameLine` set to `false`:\n\n```js\n/*eslint object-property-newline: \"error\"*/\n\nconst obj1 = {\n    foo: \"foo\",\n    bar: \"bar\",\n    baz: \"baz\"\n};\n\nconst obj2 = {\n    foo: \"foo\"\n    , bar: \"bar\"\n    , baz: \"baz\"\n};\n\nconst user = process.argv[2];\nconst obj3 = {\n    user,\n    [process.argv[3] ? \"foo\" : \"bar\"]: 0,\n    baz: [\n        1,\n        2,\n        4,\n        8\n    ]\n};\n```\n\nExamples of additional **correct** code for this rule with the `{ \"allowAllPropertiesOnSameLine\": true }` option:\n\n```js\n/*eslint object-property-newline: [\"error\", { \"allowAllPropertiesOnSameLine\": true }]*/\n\nconst obj = { foo: \"foo\", bar: \"bar\", baz: \"baz\" };\n\nconst obj2 = {\n    foo: \"foo\", bar: \"bar\", baz: \"baz\"\n};\nconst user = process.argv[2];\nconst obj3 = {\n    user, [process.argv[3] ? \"foo\" : \"bar\"]: 0, baz: [1, 2, 4, 8]\n};\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you want to decide, case-by-case, whether to place property specifications on separate lines.\n\n## Compatibility\n\n- **JSCS**: This rule provides partial compatibility with [requireObjectKeysOnNewLine](https://jscs-dev.github.io/rule/requireObjectKeysOnNewLine).\n\n## Related Rules\n\n- [brace-style](brace-style.md)\n- [comma-dangle](comma-dangle.md)\n- [key-spacing](key-spacing.md)\n- [object-curly-spacing](object-curly-spacing.md)\n"
	],
	[
		"object-shorthand",
		"# Require Object Literal Shorthand Syntax (object-shorthand)\n\nECMAScript 6 provides a concise form for defining object literal methods and properties. This\nsyntax can make defining complex object literals much cleaner.\n\nHere are a few common examples using the ES5 syntax:\n\n```js\n// properties\nvar foo = {\n    x: x,\n    y: y,\n    z: z,\n};\n\n// methods\nvar foo = {\n    a: function() {},\n    b: function() {}\n};\n```\n\nNow here are ES6 equivalents:\n\n```js\n/*eslint-env es6*/\n\n// properties\nvar foo = {x, y, z};\n\n// methods\nvar foo = {\n    a() {},\n    b() {}\n};\n```\n\n## Rule Details\n\nThis rule enforces the use of the shorthand syntax. This applies\nto all methods (including generators) defined in object literals and any\nproperties defined where the key name matches name of the assigned variable.\n\nEach of the following properties would warn:\n\n\n```js\n/*eslint object-shorthand: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = {\n    w: function() {},\n    x: function *() {},\n    [y]: function() {},\n    z: z\n};\n```\n\nIn that case the expected syntax would have been:\n\n```js\n/*eslint object-shorthand: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = {\n    w() {},\n    *x() {},\n    [y]() {},\n    z\n};\n```\n\nThis rule does not flag arrow functions inside of object literals.\nThe following will *not* warn:\n\n```js\n/*eslint object-shorthand: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = {\n    x: (y) => y\n};\n```\n\nSee Also:\n\n- [`no-useless-rename`](https://eslint.org/docs/rules/no-useless-rename) which disallows renaming import, export, and destructured assignments to the same name.\n\n## Options\n\nThe rule takes an option which specifies when it should be applied. It can be set to one of the following values:\n\n- `\"always\"` (default) expects that the shorthand will be used whenever possible.\n- `\"methods\"` ensures the method shorthand is used (also applies to generators).\n- `\"properties\"` ensures the property shorthand is used (where the key and variable name match).\n- `\"never\"` ensures that no property or method shorthand is used in any object literal.\n- `\"consistent\"` ensures that either all shorthand or all long-form will be used in an object literal.\n- `\"consistent-as-needed\"` ensures that either all shorthand or all long-form will be used in an object literal, but ensures all shorthand whenever possible.\n\nYou can set the option in configuration like this:\n\n```json\n{\n    \"object-shorthand\": [\"error\", \"always\"]\n}\n```\n\nAdditionally, the rule takes an optional object configuration:\n\n- `\"avoidQuotes\": true` indicates that long-form syntax is preferred whenever the object key is a string literal (default: `false`). Note that this option can only be enabled when the string option is set to `\"always\"`, `\"methods\"`, or `\"properties\"`.\n- `\"ignoreConstructors\": true` can be used to prevent the rule from reporting errors for constructor functions. (By default, the rule treats constructors the same way as other functions.) Note that this option can only be enabled when the string option is set to `\"always\"` or `\"methods\"`.\n- `\"avoidExplicitReturnArrows\": true` indicates that methods are preferred over explicit-return arrow functions for function properties. (By default, the rule allows either of these.) Note that this option can only be enabled when the string option is set to `\"always\"` or `\"methods\"`.\n\n### `avoidQuotes`\n\n```json\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"avoidQuotes\": true }]\n}\n```\n\nExample of **incorrect** code for this rule with the `\"always\", { \"avoidQuotes\": true }` option:\n\n```js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidQuotes\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n    \"bar-baz\"() {}\n};\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"avoidQuotes\": true }` option:\n\n```js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidQuotes\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n    \"bar-baz\": function() {},\n    \"qux\": qux\n};\n```\n\n### `ignoreConstructors`\n\n```json\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"ignoreConstructors\": true }]\n}\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"ignoreConstructors\": true }` option:\n\n```js\n/*eslint object-shorthand: [\"error\", \"always\", { \"ignoreConstructors\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n    ConstructorFunction: function() {}\n};\n```\n\n### `avoidExplicitReturnArrows`\n\n```json\n{\n    \"object-shorthand\": [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]\n}\n```\n\nExample of **incorrect** code for this rule with the `\"always\", { \"avoidExplicitReturnArrows\": true }` option:\n\n```js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n  foo: (bar, baz) => {\n    return bar + baz;\n  },\n\n  qux: (foobar) => {\n    return foobar * 2;\n  }\n};\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"avoidExplicitReturnArrows\": true }` option:\n\n```js\n/*eslint object-shorthand: [\"error\", \"always\", { \"avoidExplicitReturnArrows\": true }]*/\n/*eslint-env es6*/\n\nvar foo = {\n  foo(bar, baz) {\n    return bar + baz;\n  },\n\n  qux: foobar => foobar * 2\n};\n```\n\nExample of **incorrect** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint object-shorthand: [2, \"consistent\"]*/\n/*eslint-env es6*/\n\nvar foo = {\n    a,\n    b: \"foo\",\n};\n```\n\nExamples of **correct** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint object-shorthand: [2, \"consistent\"]*/\n/*eslint-env es6*/\n\nvar foo = {\n    a: a,\n    b: \"foo\"\n};\n\nvar bar = {\n    a,\n    b,\n};\n```\n\nExample of **incorrect** code with the `\"consistent-as-needed\"` option, which is very similar to `\"consistent\"`:\n\n```js\n/*eslint object-shorthand: [2, \"consistent-as-needed\"]*/\n/*eslint-env es6*/\n\nvar foo = {\n    a: a,\n    b: b,\n};\n```\n\n## When Not To Use It\n\nAnyone not yet in an ES6 environment would not want to apply this rule. Others may find the terseness of the shorthand\nsyntax harder to read and may not want to encourage it with this rule.\n\n## Further Reading\n\n[Object initializer - MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer)\n"
	],
	[
		"one-var",
		"# enforce variables to be declared either together or separately in functions (one-var)\n\nVariables can be declared at any point in JavaScript code using `var`, `let`, or `const`. There are many styles and preferences related to the declaration of variables, and one of those is deciding on how many variable declarations should be allowed in a single function.\n\nThere are two schools of thought in this regard:\n\n1. There should be just one variable declaration for all variables in the function. That declaration typically appears at the top of the function.\n1. You should use one variable declaration for each variable you want to define.\n\nFor instance:\n\n```js\n// one variable declaration per function\nfunction foo() {\n    var bar, baz;\n}\n\n// multiple variable declarations per function\nfunction foo() {\n    var bar;\n    var baz;\n}\n```\n\nThe single-declaration school of thought is based in pre-ECMAScript 6 behaviors, where there was no such thing as block scope, only function scope. Since all `var` statements are hoisted to the top of the function anyway, some believe that declaring all variables in a single declaration at the top of the function removes confusion around scoping rules.\n\n## Rule Details\n\nThis rule enforces variables to be declared either together or separately per function ( for `var`) or block (for `let` and `const`) scope.\n\n## Options\n\nThis rule has one option, which can be a string option or an object option.\n\nString option:\n\n* `\"always\"` (default) requires one variable declaration per scope\n* `\"never\"` requires multiple variable declarations per scope\n* `\"consecutive\"` allows multiple variable declarations per scope but requires consecutive variable declarations to be combined into a single declaration\n\nObject option:\n\n* `\"var\": \"always\"` requires one `var` declaration per function\n* `\"var\": \"never\"` requires multiple `var` declarations per function\n* `\"var\": \"consecutive\"` requires consecutive `var` declarations to be a single declaration\n* `\"let\": \"always\"` requires one `let` declaration per block\n* `\"let\": \"never\"` requires multiple `let` declarations per block\n* `\"let\": \"consecutive\"` requires consecutive `let` declarations to be a single declaration\n* `\"const\": \"always\"` requires one `const` declaration per block\n* `\"const\": \"never\"` requires multiple `const` declarations per block\n* `\"const\": \"consecutive\"` requires consecutive `const` declarations to be a single declaration\n* `\"separateRequires\": true` enforces `requires` to be separate from declarations\n\nAlternate object option:\n\n* `\"initialized\": \"always\"` requires one variable declaration for initialized variables per scope\n* `\"initialized\": \"never\"` requires multiple variable declarations for initialized variables per scope\n* `\"initialized\": \"consecutive\"` requires consecutive variable declarations for initialized variables to be a single declaration\n* `\"uninitialized\": \"always\"` requires one variable declaration for uninitialized variables per scope\n* `\"uninitialized\": \"never\"` requires multiple variable declarations for uninitialized variables per scope\n* `\"uninitialized\": \"consecutive\"` requires consecutive variable declarations for uninitialized variables to be a single declaration\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint one-var: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    var baz;\n    let qux;\n    let norf;\n}\n\nfunction foo(){\n    const bar = false;\n    const baz = true;\n    let qux;\n    let norf;\n}\n\nfunction foo() {\n    var bar;\n\n    if (baz) {\n        var qux = true;\n    }\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint one-var: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar,\n        baz;\n    let qux,\n        norf;\n}\n\nfunction foo(){\n    const bar = true,\n        baz = false;\n    let qux,\n        norf;\n}\n\nfunction foo() {\n    var bar,\n        qux;\n\n    if (baz) {\n        qux = true;\n    }\n}\n\nfunction foo(){\n    let bar;\n\n    if (baz) {\n        let qux;\n    }\n}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint one-var: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar,\n        baz;\n    const bar = true,\n        baz = false;\n}\n\nfunction foo() {\n    var bar,\n        qux;\n\n    if (baz) {\n        qux = true;\n    }\n}\n\nfunction foo(){\n    let bar = true,\n        baz = false;\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint one-var: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    var baz;\n}\n\nfunction foo() {\n    var bar;\n\n    if (baz) {\n        var qux = true;\n    }\n}\n\nfunction foo() {\n    let bar;\n\n    if (baz) {\n        let qux = true;\n    }\n}\n```\n\n### consecutive\n\nExamples of **incorrect** code for this rule with the `\"consecutive\"` option:\n\n```js\n/*eslint one-var: [\"error\", \"consecutive\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    var baz;\n}\n\nfunction foo(){\n    var bar = 1;\n    var baz = 2;\n\n    qux();\n\n    var qux = 3;\n    var quux;\n}\n```\n\nExamples of **correct** code for this rule with the `\"consecutive\"` option:\n\n```js\n/*eslint one-var: [\"error\", \"consecutive\"]*/\n/*eslint-env es6*/\n\n\nfunction foo() {\n    var bar,\n        baz;\n}\n\nfunction foo(){\n    var bar = 1,\n        baz = 2;\n\n    qux();\n\n    var qux = 3,\n        quux;\n}\n```\n\n### var, let, and const\n\nExamples of **incorrect** code for this rule with the `{ var: \"always\", let: \"never\", const: \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"always\", let: \"never\", const: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar;\n    var baz;\n    let qux,\n        norf;\n}\n\nfunction foo() {\n    const bar = 1,\n          baz = 2;\n    let qux,\n        norf;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"always\", let: \"never\", const: \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"always\", let: \"never\", const: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar,\n        baz;\n    let qux;\n    let norf;\n}\n\nfunction foo() {\n    const bar = 1;\n    const baz = 2;\n    let qux;\n    let norf;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ var: \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar,\n        baz;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var bar,\n        baz;\n    const bar = 1; // `const` and `let` declarations are ignored if they are not specified\n    const baz = 2;\n    let qux;\n    let norf;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ separateRequires: true }` option:\n\n```js\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n/*eslint-env node*/\n\nvar foo = require(\"foo\"),\n    bar = \"bar\";\n```\n\nExamples of **correct** code for this rule with the `{ separateRequires: true }` option:\n\n```js\n/*eslint one-var: [\"error\", { separateRequires: true, var: \"always\" }]*/\n/*eslint-env node*/\n\nvar foo = require(\"foo\");\nvar bar = \"bar\";\n```\n\n```js\nvar foo = require(\"foo\"),\n    bar = require(\"bar\");\n```\n\nExamples of **incorrect** code for this rule with the `{ var: \"never\", let: \"consecutive\", const: \"consecutive\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"never\", let: \"consecutive\", const: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    let a,\n        b;\n    let c;\n\n    var d,\n        e;\n}\n\nfunction foo() {\n    const a = 1,\n        b = 2;\n    const c = 3;\n\n    var d,\n        e;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"never\", let: \"consecutive\", const: \"consecutive\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"never\", let: \"consecutive\", const: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    let a,\n        b;\n\n    var d;\n    var e;\n\n    let f;\n}\n\nfunction foo() {\n    const a = 1,\n          b = 2;\n\n    var c;\n    var d;\n\n    const e = 3;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ var: \"consecutive\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var a;\n    var b;\n}\n```\n\nExamples of **correct** code for this rule with the `{ var: \"consecutive\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { var: \"consecutive\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var a,\n        b;\n    const c = 1; // `const` and `let` declarations are ignored if they are not specified\n    const d = 2;\n    let e;\n    let f;\n}\n```\n\n### initialized and uninitialized\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"always\", \"uninitialized\": \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"always\", \"uninitialized\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var a, b, c;\n    var foo = true;\n    var bar = false;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"always\", \"uninitialized\": \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"always\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a;\n    var b;\n    var c;\n    var foo = true,\n        bar = false;\n}\n\nfor (let z of foo) {\n    doSomething(z);\n}\n\nlet z;\nfor (z of foo) {\n    doSomething(z);\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    var foo = true,\n        bar = false;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"never\" }]*/\n\nfunction foo() {\n    var foo = true;\n    var bar = false;\n    var a, b, c; // Uninitialized variables are ignored\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a = 1;\n    var b = 2;\n    var c,\n        d;\n    var e = 3;\n    var f = 4;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\", \"uninitialized\": \"never\" }]*/\n\nfunction foo() {\n    var a = 1,\n        b = 2;\n    var c;\n    var d;\n    var e = 3,\n        f = 4;\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"initialized\": \"consecutive\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\" }]*/\n\nfunction foo() {\n    var a = 1;\n    var b = 2;\n\n    foo();\n\n    var c = 3;\n    var d = 4;\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"initialized\": \"consecutive\" }` option:\n\n```js\n/*eslint one-var: [\"error\", { \"initialized\": \"consecutive\" }]*/\n\nfunction foo() {\n    var a = 1,\n        b = 2;\n\n    foo();\n\n    var c = 3,\n        d = 4;\n}\n```\n\n## Compatibility\n\n* **JSHint**: This rule maps to the `onevar` JSHint rule, but allows `let` and `const` to be configured separately.\n* **JSCS**: This rule roughly maps to [disallowMultipleVarDecl](https://jscs-dev.github.io/rule/disallowMultipleVarDecl).\n* **JSCS**: This rule option `separateRequires` roughly maps to [requireMultipleVarDecl](https://jscs-dev.github.io/rule/requireMultipleVarDecl).\n"
	],
	[
		"one-var-declaration-per-line",
		"# require or disallow newlines around variable declarations (one-var-declaration-per-line)\n\nSome developers declare multiple var statements on the same line:\n\n```js\nvar foo, bar, baz;\n```\n\nOthers prefer to declare one var per line.\n\n```js\nvar foo,\n    bar,\n    baz;\n```\n\nKeeping to one of these styles across a project's codebase can help with maintaining code consistency.\n\n## Rule Details\n\nThis rule enforces a consistent newlines around variable declarations. This rule ignores variable declarations inside `for` loop conditionals.\n\n## Options\n\nThis rule has a single string option:\n\n* `\"initializations\"` (default) enforces a newline around variable initializations\n* `\"always\"` enforces a newline around variable declarations\n\n### initializations\n\nExamples of **incorrect** code for this rule with the default `\"initializations\"` option:\n\n```js\n/*eslint one-var-declaration-per-line: [\"error\", \"initializations\"]*/\n/*eslint-env es6*/\n\nvar a, b, c = 0;\n\nlet a,\n    b = 0, c;\n```\n\nExamples of **correct** code for this rule with the default `\"initializations\"` option:\n\n```js\n/*eslint one-var-declaration-per-line: [\"error\", \"initializations\"]*/\n/*eslint-env es6*/\n\nvar a, b;\n\nlet a,\n    b;\n\nlet a,\n    b = 0;\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint one-var-declaration-per-line: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar a, b;\n\nlet a, b = 0;\n\nconst a = 0, b = 0;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint one-var-declaration-per-line: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar a,\n    b;\n\nlet a,\n    b = 0;\n```\n\n## Related Rules\n\n* [one-var](one-var.md)\n"
	],
	[
		"operator-assignment",
		"# require or disallow assignment operator shorthand where possible (operator-assignment)\n\nJavaScript provides shorthand operators that combine variable assignment and some simple mathematical operations. For example, `x = x + 4` can be shortened to `x += 4`. The supported shorthand forms are as follows:\n\n```text\n Shorthand | Separate\n-----------|------------\n x += y    | x = x + y\n x -= y    | x = x - y\n x *= y    | x = x * y\n x /= y    | x = x / y\n x %= y    | x = x % y\n x <<= y   | x = x << y\n x >>= y   | x = x >> y\n x >>>= y  | x = x >>> y\n x &= y    | x = x & y\n x ^= y    | x = x ^ y\n x |= y    | x = x | y\n```\n\n## Rule Details\n\nThis rule requires or disallows assignment operator shorthand where possible.\n\n## Options\n\nThis rule has a single string option:\n\n* `\"always\"` (default)  requires assignment operator shorthand where possible\n* `\"never\"` disallows assignment operator shorthand\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint operator-assignment: [\"error\", \"always\"]*/\n\nx = x + y;\nx = y * x;\nx[0] = x[0] / y;\nx.y = x.y << z;\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint operator-assignment: [\"error\", \"always\"]*/\n\nx = y;\nx += y;\nx = y * z;\nx = (x * y) * z;\nx[0] /= y;\nx[foo()] = x[foo()] % 2;\nx = y + x; // `+` is not always commutative (e.g. x = \"abc\")\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint operator-assignment: [\"error\", \"never\"]*/\n\nx *= y;\nx ^= (y + z) / foo();\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint operator-assignment: [\"error\", \"never\"]*/\n\nx = x + y;\nx.y = x.y / a.b;\n```\n\n## When Not To Use It\n\nUse of operator assignment shorthand is a stylistic choice. Leaving this rule turned off would allow developers to choose which style is more readable on a case-by-case basis.\n"
	],
	[
		"operator-linebreak",
		"# enforce consistent linebreak style for operators (operator-linebreak)\n\nWhen a statement is too long to fit on a single line, line breaks are generally inserted next to the operators separating expressions. The first style coming to mind would be to place the operator at the end of the line, following the English punctuation rules.\n\n```js\nvar fullHeight = borderTop +\n                 innerHeight +\n                 borderBottom;\n```\n\nSome developers find that placing operators at the beginning of the line makes the code more readable.\n\n```js\nvar fullHeight = borderTop\n               + innerHeight\n               + borderBottom;\n```\n\n## Rule Details\n\nThis rule enforces a consistent linebreak style for operators.\n\n## Options\n\nThis rule has one option, which can be a string option or an object option.\n\nString option:\n\n* `\"after\"` requires linebreaks to be placed after the operator\n* `\"before\"` requires linebreaks to be placed before the operator\n* `\"none\"` disallows linebreaks on either side of the operator\n\nObject option:\n\n* `\"overrides\"` overrides the global setting for specified operators\n\nThe default configuration is `\"after\", { \"overrides\": { \"?\": \"before\", \":\": \"before\" } }`\n\n### after\n\nExamples of **incorrect** code for this rule with the default `\"after\"` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"after\"]*/\n\nfoo = 1\n+\n2;\n\nfoo = 1\n    + 2;\n\nfoo\n    = 5;\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n```\n\nExamples of **correct** code for this rule with the default `\"after\"` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"after\"]*/\n\nfoo = 1 + 2;\n\nfoo = 1 +\n      2;\n\nfoo =\n    5;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nanswer = everything ?\n  42 :\n  foo;\n```\n\n### before\n\nExamples of **incorrect** code for this rule with the `\"before\"` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"before\"]*/\n\nfoo = 1 +\n      2;\n\nfoo =\n    5;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nanswer = everything ?\n  42 :\n  foo;\n```\n\nExamples of **correct** code for this rule with the `\"before\"` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"before\"]*/\n\nfoo = 1 + 2;\n\nfoo = 1\n    + 2;\n\nfoo\n    = 5;\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n```\n\n### none\n\nExamples of **incorrect** code for this rule with the `\"none\"` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"none\"]*/\n\nfoo = 1 +\n      2;\n\nfoo = 1\n    + 2;\n\nif (someCondition ||\n    otherCondition) {\n}\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n\nanswer = everything ?\n  42 :\n  foo;\n```\n\nExamples of **correct** code for this rule with the `\"none\"` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"none\"]*/\n\nfoo = 1 + 2;\n\nfoo = 5;\n\nif (someCondition || otherCondition) {\n}\n\nanswer = everything ? 42 : foo;\n```\n\n### overrides\n\nExamples of additional **correct** code for this rule with the `{ \"overrides\": { \"+=\": \"before\" } }` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"+=\": \"before\" } }]*/\n\nvar thing = 'thing';\nthing\n  += 's';\n```\n\nExamples of additional **correct** code for this rule with the `{ \"overrides\": { \"?\": \"ignore\", \":\": \"ignore\" } }` option:\n\n```js\n/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"?\": \"ignore\", \":\": \"ignore\" } }]*/\n\nanswer = everything ?\n  42\n  : foo;\n\nanswer = everything\n  ?\n  42\n  :\n  foo;\n```\n\n## When Not To Use It\n\nIf your project will not be using a common operator line break style, turn this rule off.\n\n## Related Rules\n\n* [comma-style](comma-style.md)\n"
	],
	[
		"padded-blocks",
		"# require or disallow padding within blocks (padded-blocks)\n\nSome style guides require block statements to start and end with blank lines. The goal is\nto improve readability by visually separating the block content and the surrounding code.\n\n```js\nif (a) {\n\n    b();\n\n}\n```\n\nSince it's good to have a consistent code style, you should either always write\npadded blocks or never do it.\n\n## Rule Details\n\nThis rule enforces consistent empty line padding within blocks.\n\n## Options\n\nThis rule has two options, the first one can be a string option or an object option.\nThe second one is an object option, it can allow exceptions.\n\n### First option\n\nString option:\n\n* `\"always\"` (default) requires empty lines at the beginning and ending of block statements and classes\n* `\"never\"` disallows empty lines at the beginning and ending of block statements and classes\n\nObject option:\n\n* `\"blocks\"` require or disallow padding within block statements\n* `\"classes\"` require or disallow padding within classes\n* `\"switches\"` require or disallow padding within `switch` statements\n\n### Second option\n\n* `\"allowSingleLineBlocks\": true` allows single-line blocks\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"always\"]*/\n\nif (a) {\n    b();\n}\n\nif (a) { b(); }\n\nif (a)\n{\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nif (a) {\n    // comment\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"always\"]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    // comment\n    b();\n\n}\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint padded-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n    b();\n}\n\nif (a)\n{\n    b();\n}\n```\n\n### blocks\n\nExamples of **incorrect** code for this rule with the `{ \"blocks\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"always\" }]*/\n\nif (a) {\n    b();\n}\n\nif (a) { b(); }\n\nif (a)\n{\n    b();\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n\nif (a) {\n    // comment\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"blocks\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"always\" }]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    // comment\n    b();\n\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"blocks\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"never\" }]*/\n\nif (a) {\n\n    b();\n\n}\n\nif (a)\n{\n\n    b();\n\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"blocks\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"blocks\": \"never\" }]*/\n\nif (a) {\n    b();\n}\n\nif (a)\n{\n    b();\n}\n```\n\n### classes\n\nExamples of **incorrect** code for this rule with the `{ \"classes\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"always\" }]*/\n\nclass  A {\n    constructor(){\n    }\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"classes\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"always\" }]*/\n\nclass  A {\n\n    constructor(){\n    }\n\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"classes\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"never\" }]*/\n\nclass  A {\n\n    constructor(){\n    }\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"classes\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"classes\": \"never\" }]*/\n\nclass  A {\n    constructor(){\n    }\n}\n```\n\n### switches\n\nExamples of **incorrect** code for this rule with the `{ \"switches\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"always\" }]*/\n\nswitch (a) {\n    case 0: foo();\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"switches\": \"always\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"always\" }]*/\n\nswitch (a) {\n\n    case 0: foo();\n\n}\n\nif (a) {\n    b();\n}\n```\n\nExamples of **incorrect** code for this rule with the `{ \"switches\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"never\" }]*/\n\nswitch (a) {\n\n    case 0: foo();\n\n}\n```\n\nExamples of **correct** code for this rule with the `{ \"switches\": \"never\" }` option:\n\n```js\n/*eslint padded-blocks: [\"error\", { \"switches\": \"never\" }]*/\n\nswitch (a) {\n    case 0: foo();\n}\n\nif (a) {\n\n    b();\n\n}\n```\n\n### always + allowSingleLineBlocks\n\nExamples of **incorrect** code for this rule with the `\"always\", {\"allowSingleLineBlocks\": true}` options:\n\n```js\n/*eslint padded-blocks: [\"error\", \"always\", { allowSingleLineBlocks: true }]*/\n\nif (a) {\n    b();\n}\n\nif (a) {\n\n    b();\n}\n\nif (a) {\n    b();\n\n}\n```\n\nExamples of **correct** code for this rule with the `\"always\", {\"allowSingleLineBlocks\": true}` options:\n\n```js\n/*eslint padded-blocks: [\"error\", \"always\", { allowSingleLineBlocks: true }]*/\n\nif (a) { b(); }\n\nif (a) {\n\n    b();\n\n}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of padding within blocks.\n\n## Related Rules\n\n* [lines-between-class-members](lines-between-class-members.md)\n* [padding-line-between-statements](padding-line-between-statements.md)\n"
	],
	[
		"padding-line-between-statements",
		"# Require or disallow padding lines between statements (padding-line-between-statements)\n\nThis rule requires or disallows blank lines between the given 2 kinds of statements.\nProperly blank lines help developers to understand the code.\n\nFor example, the following configuration requires a blank line between a variable declaration and a `return` statement.\n\n```js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"var\", next: \"return\" }\n]*/\n\nfunction foo() {\n    var a = 1;\n\n    return a;\n}\n```\n\n## Rule Details\n\nThis rule does nothing if no configurations are provided.\n\nA configuration is an object which has 3 properties; `blankLine`, `prev` and `next`. For example, `{ blankLine: \"always\", prev: \"var\", next: \"return\" }` means \"one or more blank lines are required between a variable declaration and a `return` statement.\"\nYou can supply any number of configurations. If a statement pair matches multiple configurations, the last matched configuration will be used.\n\n```json\n{\n    \"padding-line-between-statements\": [\n        \"error\",\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        ...\n    ]\n}\n```\n\n- `LINEBREAK_TYPE` is one of the following.\n    - `\"any\"` just ignores the statement pair.\n    - `\"never\"` disallows blank lines.\n    - `\"always\"` requires one or more blank lines. Note it does not count lines that comments exist as blank lines.\n\n- `STATEMENT_TYPE` is one of the following, or an array of the following.\n    - `\"*\"` is wildcard. This matches any statements.\n    - `\"block\"` is lonely blocks.\n    - `\"block-like\"` is block like statements. This matches statements that the last token is the closing brace of blocks; e.g. `{ }`, `if (a) { }`, and `while (a) { }`. Also matches immediately invoked function expression statements.\n    - `\"break\"` is `break` statements.\n    - `\"case\"` is `case` labels.\n    - `\"cjs-export\"` is `export` statements of CommonJS; e.g. `module.exports = 0`, `module.exports.foo = 1`, and `exports.foo = 2`. This is a special case of assignment.\n    - `\"cjs-import\"` is `import` statements of CommonJS; e.g. `const foo = require(\"foo\")`. This is a special case of variable declarations.\n    - `\"class\"` is `class` declarations.\n    - `\"const\"` is `const` variable declarations, both single-line and multiline.\n    - `\"continue\"` is `continue` statements.\n    - `\"debugger\"` is `debugger` statements.\n    - `\"default\"` is `default` labels.\n    - `\"directive\"` is directive prologues. This matches directives; e.g. `\"use strict\"`.\n    - `\"do\"` is `do-while` statements. This matches all statements that the first token is `do` keyword.\n    - `\"empty\"` is empty statements.\n    - `\"export\"` is `export` declarations.\n    - `\"expression\"` is expression statements.\n    - `\"for\"` is `for` loop families. This matches all statements that the first token is `for` keyword.\n    - `\"function\"` is function declarations.\n    - `\"if\"` is `if` statements.\n    - `\"iife\"` is immediately invoked function expression statements. This matches calls on a function expression, optionally prefixed with a unary operator.\n    - `\"import\"` is `import` declarations.\n    - `\"let\"` is `let` variable declarations, both single-line and multiline.\n    - `\"multiline-block-like\"` is block like statements. This is the same as `block-like` type, but only if the block is multiline.\n    - `\"multiline-const\"` is multiline `const` variable declarations.\n    - `\"multiline-expression\"` is expression statements. This is the same as `expression` type, but only if the statement is multiline.\n    - `\"multiline-let\"` is multiline `let` variable declarations.\n    - `\"multiline-var\"` is multiline `var` variable declarations.\n    - `\"return\"` is `return` statements.\n    - `\"singleline-const\"` is single-line `const` variable declarations.\n    - `\"singleline-let\"` is single-line `let` variable declarations.\n    - `\"singleline-var\"` is single-line `var` variable declarations.\n    - `\"switch\"` is `switch` statements.\n    - `\"throw\"` is `throw` statements.\n    - `\"try\"` is `try` statements.\n    - `\"var\"` is `var` variable declarations, both single-line and multiline.\n    - `\"while\"` is `while` loop statements.\n    - `\"with\"` is `with` statements.\n\n## Examples\n\nThis configuration would require blank lines before all `return` statements, like the [newline-before-return] rule.\n\nExamples of **incorrect** code for the `[{ blankLine: \"always\", prev: \"*\", next: \"return\" }]` configuration:\n\n```js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"*\", next: \"return\" }\n]*/\n\nfunction foo() {\n    bar();\n    return;\n}\n```\n\nExamples of **correct** code for the `[{ blankLine: \"always\", prev: \"*\", next: \"return\" }]` configuration:\n\n```js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"*\", next: \"return\" }\n]*/\n\nfunction foo() {\n    bar();\n\n    return;\n}\n\nfunction foo() {\n    return;\n}\n```\n\n----\n\nThis configuration would require blank lines after every sequence of variable declarations, like the [newline-after-var] rule.\n\nExamples of **incorrect** code for the `[{ blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"}, { blankLine: \"any\", prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}]` configuration:\n\n```js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"},\n    { blankLine: \"any\",    prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}\n]*/\n\nfunction foo() {\n    var a = 0;\n    bar();\n}\n\nfunction foo() {\n    let a = 0;\n    bar();\n}\n\nfunction foo() {\n    const a = 0;\n    bar();\n}\n```\n\nExamples of **correct** code for the `[{ blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"}, { blankLine: \"any\", prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}]` configuration:\n\n```js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: [\"const\", \"let\", \"var\"], next: \"*\"},\n    { blankLine: \"any\",    prev: [\"const\", \"let\", \"var\"], next: [\"const\", \"let\", \"var\"]}\n]*/\n\nfunction foo() {\n    var a = 0;\n    var b = 0;\n\n    bar();\n}\n\nfunction foo() {\n    let a = 0;\n    const b = 0;\n\n    bar();\n}\n\nfunction foo() {\n    const a = 0;\n    const b = 0;\n\n    bar();\n}\n```\n\n----\n\nThis configuration would require blank lines after all directive prologues, like the [lines-around-directive] rule.\n\nExamples of **incorrect** code for the `[{ blankLine: \"always\", prev: \"directive\", next: \"*\" }, { blankLine: \"any\", prev: \"directive\", next: \"directive\" }]` configuration:\n\n```js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"directive\", next: \"*\" },\n    { blankLine: \"any\",    prev: \"directive\", next: \"directive\" }\n]*/\n\n\"use strict\";\nfoo();\n```\n\nExamples of **correct** code for the `[{ blankLine: \"always\", prev: \"directive\", next: \"*\" }, { blankLine: \"any\", prev: \"directive\", next: \"directive\" }]` configuration:\n\n```js\n/*eslint padding-line-between-statements: [\n    \"error\",\n    { blankLine: \"always\", prev: \"directive\", next: \"*\" },\n    { blankLine: \"any\",    prev: \"directive\", next: \"directive\" }\n]*/\n\n\"use strict\";\n\"use asm\";\n\nfoo();\n```\n\n## Compatibility\n\n- **JSCS:** [requirePaddingNewLineAfterVariableDeclaration]\n- **JSCS:** [requirePaddingNewLinesAfterBlocks]\n- **JSCS:** [disallowPaddingNewLinesAfterBlocks]\n- **JSCS:** [requirePaddingNewLinesAfterUseStrict]\n- **JSCS:** [disallowPaddingNewLinesAfterUseStrict]\n- **JSCS:** [requirePaddingNewLinesBeforeExport]\n- **JSCS:** [disallowPaddingNewLinesBeforeExport]\n- **JSCS:** [requirePaddingNewlinesBeforeKeywords]\n- **JSCS:** [disallowPaddingNewlinesBeforeKeywords]\n\n## When Not To Use It\n\nIf you don't want to notify warnings about linebreaks, then it's safe to disable this rule.\n\n[lines-around-directive]: https://eslint.org/docs/rules/lines-around-directive\n[newline-after-var]: https://eslint.org/docs/rules/newline-after-var\n[newline-before-return]: https://eslint.org/docs/rules/newline-before-return\n[requirePaddingNewLineAfterVariableDeclaration]: https://jscs-dev.github.io/rule/requirePaddingNewLineAfterVariableDeclaration\n[requirePaddingNewLinesAfterBlocks]: https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterBlocks\n[disallowPaddingNewLinesAfterBlocks]: https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterBlocks\n[requirePaddingNewLinesAfterUseStrict]: https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict\n[disallowPaddingNewLinesAfterUseStrict]: https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict\n[requirePaddingNewLinesBeforeExport]: https://jscs-dev.github.io/rule/requirePaddingNewLinesBeforeExport\n[disallowPaddingNewLinesBeforeExport]: https://jscs-dev.github.io/rule/disallowPaddingNewLinesBeforeExport\n[requirePaddingNewlinesBeforeKeywords]: https://jscs-dev.github.io/rule/requirePaddingNewlinesBeforeKeywords\n[disallowPaddingNewlinesBeforeKeywords]: https://jscs-dev.github.io/rule/disallowPaddingNewlinesBeforeKeywords\n"
	],
	[
		"prefer-arrow-callback",
		"# Require using arrow functions for callbacks (prefer-arrow-callback)\n\nArrow functions can be an attractive alternative to function expressions for callbacks or function arguments.\n\nFor example, arrow functions are automatically bound to their surrounding scope/context. This provides an alternative to the pre-ES6 standard of explicitly binding function expressions to achieve similar behavior.\n\nAdditionally, arrow functions are:\n\n- less verbose, and easier to reason about.\n\n- bound lexically regardless of where or when they are invoked.\n\n## Rule Details\n\nThis rule locates function expressions used as callbacks or function arguments. An error will be produced for any that could be replaced by an arrow function without changing the result.\n\nThe following examples **will** be flagged:\n\n```js\n/* eslint prefer-arrow-callback: \"error\" */\n\nfoo(function(a) { return a; }); // ERROR\n// prefer: foo(a => a)\n\nfoo(function() { return this.a; }.bind(this)); // ERROR\n// prefer: foo(() => this.a)\n```\n\nInstances where an arrow function would not produce identical results will be ignored.\n\nThe following examples **will not** be flagged:\n\n```js\n/* eslint prefer-arrow-callback: \"error\" */\n/* eslint-env es6 */\n\n// arrow function callback\nfoo(a => a); // OK\n\n// generator as callback\nfoo(function*() { yield; }); // OK\n\n// function expression not used as callback or function argument\nvar foo = function foo(a) { return a; }; // OK\n\n// unbound function expression callback\nfoo(function() { return this.a; }); // OK\n\n// recursive named function callback\nfoo(function bar(n) { return n && n + bar(n - 1); }); // OK\n```\n\n## Options\n\nAccess further control over this rule's behavior via an options object.\n\nDefault: `{ allowNamedFunctions: false, allowUnboundThis: true }`\n\n### allowNamedFunctions\n\nBy default `{ \"allowNamedFunctions\": false }`, this `boolean` option prohibits using named functions as callbacks or function arguments.\n\nChanging this value to `true` will reverse this option's behavior by allowing use of named functions without restriction.\n\n`{ \"allowNamedFunctions\": true }` **will not** flag the following example:\n\n```js\n/* eslint prefer-arrow-callback: [ \"error\", { \"allowNamedFunctions\": true } ] */\n\nfoo(function bar() {});\n```\n\n### allowUnboundThis\n\nBy default `{ \"allowUnboundThis\": true }`, this `boolean` option allows function expressions containing `this` to be used as callbacks, as long as the function in question has not been explicitly bound.\n\nWhen set to `false` this option prohibits the use of function expressions as callbacks or function arguments entirely, without exception.\n\n`{ \"allowUnboundThis\": false }` **will** flag the following examples:\n\n```js\n/* eslint prefer-arrow-callback: [ \"error\", { \"allowUnboundThis\": false } ] */\n/* eslint-env es6 */\n\nfoo(function() { this.a; });\n\nfoo(function() { (() => this); });\n\nsomeArray.map(function(itm) { return this.doSomething(itm); }, someObject);\n```\n\n## When Not To Use It\n\n- In environments that have not yet adopted ES6 language features (ES3/5).\n\n- In ES6+ environments that allow the use of function expressions when describing callbacks or function arguments.\n\n## Further Reading\n\n- [More on ES6 arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n"
	],
	[
		"prefer-const",
		"# Suggest using `const` (prefer-const)\n\nIf a variable is never reassigned, using the `const` declaration is better.\n\n`const` declaration tells readers, \"this variable is never reassigned,\" reducing cognitive load and improving maintainability.\n\n## Rule Details\n\nThis rule is aimed at flagging variables that are declared using `let` keyword, but never reassigned after the initial assignment.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint prefer-const: \"error\"*/\n/*eslint-env es6*/\n\n// it's initialized and never reassigned.\nlet a = 3;\nconsole.log(a);\n\nlet a;\na = 0;\nconsole.log(a);\n\n// `i` is redefined (not reassigned) on each loop step.\nfor (let i in [1, 2, 3]) {\n    console.log(i);\n}\n\n// `a` is redefined (not reassigned) on each loop step.\nfor (let a of [1, 2, 3]) {\n    console.log(a);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint prefer-const: \"error\"*/\n/*eslint-env es6*/\n\n// using const.\nconst a = 0;\n\n// it's never initialized.\nlet a;\nconsole.log(a);\n\n// it's reassigned after initialized.\nlet a;\na = 0;\na = 1;\nconsole.log(a);\n\n// it's initialized in a different block from the declaration.\nlet a;\nif (true) {\n    a = 0;\n}\nconsole.log(a);\n\n// it's initialized at a place that we cannot write a variable declaration.\nlet a;\nif (true) a = 0;\nconsole.log(a);\n\n// `i` gets a new binding each iteration\nfor (const i in [1, 2, 3]) {\n  console.log(i);\n}\n\n// `a` gets a new binding each iteration\nfor (const a of [1, 2, 3]) {\n  console.log(a);\n}\n\n// `end` is never reassigned, but we cannot separate the declarations without modifying the scope.\nfor (let i = 0, end = 10; i < end; ++i) {\n    console.log(a);\n}\n\n// `predicate` is only assigned once but cannot be separately declared as `const`\nlet predicate;\n[object.type, predicate] = foo();\n\n// `a` is only assigned once but cannot be separately declared as `const`\nlet a;\nconst b = {};\n({ a, c: b.c } = func());\n\n// suggest to use `no-var` rule.\nvar b = 3;\nconsole.log(b);\n```\n\n## Options\n\n```json\n{\n    \"prefer-const\": [\"error\", {\n        \"destructuring\": \"any\",\n        \"ignoreReadBeforeAssign\": false\n    }]\n}\n```\n\n### destructuring\n\nThe kind of the way to address variables in destructuring.\nThere are 2 values:\n\n* `\"any\"` (default) - If any variables in destructuring should be `const`, this rule warns for those variables.\n* `\"all\"` - If all variables in destructuring should be `const`, this rule warns the variables. Otherwise, ignores them.\n\nExamples of **incorrect** code for the default `{\"destructuring\": \"any\"}` option:\n\n```js\n/*eslint prefer-const: \"error\"*/\n/*eslint-env es6*/\n\nlet {a, b} = obj;    /*error 'b' is never reassigned, use 'const' instead.*/\na = a + 1;\n```\n\nExamples of **correct** code for the default `{\"destructuring\": \"any\"}` option:\n\n```js\n/*eslint prefer-const: \"error\"*/\n/*eslint-env es6*/\n\n// using const.\nconst {a: a0, b} = obj;\nconst a = a0 + 1;\n\n// all variables are reassigned.\nlet {a, b} = obj;\na = a + 1;\nb = b + 1;\n```\n\nExamples of **incorrect** code for the `{\"destructuring\": \"all\"}` option:\n\n```js\n/*eslint prefer-const: [\"error\", {\"destructuring\": \"all\"}]*/\n/*eslint-env es6*/\n\n// all of `a` and `b` should be const, so those are warned.\nlet {a, b} = obj;    /*error 'a' is never reassigned, use 'const' instead.\n                             'b' is never reassigned, use 'const' instead.*/\n```\n\nExamples of **correct** code for the `{\"destructuring\": \"all\"}` option:\n\n```js\n/*eslint prefer-const: [\"error\", {\"destructuring\": \"all\"}]*/\n/*eslint-env es6*/\n\n// 'b' is never reassigned, but all of `a` and `b` should not be const, so those are ignored.\nlet {a, b} = obj;\na = a + 1;\n```\n\n### ignoreReadBeforeAssign\n\nThis is an option to avoid conflicting with `no-use-before-define` rule (without `\"nofunc\"` option).\nIf `true` is specified, this rule will ignore variables that are read between the declaration and the first assignment.\nDefault is `false`.\n\nExamples of **correct** code for the `{\"ignoreReadBeforeAssign\": true}` option:\n\n```js\n/*eslint prefer-const: [\"error\", {\"ignoreReadBeforeAssign\": true}]*/\n/*eslint-env es6*/\n\nlet timer;\nfunction initialize() {\n    if (foo()) {\n        clearInterval(timer);\n    }\n}\ntimer = setInterval(initialize, 100);\n```\n\nExamples of **correct** code for the default `{\"ignoreReadBeforeAssign\": false}` option:\n\n```js\n/*eslint prefer-const: [\"error\", {\"ignoreReadBeforeAssign\": false}]*/\n/*eslint-env es6*/\n\nconst timer = setInterval(initialize, 100);\nfunction initialize() {\n    if (foo()) {\n        clearInterval(timer);\n    }\n}\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about variables that are never reassigned after initial assignment, you can safely disable this rule.\n\n## Related Rules\n\n* [no-var](no-var.md)\n* [no-use-before-define](no-use-before-define.md)\n"
	],
	[
		"prefer-destructuring",
		"# Prefer destructuring from arrays and objects (prefer-destructuring)\n\nWith JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called [destructuring](#further-reading).  This rule enforces usage of destructuring instead of accessing a property through a member expression.\n\n## Rule Details\n\n### Options\n\nThis rule takes two sets of configuration objects. The first object parameter determines what types of destructuring the rule applies to.\n\nThe two properties, `array` and `object`, can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.\n\nAlternatively, you can use separate configurations for different assignment types. It accepts 2 other keys instead of `array` and `object`.\n\nOne key is `VariableDeclarator` and the other is `AssignmentExpression`, which can be used to control the destructuring requirement for each of those types independently. Each property accepts an object that accepts two properties, `array` and `object`, which can be used to control the destructuring requirement for each of `array` and `object` independently for variable declarations and assignment expressions.  By default, `array` and `object` are set to true for both `VariableDeclarator` and `AssignmentExpression`.\n\nThe rule has a second object with a single key, `enforceForRenamedProperties`, which determines whether the `object` destructuring applies to renamed variables.\n\n**Note**: It is not possible to determine if a variable will be referring to an object or an array at runtime. This rule therefore guesses the assignment type by checking whether the key being accessed is an integer. This can lead to the following possibly confusing situations:\n\n- Accessing an object property whose key is an integer will fall under the category `array` destructuring.\n- Accessing an array element through a computed index will fall under the category `object` destructuring.\n\nExamples of **incorrect** code for this rule:\n\n```javascript\n// With `array` enabled\nvar foo = array[0];\n\n// With `object` enabled\nvar foo = object.foo;\nvar foo = object['foo'];\n```\n\nExamples of **correct** code for this rule:\n\n```javascript\n// With `array` enabled\nvar [ foo ] = array;\nvar foo = array[someIndex];\n\n// With `object` enabled\nvar { foo } = object;\n\nvar foo = object.bar;\n\nlet foo;\n({ foo } = object);\n```\n\nExamples of **incorrect** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar foo = object.bar;\n```\n\nExamples of **correct** code when `enforceForRenamedProperties` is enabled:\n\n```javascript\nvar { bar: foo } = object;\n```\n\nAn example configuration, with the defaults `array` and `object` filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"array\": true,\n      \"object\": true\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\nThe two properties, `array` and `object`, which can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.\n\nFor example, the following configuration enforces only object destructuring, but not array destructuring:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\"object\": true, \"array\": false}]\n  }\n}\n```\n\nAn example configuration, with the defaults `VariableDeclarator` and `AssignmentExpression` filled in, looks like this:\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"VariableDeclarator\": {\n        \"array\": false,\n        \"object\": true\n      },\n      \"AssignmentExpression\": {\n        \"array\": true,\n        \"object\": true\n      }\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n```\n\nThe two properties, `VariableDeclarator` and `AssignmentExpression`, which can be used to turn on or off the destructuring requirement for `array` and `object`. By default, all values are true.\n\nFor example, the following configuration enforces object destructuring in variable declarations and enforces array destructuring in assignment expressions.\n\n```json\n{\n  \"rules\": {\n    \"prefer-destructuring\": [\"error\", {\n      \"VariableDeclarator\": {\n        \"array\": false,\n        \"object\": true\n      },\n      \"AssignmentExpression\": {\n        \"array\": true,\n        \"object\": false\n      }\n    }, {\n      \"enforceForRenamedProperties\": false\n    }]\n  }\n}\n\n```\n\nExamples of **correct** code when object destructuring in `VariableDeclarator` is enforced:\n\n```javascript\n/* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\nvar {bar: foo} = object;\n```\n\nExamples of **correct** code when array destructuring in `AssignmentExpression` is enforced:\n\n```javascript\n/* eslint prefer-destructuring: [\"error\", {AssignmentExpression: {array: true}}] */\n[bar] = array;\n```\n\n## When Not To Use It\n\nIf you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.\n\nAdditionally, if you intend to access large array indices directly, like:\n\n```javascript\nvar foo = array[100];\n```\n\nThen the `array` part of this rule is not recommended, as destructuring does not match this use case very well.\n\nOr for non-iterable 'array-like' objects:\n\n```javascript\nvar $ = require('jquery');\nvar foo = $('body')[0];\nvar [bar] = $('body'); // fails with a TypeError\n```\n\n\n## Further Reading\n\nIf you want to learn more about destructuring, check out the links below:\n\n- [Destructuring Assignment (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n- [Destructuring and parameter handling in ECMAScript 6 (2ality blog)](http://2ality.com/2015/01/es6-destructuring.html)\n"
	],
	[
		"prefer-named-capture-group",
		"# Suggest using named capture group in regular expression (prefer-named-capture-group)\n\nWith the landing of ECMAScript 2018, named capture groups can be used in regular expressions, which can improve their readability.\n\n```js\nconst regex = /(?<year>[0-9]{4})/;\n```\n\n## Rule Details\n\nThis rule is aimed at using named capture groups instead of numbered capture groups in regular expressions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint prefer-named-capture-group: \"error\"*/\n\nconst foo = /(ba[rz])/;\nconst bar = new RegExp('(ba[rz])');\nconst baz = RegExp('(ba[rz])');\n\nfoo.exec('bar')[1]; // Retrieve the group result.\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint prefer-named-capture-group: \"error\"*/\n\nconst foo = /(?<id>ba[rz])/;\nconst bar = new RegExp('(?<id>ba[rz])');\nconst baz = RegExp('(?<id>ba[rz])');\n\nfoo.exec('bar').groups.id; // Retrieve the group result.\n```\n\n## When Not To Use It\n\nIf you are targeting ECMAScript 2017 and/or older environments, you can disable this rule, because this ECMAScript feature is only supported in ECMAScript 2018 and/or newer environments.\n\n## Related Rules\n\n* [no-invalid-regexp](./no-invalid-regexp.md)\n"
	],
	[
		"prefer-numeric-literals",
		"# disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals (prefer-numeric-literals)\n\nThe `parseInt()` and `Number.parseInt()` functions can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of `parseInt()` or `Number.parseInt()`.\n\n```js\n0b111110111 === 503;\n0o767 === 503;\n```\n\n## Rule Details\n\nThis rule disallows calls to `parseInt()` or `Number.parseInt()` if called with two arguments: a string; and a radix option of 2 (binary), 8 (octal), or 16 (hexadecimal).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint prefer-numeric-literals: \"error\"*/\n\nparseInt(\"111110111\", 2) === 503;\nparseInt(\"767\", 8) === 503;\nparseInt(\"1F7\", 16) === 503;\nNumber.parseInt(\"111110111\", 2) === 503;\nNumber.parseInt(\"767\", 8) === 503;\nNumber.parseInt(\"1F7\", 16) === 503;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint prefer-numeric-literals: \"error\"*/\n/*eslint-env es6*/\n\nparseInt(1);\nparseInt(1, 3);\nNumber.parseInt(1);\nNumber.parseInt(1, 3);\n\n0b111110111 === 503;\n0o767 === 503;\n0x1F7 === 503;\n\na[parseInt](1,2);\n\nparseInt(foo);\nparseInt(foo, 2);\nNumber.parseInt(foo);\nNumber.parseInt(foo, 2);\n```\n\n## When Not To Use It\n\nIf you want to allow use of `parseInt()` or `Number.parseInt()` for binary, octal, or hexadecimal integers, or if you are not using ES6 (because binary and octal literals are not supported in ES5 and below), you may wish to disable this rule.\n\n## Compatibility\n\n* **JSCS**: [requireNumericLiterals](https://jscs-dev.github.io/rule/requireNumericLiterals)\n"
	],
	[
		"prefer-object-spread",
		"# Prefer use of an object spread over `Object.assign` (prefer-object-spread)\n\nWhen Object.assign is called using an object literal as the first argument, this rule requires using the object spread syntax instead. This rule also warns on cases where an `Object.assign` call is made using a single argument that is an object literal, in this case, the `Object.assign` call is not needed.\n\nIntroduced in ES2018, object spread is a declarative alternative which may perform better than the more dynamic, imperative `Object.assign`.\n\n## Rule Details\n\nExamples of **incorrect** code for this rule:\n\n```js\n\nObject.assign({}, foo)\n\nObject.assign({}, {foo: 'bar'})\n\nObject.assign({ foo: 'bar'}, baz)\n\nObject.assign({ foo: 'bar' }, Object.assign({ bar: 'foo' }))\n\nObject.assign({}, { foo, bar, baz })\n\nObject.assign({}, { ...baz })\n\n// Object.assign with a single argument that is an object literal\nObject.assign({});\n\nObject.assign({ foo: bar });\n```\n\nExamples of **correct** code for this rule:\n\n```js\n\nObject.assign(...foo);\n\n// Any Object.assign call without an object literal as the first argument\nObject.assign(foo, { bar: baz });\n\nObject.assign(foo, Object.assign(bar));\n\nObject.assign(foo, { bar, baz })\n\nObject.assign(foo, { ...baz });\n```\n\n## When Not To Use It\n\nThis rule should not be used unless ES2018 is supported in your codebase.\n"
	],
	[
		"prefer-promise-reject-errors",
		"# require using Error objects as Promise rejection reasons (prefer-promise-reject-errors)\n\nIt is considered good practice to only pass instances of the built-in `Error` object to the `reject()` function for user-defined errors in Promises. `Error` objects automatically store a stack trace, which can be used to debug an error by determining where it came from. If a Promise is rejected with a non-`Error` value, it can be difficult to determine where the rejection occurred.\n\n\n## Rule Details\n\nThis rule aims to ensure that Promises are only rejected with `Error` objects.\n\n## Options\n\nThis rule takes one optional object argument:\n\n* `allowEmptyReject: true` (`false` by default) allows calls to `Promise.reject()` with no arguments.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint prefer-promise-reject-errors: \"error\"*/\n\nPromise.reject(\"something bad happened\");\n\nPromise.reject(5);\n\nPromise.reject();\n\nnew Promise(function(resolve, reject) {\n  reject(\"something bad happened\");\n});\n\nnew Promise(function(resolve, reject) {\n  reject();\n});\n\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint prefer-promise-reject-errors: \"error\"*/\n\nPromise.reject(new Error(\"something bad happened\"));\n\nPromise.reject(new TypeError(\"something bad happened\"));\n\nnew Promise(function(resolve, reject) {\n  reject(new Error(\"something bad happened\"));\n});\n\nvar foo = getUnknownValue();\nPromise.reject(foo);\n```\n\nExamples of **correct** code for this rule with the `allowEmptyReject: true` option:\n\n```js\n/*eslint prefer-promise-reject-errors: [\"error\", {\"allowEmptyReject\": true}]*/\n\nPromise.reject();\n\nnew Promise(function(resolve, reject) {\n  reject();\n});\n```\n\n## Known Limitations\n\nDue to the limits of static analysis, this rule cannot guarantee that you will only reject Promises with `Error` objects. While the rule will report cases where it can guarantee that the rejection reason is clearly not an `Error`, it will not report cases where there is uncertainty about whether a given reason is an `Error`. For more information on this caveat, see the [similar limitations](no-throw-literal.md#known-limitations) in the `no-throw-literal` rule.\n\nTo avoid conflicts between rules, this rule does not report non-error values used in `throw` statements in async functions, even though these lead to Promise rejections. To lint for these cases, use the [`no-throw-literal`](https://eslint.org/docs/rules/no-throw-literal) rule.\n\n## When Not To Use It\n\nIf you're using custom non-error values as Promise rejection reasons, you can turn off this rule.\n\n## Further Reading\n\n* [`no-throw-literal`](https://eslint.org/docs/rules/no-throw-literal)\n* [Warning: a promise was rejected with a non-error](http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-rejected-with-a-non-error)\n"
	],
	[
		"prefer-reflect",
		"# Suggest using Reflect methods where applicable (prefer-reflect)\n\nThis rule was **deprecated** in ESLint v3.9.0 and will not be replaced. The original intent of this rule now seems misguided as we have come to understand that `Reflect` methods are not actually intended to replace the `Object` counterparts the rule suggests, but rather exist as low-level primitives to be used with proxies in order to replicate the default behavior of various previously existing functionality.\n\nThe ES6 Reflect API comes with a handful of methods which somewhat deprecate methods on old constructors:\n\n* [`Reflect.apply`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect.apply) effectively deprecates [`Function.prototype.apply`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-function.prototype.apply) and [`Function.prototype.call`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-function.prototype.call)\n* [`Reflect.deleteProperty`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect.deleteproperty) effectively deprecates the [`delete` keyword](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-delete-operator-runtime-semantics-evaluation)\n* [`Reflect.getOwnPropertyDescriptor`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect.getownpropertydescriptor) effectively deprecates [`Object.getOwnPropertyDescriptor`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.getownpropertydescriptor)\n* [`Reflect.getPrototypeOf`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect.getprototypeof) effectively deprecates [`Object.getPrototypeOf`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.getprototypeof)\n* [`Reflect.setPrototypeOf`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect.setprototypeof) effectively deprecates [`Object.setPrototypeOf`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.setprototypeof)\n* [`Reflect.preventExtensions`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect.preventextensions)  effectively deprecates [`Object.preventExtensions`](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.preventextensions)\n\nThe prefer-reflect rule will flag usage of any older method, suggesting to instead use the newer Reflect version.\n\n## Rule Details\n\n## Options\n\n### Exceptions\n\n```\n\"prefer-reflect\": [<enabled>, { \"exceptions\": [<...exceptions>] }]\n```\n\nThe `exceptions` option allows you to pass an array of methods names you'd like to continue to use in the old style.\n\nFor example if you wish to use all Reflect methods, except for `Function.prototype.apply` then your config would look like `prefer-reflect: [2, { \"exceptions\": [\"apply\"] }]`.\n\nIf you want to use Reflect methods, but keep using the `delete` keyword, then your config would look like `prefer-reflect: [2, { \"exceptions\": [\"delete\"] }]`.\n\nThese can be combined as much as you like. To make all methods exceptions (thereby rendering this rule useless), use `prefer-reflect: [2, { \"exceptions\": [\"apply\", \"call\", \"defineProperty\", \"getOwnPropertyDescriptor\", \"getPrototypeOf\", \"setPrototypeOf\", \"isExtensible\", \"getOwnPropertyNames\", \"preventExtensions\", \"delete\"] }]`\n\n### Reflect.apply\n\nDeprecates `Function.prototype.apply()` and `Function.prototype.call()`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nmyFunction.apply(undefined, args);\nmyFunction.apply(null, args);\nobj.myMethod.apply(obj, args);\nobj.myMethod.apply(other, args);\n\nmyFunction.call(undefined, arg);\nmyFunction.call(null, arg);\nobj.myMethod.call(obj, arg);\nobj.myMethod.call(other, arg);\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.apply(myFunction, undefined, args);\nReflect.apply(myFunction, null, args);\nReflect.apply(obj.myMethod, obj, args);\nReflect.apply(obj.myMethod, other, args);\nReflect.apply(myFunction, undefined, [arg]);\nReflect.apply(myFunction, null, [arg]);\nReflect.apply(obj.myMethod, obj, [arg]);\nReflect.apply(obj.myMethod, other, [arg]);\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"apply\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"apply\"] }]*/\n\n// in addition to Reflect.apply(...):\nmyFunction.apply(undefined, args);\nmyFunction.apply(null, args);\nobj.myMethod.apply(obj, args);\nobj.myMethod.apply(other, args);\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"call\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"call\"] }]*/\n\n// in addition to Reflect.apply(...):\nmyFunction.call(undefined, arg);\nmyFunction.call(null, arg);\nobj.myMethod.call(obj, arg);\nobj.myMethod.call(other, arg);\n```\n\n### Reflect.defineProperty\n\nDeprecates `Object.defineProperty()`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nObject.defineProperty({}, 'foo', {value: 1})\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.defineProperty({}, 'foo', {value: 1})\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"defineProperty\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"defineProperty\"] }]*/\n\nObject.defineProperty({}, 'foo', {value: 1})\nReflect.defineProperty({}, 'foo', {value: 1})\n```\n\n### Reflect.getOwnPropertyDescriptor\n\nDeprecates `Object.getOwnPropertyDescriptor()`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nObject.getOwnPropertyDescriptor({}, 'foo')\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.getOwnPropertyDescriptor({}, 'foo')\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"getOwnPropertyDescriptor\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"getOwnPropertyDescriptor\"] }]*/\n\nObject.getOwnPropertyDescriptor({}, 'foo')\nReflect.getOwnPropertyDescriptor({}, 'foo')\n```\n\n### Reflect.getPrototypeOf\n\nDeprecates `Object.getPrototypeOf()`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nObject.getPrototypeOf({}, 'foo')\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.getPrototypeOf({}, 'foo')\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"getPrototypeOf\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"getPrototypeOf\"] }]*/\n\nObject.getPrototypeOf({}, 'foo')\nReflect.getPrototypeOf({}, 'foo')\n```\n\n### Reflect.setPrototypeOf\n\nDeprecates `Object.setPrototypeOf()`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nObject.setPrototypeOf({}, Object.prototype)\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.setPrototypeOf({}, Object.prototype)\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"setPrototypeOf\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"setPrototypeOf\"] }]*/\n\nObject.setPrototypeOf({}, Object.prototype)\nReflect.setPrototypeOf({}, Object.prototype)\n```\n\n### Reflect.isExtensible\n\nDeprecates `Object.isExtensible`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nObject.isExtensible({})\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.isExtensible({})\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"isExtensible\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"isExtensible\"] }]*/\n\nObject.isExtensible({})\nReflect.isExtensible({})\n```\n\n### Reflect.getOwnPropertyNames\n\nDeprecates `Object.getOwnPropertyNames()`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nObject.getOwnPropertyNames({})\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.getOwnPropertyNames({})\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"getOwnPropertyNames\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"getOwnPropertyNames\"] }]*/\n\nObject.getOwnPropertyNames({})\nReflect.getOwnPropertyNames({})\n```\n\n### Reflect.preventExtensions\n\nDeprecates `Object.preventExtensions()`\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nObject.preventExtensions({})\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\nReflect.preventExtensions({})\n```\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"preventExtensions\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"preventExtensions\"] }]*/\n\nObject.preventExtensions({})\nReflect.preventExtensions({})\n```\n\n### Reflect.deleteProperty\n\nDeprecates the `delete` keyword\n\nExamples of **incorrect** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\ndelete foo.bar; // deleting object property\n```\n\nExamples of **correct** code for this rule when used without exceptions:\n\n```js\n/*eslint prefer-reflect: \"error\"*/\n\ndelete bar; // deleting variable\nReflect.deleteProperty(foo, 'bar');\n```\n\nNote: For a rule preventing deletion of variables, see [no-delete-var instead](no-delete-var.md)\n\nExamples of **correct** code for this rule with the `{ \"exceptions\": [\"delete\"] }` option:\n\n```js\n/*eslint prefer-reflect: [\"error\", { \"exceptions\": [\"delete\"] }]*/\n\ndelete bar\ndelete foo.bar\nReflect.deleteProperty(foo, 'bar');\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don't want to be notified about places where Reflect could be used, you can safely disable this rule.\n\n## Related Rules\n\n* [no-useless-call](no-useless-call.md)\n* [prefer-spread](prefer-spread.md)\n* [no-delete-var](no-delete-var.md)\n"
	],
	[
		"prefer-rest-params",
		"# Suggest using the rest parameters instead of `arguments` (prefer-rest-params)\n\nThere are rest parameters in ES2015.\nWe can use that feature for variadic functions instead of the `arguments` variable.\n\n`arguments` does not have methods of `Array.prototype`, so it's a bit of an inconvenience.\n\n## Rule Details\n\nThis rule is aimed to flag usage of `arguments` variables.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\nfunction foo() {\n    console.log(arguments);\n}\n\nfunction foo(action) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    action.apply(null, args);\n}\n\nfunction foo(action) {\n    var args = [].slice.call(arguments, 1);\n    action.apply(null, args);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\nfunction foo(...args) {\n    console.log(args);\n}\n\nfunction foo(action, ...args) {\n    action.apply(null, args); // or `action(...args)`, related to the `prefer-spread` rule.\n}\n\n// Note: the implicit arguments can be overwritten.\nfunction foo(arguments) {\n    console.log(arguments); // This is the first argument.\n}\nfunction foo() {\n    var arguments = 0;\n    console.log(arguments); // This is a local variable.\n}\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don't want to be notified about `arguments` variables, then it's safe to disable this rule.\n\n## Related Rules\n\n* [prefer-spread](prefer-spread.md)\n"
	],
	[
		"prefer-spread",
		"# Suggest using spread syntax instead of `.apply()`. (prefer-spread)\n\nBefore ES2015, one must use `Function.prototype.apply()` to call variadic functions.\n\n```js\nvar args = [1, 2, 3, 4];\nMath.max.apply(Math, args);\n```\n\nIn ES2015, one can use spread syntax to call variadic functions.\n\n```js\n/*eslint-env es6*/\n\nvar args = [1, 2, 3, 4];\nMath.max(...args);\n```\n\n## Rule Details\n\nThis rule is aimed to flag usage of `Function.prototype.apply()` in situations where spread syntax could be used instead.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint prefer-spread: \"error\"*/\n\nfoo.apply(undefined, args);\nfoo.apply(null, args);\nobj.foo.apply(obj, args);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint prefer-spread: \"error\"*/\n\n// Using spread syntax\nfoo(...args);\nobj.foo(...args);\n\n// The `this` binding is different.\nfoo.apply(obj, args);\nobj.foo.apply(null, args);\nobj.foo.apply(otherObj, args);\n\n// The argument list is not variadic.\n// Those are warned by the `no-useless-call` rule.\nfoo.apply(undefined, [1, 2, 3]);\nfoo.apply(null, [1, 2, 3]);\nobj.foo.apply(obj, [1, 2, 3]);\n```\n\nKnown limitations:\n\nThis rule analyzes code statically to check whether or not the `this` argument is changed. So, if the `this` argument is computed in a dynamic expression, this rule cannot detect a violation.\n\n```js\n/*eslint prefer-spread: \"error\"*/\n\n// This warns.\na[i++].foo.apply(a[i++], args);\n\n// This does not warn.\na[++i].foo.apply(a[i], args);\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don't want to be notified about `Function.prototype.apply()` callings, you can safely disable this rule.\n\n## Related Rules\n\n* [no-useless-call](no-useless-call.md)\n"
	],
	[
		"prefer-template",
		"# Suggest using template literals instead of string concatenation. (prefer-template)\n\nIn ES2015 (ES6), we can use template literals instead of string concatenation.\n\n```js\nvar str = \"Hello, \" + name + \"!\";\n```\n\n```js\n/*eslint-env es6*/\n\nvar str = `Hello, ${name}!`;\n```\n\n## Rule Details\n\nThis rule is aimed to flag usage of `+` operators with strings.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint prefer-template: \"error\"*/\n\nvar str = \"Hello, \" + name + \"!\";\nvar str = \"Time: \" + (12 * 60 * 60 * 1000);\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint prefer-template: \"error\"*/\n/*eslint-env es6*/\n\nvar str = \"Hello World!\";\nvar str = `Hello, ${name}!`;\nvar str = `Time: ${12 * 60 * 60 * 1000}`;\n\n// This is reported by `no-useless-concat`.\nvar str = \"Hello, \" + \"World!\";\n```\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\n\nIn ES2015 (ES6) or later, if you don't want to be notified about string concatenation, you can safely disable this rule.\n\n## Related Rules\n\n* [no-useless-concat](no-useless-concat.md)\n* [quotes](quotes.md)\n"
	],
	[
		"quote-props",
		"# require quotes around object literal property names (quote-props)\n\nObject literal property names can be defined in two ways: using literals or using strings. For example, these two objects are equivalent:\n\n```js\nvar object1 = {\n    property: true\n};\n\nvar object2 = {\n    \"property\": true\n};\n```\n\nIn many cases, it doesn't matter if you choose to use an identifier instead of a string or vice-versa. Even so, you might decide to enforce a consistent style in your code.\n\nThere are, however, some occasions when you must use quotes:\n\n1. If you are using an ECMAScript 3 JavaScript engine (such as IE8) and you want to use a keyword (such as `if`) as a property name. This restriction was removed in ECMAScript 5.\n2. You want to use a non-identifier character in your property name, such as having a property with a space like `\"one two\"`.\n\nAnother example where quotes do matter is when using numeric literals as property keys:\n\n```js\nvar object = {\n    1e2: 1,\n    100: 2\n};\n```\n\nThis may look alright at first sight, but this code in fact throws a syntax error in ECMAScript 5 strict mode. This happens because `1e2` and `100` are coerced into strings before getting used as the property name. Both `String(1e2)` and `String(100)` happen to be equal to `\"100\"`, which causes the \"Duplicate data property in object literal not allowed in strict mode\" error. Issues like that can be tricky to debug, so some prefer to require quotes around all property names.\n\n## Rule Details\n\nThis rule requires quotes around object literal property names.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"always\"` (default) requires quotes around all object literal property names\n* `\"as-needed\"` disallows quotes around object literal property names that are not strictly required\n* `\"consistent\"` enforces a consistent quote style; in a given object, either all of the properties should be quoted, or none of the properties should be quoted\n* `\"consistent-as-needed\"` requires quotes around all object literal property names if any name strictly requires quotes, otherwise disallows quotes around object property names\n\nObject option:\n\n* `\"keywords\": true` requires quotes around language keywords used as object property names (only applies when using `as-needed` or `consistent-as-needed`)\n* `\"unnecessary\": true` (default) disallows quotes around object literal property names that are not strictly required (only applies when using `as-needed`)\n* `\"unnecessary\": false` allows quotes around object literal property names that are not strictly required (only applies when using `as-needed`)\n* `\"numbers\": true` requires quotes around numbers used as object property names (only applies when using `as-needed`)\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"always\"]*/\n\nvar object = {\n    foo: \"bar\",\n    baz: 42,\n    \"qux-lorem\": true\n};\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"always\"]*/\n/*eslint-env es6*/\n\nvar object1 = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    'baz': 42,\n    'qux-lorem': true\n};\n\nvar object3 = {\n    foo() {\n        return;\n    }\n};\n```\n\n### as-needed\n\nExamples of **incorrect** code for this rule with the `\"as-needed\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"as-needed\"]*/\n\nvar object = {\n    \"a\": 0,\n    \"0\": 0,\n    \"true\": 0,\n    \"null\": 0\n};\n```\n\nExamples of **correct** code for this rule with the `\"as-needed\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"as-needed\"]*/\n/*eslint-env es6*/\n\nvar object1 = {\n    \"a-b\": 0,\n    \"0x0\": 0,\n    \"1e2\": 0\n};\n\nvar object2 = {\n    foo: 'bar',\n    baz: 42,\n    true: 0,\n    0: 0,\n    'qux-lorem': true\n};\n\nvar object3 = {\n    foo() {\n        return;\n    }\n};\n```\n\n### consistent\n\nExamples of **incorrect** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"consistent\"]*/\n\nvar object1 = {\n    foo: \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    baz: 42\n};\n```\n\nExamples of **correct** code for this rule with the `\"consistent\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"consistent\"]*/\n\nvar object1 = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    'baz': 42\n};\n\nvar object3 = {\n    foo: 'bar',\n    baz: 42\n};\n```\n\n### consistent-as-needed\n\nExamples of **incorrect** code for this rule with the `\"consistent-as-needed\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"consistent-as-needed\"]*/\n\nvar object1 = {\n    foo: \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    'foo': 'bar',\n    'baz': 42\n};\n```\n\nExamples of **correct** code for this rule with the `\"consistent-as-needed\"` option:\n\n```js\n/*eslint quote-props: [\"error\", \"consistent-as-needed\"]*/\n\nvar object1 = {\n    \"foo\": \"bar\",\n    \"baz\": 42,\n    \"qux-lorem\": true\n};\n\nvar object2 = {\n    foo: 'bar',\n    baz: 42\n};\n```\n\n### keywords\n\nExamples of additional **incorrect** code for this rule with the `\"as-needed\", { \"keywords\": true }` options:\n\n```js\n/*eslint quote-props: [\"error\", \"as-needed\", { \"keywords\": true }]*/\n\nvar x = {\n    while: 1,\n    volatile: \"foo\"\n};\n```\n\nExamples of additional **incorrect** code for this rule with the `\"consistent-as-needed\", { \"keywords\": true }` options:\n\n```js\n/*eslint quote-props: [\"error\", \"consistent-as-needed\", { \"keywords\": true }]*/\n\nvar x = {\n    \"prop\": 1,\n    \"bar\": \"foo\"\n};\n```\n\n### unnecessary\n\nExamples of additional **correct** code for this rule with the `\"as-needed\", { \"unnecessary\": false }` options:\n\n```js\n/*eslint quote-props: [\"error\", \"as-needed\", { \"keywords\": true, \"unnecessary\": false }]*/\n\nvar x = {\n    \"while\": 1,\n    \"foo\": \"bar\"  // Would normally have caused a warning\n};\n```\n\n### numbers\n\nExamples of additional **incorrect** code for this rule with the `\"as-needed\", { \"numbers\": true }` options:\n\n```js\n/*eslint quote-props: [\"error\", \"as-needed\", { \"numbers\": true }]*/\n\nvar x = {\n    100: 1\n}\n```\n\n## When Not To Use It\n\nIf you don't care if property names are consistently wrapped in quotes or not, and you don't target legacy ES3 environments, turn this rule off.\n\n## Further Reading\n\n* [Reserved words as property names](https://kangax.github.io/compat-table/es5/#Reserved_words_as_property_names)\n* [Unquoted property names / object keys in JavaScript](https://mathiasbynens.be/notes/javascript-properties)\n"
	],
	[
		"quotes",
		"# enforce the consistent use of either backticks, double, or single quotes (quotes)\n\nJavaScript allows you to define strings in one of three ways: double quotes, single quotes, and backticks (as of ECMAScript 6). For example:\n\n```js\n/*eslint-env es6*/\n\nvar double = \"double\";\nvar single = 'single';\nvar backtick = `backtick`;    // ES6 only\n```\n\nEach of these lines creates a string and, in some cases, can be used interchangeably. The choice of how to define strings in a codebase is a stylistic one outside of template literals (which allow embedded of expressions to be interpreted).\n\nMany codebases require strings to be defined in a consistent manner.\n\n## Rule Details\n\nThis rule enforces the consistent use of either backticks, double, or single quotes.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"double\"` (default) requires the use of double quotes wherever possible\n* `\"single\"` requires the use of single quotes wherever possible\n* `\"backtick\"` requires the use of backticks wherever possible\n\nObject option:\n\n* `\"avoidEscape\": true` allows strings to use single-quotes or double-quotes so long as the string contains a quote that would have to be escaped otherwise\n* `\"allowTemplateLiterals\": true` allows strings to use backticks\n\n**Deprecated**: The object property `avoid-escape` is deprecated; please use the object property `avoidEscape` instead.\n\n### double\n\nExamples of **incorrect** code for this rule with the default `\"double\"` option:\n\n```js\n/*eslint quotes: [\"error\", \"double\"]*/\n\nvar single = 'single';\nvar unescaped = 'a string containing \"double\" quotes';\nvar backtick = `back\\ntick`; // you can use \\n in single or double quoted strings\n```\n\nExamples of **correct** code for this rule with the default `\"double\"` option:\n\n```js\n/*eslint quotes: [\"error\", \"double\"]*/\n/*eslint-env es6*/\n\nvar double = \"double\";\nvar backtick = `back\ntick`;  // backticks are allowed due to newline\nvar backtick = tag`backtick`; // backticks are allowed due to tag\n```\n\n### single\n\nExamples of **incorrect** code for this rule with the `\"single\"` option:\n\n```js\n/*eslint quotes: [\"error\", \"single\"]*/\n\nvar double = \"double\";\nvar unescaped = \"a string containing 'single' quotes\";\n```\n\nExamples of **correct** code for this rule with the `\"single\"` option:\n\n```js\n/*eslint quotes: [\"error\", \"single\"]*/\n/*eslint-env es6*/\n\nvar single = 'single';\nvar backtick = `back${x}tick`; // backticks are allowed due to substitution\n```\n\n### backticks\n\nExamples of **incorrect** code for this rule with the `\"backtick\"` option:\n\n```js\n/*eslint quotes: [\"error\", \"backtick\"]*/\n\nvar single = 'single';\nvar double = \"double\";\nvar unescaped = 'a string containing `backticks`';\n```\n\nExamples of **correct** code for this rule with the `\"backtick\"` option:\n\n```js\n/*eslint quotes: [\"error\", \"backtick\"]*/\n/*eslint-env es6*/\n\nvar backtick = `backtick`;\n```\n\n### avoidEscape\n\nExamples of additional **correct** code for this rule with the `\"double\", { \"avoidEscape\": true }` options:\n\n```js\n/*eslint quotes: [\"error\", \"double\", { \"avoidEscape\": true }]*/\n\nvar single = 'a string containing \"double\" quotes';\n```\n\nExamples of additional **correct** code for this rule with the `\"single\", { \"avoidEscape\": true }` options:\n\n```js\n/*eslint quotes: [\"error\", \"single\", { \"avoidEscape\": true }]*/\n\nvar double = \"a string containing 'single' quotes\";\n```\n\nExamples of additional **correct** code for this rule with the `\"backtick\", { \"avoidEscape\": true }` options:\n\n```js\n/*eslint quotes: [\"error\", \"backtick\", { \"avoidEscape\": true }]*/\n\nvar double = \"a string containing `backtick` quotes\"\n```\n\n### allowTemplateLiterals\n\nExamples of additional **correct** code for this rule with the `\"double\", { \"allowTemplateLiterals\": true }` options:\n\n```js\n/*eslint quotes: [\"error\", \"double\", { \"allowTemplateLiterals\": true }]*/\n\nvar double = \"double\";\nvar double = `double`;\n```\n\nExamples of additional **correct** code for this rule with the `\"single\", { \"allowTemplateLiterals\": true }` options:\n\n```js\n/*eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n\nvar single = 'single';\nvar single = `single`;\n```\n\n`{ \"allowTemplateLiterals\": false }` will not disallow the usage of all template literals. If you want to forbid any instance of template literals, use [no-restricted-syntax](https://eslint.org/docs/rules/no-restricted-syntax) and target the `TemplateLiteral` selector.\n\n## When Not To Use It\n\nIf you do not need consistency in your string styles, you can safely disable this rule.\n"
	],
	[
		"radix",
		"# Require Radix Parameter (radix)\n\nWhen using the `parseInt()` function it is common to omit the second argument, the radix, and let the function try to determine from the first argument what type of number it is. By default, `parseInt()` will autodetect decimal and hexadecimal (via `0x` prefix). Prior to ECMAScript 5, `parseInt()` also autodetected octal literals, which caused problems because many developers assumed a leading `0` would be ignored.\n\nThis confusion led to the suggestion that you always use the radix parameter to `parseInt()` to eliminate unintended consequences. So instead of doing this:\n\n```js\nvar num = parseInt(\"071\");      // 57\n```\n\nDo this:\n\n```js\nvar num = parseInt(\"071\", 10);  // 71\n```\n\nECMAScript 5 changed the behavior of `parseInt()` so that it no longer autodetects octal literals and instead treats them as decimal literals. However, the differences between hexadecimal and decimal interpretation of the first parameter causes many developers to continue using the radix parameter to ensure the string is interpreted in the intended way.\n\nOn the other hand, if the code is targeting only ES5-compliant environments passing the radix `10` may be redundant. In such a case you might want to disallow using such a radix.\n\n## Rule Details\n\nThis rule is aimed at preventing the unintended conversion of a string to a number of a different base than intended or at preventing the redundant `10` radix if targeting modern environments only.\n\n## Options\n\nThere are two options for this rule:\n\n* `\"always\"` enforces providing a radix (default)\n* `\"as-needed\"` disallows providing the `10` radix\n\n\n### always\n\nExamples of **incorrect** code for the default `\"always\"` option:\n\n```js\n/*eslint radix: \"error\"*/\n\nvar num = parseInt(\"071\");\n\nvar num = parseInt(someValue);\n\nvar num = parseInt(\"071\", \"abc\");\n\nvar num = parseInt();\n```\n\nExamples of **correct** code for the default `\"always\"` option:\n\n```js\n/*eslint radix: \"error\"*/\n\nvar num = parseInt(\"071\", 10);\n\nvar num = parseInt(\"071\", 8);\n\nvar num = parseFloat(someValue);\n```\n\n### as-needed\n\nExamples of **incorrect** code for the `\"as-needed\"` option:\n\n```js\n/*eslint radix: [\"error\", \"as-needed\"]*/\n\nvar num = parseInt(\"071\", 10);\n\nvar num = parseInt(\"071\", \"abc\");\n\nvar num = parseInt();\n```\n\nExamples of **correct** code for the `\"as-needed\"` option:\n\n```js\n/*eslint radix: [\"error\", \"as-needed\"]*/\n\nvar num = parseInt(\"071\");\n\nvar num = parseInt(\"071\", 8);\n\nvar num = parseFloat(someValue);\n```\n\n## When Not To Use It\n\nIf you don't want to enforce either presence or omission of the `10` radix value you can turn this rule off.\n\n## Further Reading\n\n* [parseInt and radix](https://davidwalsh.name/parseint-radix)\n"
	],
	[
		"require-atomic-updates",
		"# Disallow assignments that can lead to race conditions due to usage of `await` or `yield` (require-atomic-updates)\n\nWhen writing asynchronous code, it is possible to create subtle race condition bugs. Consider the following example:\n\n```js\nlet totalLength = 0;\n\nasync function addLengthOfSinglePage(pageNum) {\n  totalLength += await getPageLength(pageNum);\n}\n\nPromise.all([addLengthOfSinglePage(1), addLengthOfSinglePage(2)]).then(() => {\n  console.log('The combined length of both pages is', totalLength);\n});\n```\n\nThis code looks like it will sum the results of calling `getPageLength(1)` and `getPageLength(2)`, but in reality the final value of `totalLength` will only be the length of one of the two pages. The bug is in the statement `totalLength += await getPageLength(pageNum);`. This statement first reads an initial value of `totalLength`, then calls `getPageLength(pageNum)` and waits for that Promise to fulfill. Finally, it sets the value of `totalLength` to the sum of `await getPageLength(pageNum)` and the *initial* value of `totalLength`. If the `totalLength` variable is updated in a separate function call during the time that the `getPageLength(pageNum)` Promise is pending, that update will be lost because the new value is overwritten without being read.\n\nOne way to fix this issue would be to ensure that `totalLength` is read at the same time as it's updated, like this:\n\n```js\nasync function addLengthOfSinglePage(pageNum) {\n  const lengthOfThisPage = await getPageLength(pageNum);\n\n  totalLength += lengthOfThisPage;\n}\n```\n\nAnother solution would be to avoid using a mutable variable reference at all:\n\n```js\nPromise.all([getPageLength(1), getPageLength(2)]).then(pageLengths => {\n  const totalLength = pageLengths.reduce((accumulator, length) => accumulator + length, 0);\n\n  console.log('The combined length of both pages is', totalLength);\n});\n```\n\n## Rule Details\n\nThis rule aims to report assignments to variables or properties where all of the following are true:\n\n* A variable or property is reassigned to a new value which is based on its old value.\n* A `yield` or `await` expression interrupts the assignment after the old value is read, and before the new value is set.\n* The rule cannot easily verify that the assignment is safe (e.g. if an assigned variable is local and would not be readable from anywhere else while the function is paused).\n\nExamples of **incorrect** code for this rule:\n\n```js\n/* eslint require-atomic-updates: error */\n\nlet result;\nasync function foo() {\n  result += await somethingElse;\n\n  result = result + await somethingElse;\n\n  result = result + doSomething(await somethingElse);\n}\n\nfunction* bar() {\n  result += yield;\n\n  result = result + (yield somethingElse);\n\n  result = result + doSomething(yield somethingElse);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/* eslint require-atomic-updates: error */\n\nlet result;\nasync function foo() {\n  result = await somethingElse + result;\n\n  let tmp = await somethingElse;\n  result += tmp;\n\n  let localVariable = 0;\n  localVariable += await somethingElse;\n}\n\nfunction* bar() {\n  result += yield;\n\n  result = (yield somethingElse) + result;\n\n  result = doSomething(yield somethingElse, result);\n}\n```\n\n## When Not To Use It\n\nIf you don't use async or generator functions, you don't need to enable this rule.\n"
	],
	[
		"require-await",
		"# Disallow async functions which have no `await` expression (require-await)\n\nAsynchronous functions in JavaScript behave differently than other functions in two important ways:\n\n1. The return value is always a `Promise`.\n2. You can use the `await` operator inside of them.\n\nThe primary reason to use asynchronous functions is typically to use the `await` operator, such as this:\n\n```js\nasync function fetchData(processDataItem) {\n    const response = await fetch(DATA_URL);\n    const data = await response.json();\n\n    return data.map(processDataItem);\n}\n```\n\nAsynchronous functions that don't use `await` might not need to be asynchronous functions and could be the unintentional result of refactoring.\n\n\n## Rule Details\n\nThis rule warns async functions which have no `await` expression.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint require-await: \"error\"*/\n\nasync function foo() {\n    doSomething();\n}\n\nbar(async () => {\n    doSomething();\n});\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint require-await: \"error\"*/\n\nasync function foo() {\n    await doSomething();\n}\n\nbar(async () => {\n    await doSomething();\n});\n\nfunction foo() {\n    doSomething();\n}\n\nbar(() => {\n    doSomething();\n});\n\n// Allow empty functions.\nasync function noop() {}\n```\n\n## When Not To Use It\n\nAsynchronous functions are designed to work with promises such that throwing an error will cause a promise's rejection handler (such as `catch()`) to be called. For example:\n\n```js\nasync function fail() {\n    throw new Error(\"Failure!\");\n}\n\nfail().catch(error => {\n    console.log(error.message);\n});\n```\n\nIn this case, the `fail()` function throws an error that is intended to be caught by the `catch()` handler assigned later. Converting the `fail()` function into a synchronous function would require the call to `fail()` to be refactored to use a `try-catch` statement instead of a promise.\n\nIf you are throwing an error inside of an asynchronous function for this purpose, then you may want to disable this rule.\n\n\n## Related Rules\n\n* [require-yield](require-yield.md)\n"
	],
	[
		"require-jsdoc",
		"# require JSDoc comments (require-jsdoc)\n\nThis rule was [**deprecated**](https://eslint.org/blog/2018/11/jsdoc-end-of-life) in ESLint v5.10.0.\n\n[JSDoc](http://usejsdoc.org) is a JavaScript API documentation generator. It uses specially-formatted comments inside of code to generate API documentation automatically. For example, this is what a JSDoc comment looks like for a function:\n\n```js\n/**\n * Adds two numbers together.\n * @param {int} num1 The first number.\n * @param {int} num2 The second number.\n * @returns {int} The sum of the two numbers.\n */\nfunction sum(num1, num2) {\n    return num1 + num2;\n}\n```\n\nSome style guides require JSDoc comments for all functions as a way of explaining function behavior.\n\n## Rule Details\n\nThis rule requires JSDoc comments for specified nodes. Supported nodes:\n\n* `\"FunctionDeclaration\"`\n* `\"ClassDeclaration\"`\n* `\"MethodDefinition\"`\n* `\"ArrowFunctionExpression\"`\n* `\"FunctionExpression\"`\n\n## Options\n\nThis rule has a single object option:\n\n* `\"require\"` requires JSDoc comments for the specified nodes\n\nDefault option settings are:\n\n```json\n{\n    \"require-jsdoc\": [\"error\", {\n        \"require\": {\n            \"FunctionDeclaration\": true,\n            \"MethodDefinition\": false,\n            \"ClassDeclaration\": false,\n            \"ArrowFunctionExpression\": false,\n            \"FunctionExpression\": false\n        }\n    }]\n}\n```\n\n### require\n\nExamples of **incorrect** code for this rule with the `{ \"require\": { \"FunctionDeclaration\": true, \"MethodDefinition\": true, \"ClassDeclaration\": true, \"ArrowFunctionExpression\": true, \"FunctionExpression\": true } }` option:\n\n```js\n/*eslint \"require-jsdoc\": [\"error\", {\n    \"require\": {\n        \"FunctionDeclaration\": true,\n        \"MethodDefinition\": true,\n        \"ClassDeclaration\": true,\n        \"ArrowFunctionExpression\": true,\n        \"FunctionExpression\": true\n    }\n}]*/\n\nfunction foo() {\n    return 10;\n}\n\nvar foo = () => {\n    return 10;\n};\n\nclass Foo {\n    bar() {\n        return 10;\n    }\n}\n\nvar foo = function() {\n    return 10;\n};\n\nvar foo = {\n    bar: function() {\n        return 10;\n    },\n\n    baz() {\n        return 10;\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `{ \"require\": { \"FunctionDeclaration\": true, \"MethodDefinition\": true, \"ClassDeclaration\": true, \"ArrowFunctionExpression\": true, \"FunctionExpression\": true } }` option:\n\n```js\n/*eslint \"require-jsdoc\": [\"error\", {\n    \"require\": {\n        \"FunctionDeclaration\": true,\n        \"MethodDefinition\": true,\n        \"ClassDeclaration\": true,\n        \"ArrowFunctionExpression\": true,\n        \"FunctionExpression\": true\n    }\n}]*/\n\n/**\n * It returns 10\n */\nfunction foo() {\n    return 10;\n}\n\n/**\n * It returns test + 10\n * @params {int} test - some number\n * @returns {int} sum of test and 10\n */\nvar foo = (test) => {\n    return test + 10;\n}\n\n/**\n * It returns 10\n */\nvar foo = () => {\n    return 10;\n}\n\n/**\n * It returns 10\n */\nvar foo = function() {\n    return 10;\n}\n\nvar array = [1,2,3];\narray.filter(function(item) {\n    return item > 2;\n});\n\n/**\n * A class that can return the number 10\n */\nclass Foo {\n    /**\n    * It returns 10\n    */\n    bar() {\n        return 10;\n    }\n}\n\n/**\n * It returns 10\n */\nvar foo = function() {\n    return 10;\n};\n\nvar foo = {\n    /**\n    * It returns 10\n    */\n    bar: function() {\n        return 10;\n    },\n\n    /**\n    * It returns 10\n    */\n    baz() {\n        return 10;\n    }\n};\n\nsetTimeout(() => {}, 10); // since it's an anonymous arrow function\n```\n\n## When Not To Use It\n\nIf you do not require JSDoc for your functions, then you can leave this rule off.\n\n## Related Rules\n\n* [valid-jsdoc](valid-jsdoc.md)\n"
	],
	[
		"require-unicode-regexp",
		"# Enforce the use of `u` flag on RegExp (require-unicode-regexp)\n\nRegExp `u` flag has two effects:\n\n1. **Make the regular expression handling UTF-16 surrogate pairs correctly.**\n\n    Especially, character range syntax gets the correct behavior.\n\n    ```js\n    /^[👍]$/.test(\"👍\") //→ false\n    /^[👍]$/u.test(\"👍\") //→ true\n    ```\n\n2. **Make the regular expression throwing syntax errors early as disabling [Annex B extensions](https://www.ecma-international.org/ecma-262/6.0/#sec-regular-expressions-patterns).**\n\n    Because of historical reason, JavaScript regular expressions are tolerant of syntax errors. For example, `/\\w{1, 2/` is a syntax error, but JavaScript doesn't throw the error. It matches strings such as `\"a{1, 2\"` instead. Such a recovering logic is defined in Annex B.\n\n    The `u` flag disables the recovering logic Annex B defined. As a result, you can find errors early. This is similar to [the strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).\n\nTherefore, the `u` flag lets us work better with regular expressions.\n\n## Rule Details\n\nThis rule aims to enforce the use of `u` flag on regular expressions.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint require-unicode-regexp: error */\n\nconst a = /aaa/\nconst b = /bbb/gi\nconst c = new RegExp(\"ccc\")\nconst d = new RegExp(\"ddd\", \"gi\")\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint require-unicode-regexp: error */\n\nconst a = /aaa/u\nconst b = /bbb/giu\nconst c = new RegExp(\"ccc\", \"u\")\nconst d = new RegExp(\"ddd\", \"giu\")\n\n// This rule ignores RegExp calls if the flags could not be evaluated to a static value.\nfunction f(flags) {\n    return new RegExp(\"eee\", flags)\n}\n```\n\n## When Not To Use It\n\nIf you don't want to notify regular expressions with no `u` flag, then it's safe to disable this rule.\n"
	],
	[
		"require-yield",
		"# Disallow generator functions that do not have `yield` (require-yield)\n\n## Rule Details\n\nThis rule generates warnings for generator functions that do not have the `yield` keyword.\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint require-yield: \"error\"*/\n/*eslint-env es6*/\n\nfunction* foo() {\n  return 10;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint require-yield: \"error\"*/\n/*eslint-env es6*/\n\nfunction* foo() {\n  yield 5;\n  return 10;\n}\n\nfunction foo() {\n  return 10;\n}\n\n// This rule does not warn on empty generator functions.\nfunction* foo() { }\n```\n\n## When Not To Use It\n\nIf you don't want to notify generator functions that have no `yield` expression, then it's safe to disable this rule.\n\n## Related Rules\n\n* [require-await](require-await.md)\n"
	],
	[
		"rest-spread-spacing",
		"# Enforce spacing between rest and spread operators and their expressions (rest-spread-spacing)\n\nES2015 introduced the rest and spread operators, which expand an iterable structure into its individual parts. Some examples of their usage are as follows:\n\n```js\nlet numArr = [1, 2, 3];\nfunction add(a, b, c) {\n    return a + b + c;\n}\nadd(...numArr); // -> 6\n\nlet arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\narr1.push(...arr2); // -> [1, 2, 3, 4, 5, 6]\n\nlet [a, b, ...arr] = [1, 2, 3, 4, 5];\na; // -> 1\nb // -> 2\narr; // ->  [3, 4, 5]\n\nfunction numArgs(...args) {\n  return args.length;\n}\nnumArgs(a, b, c); // -> 3\n```\n\nIn addition to the above, there is currently a proposal to add object rest and spread properties to the spec. They can be used as follows:\n\n```js\n\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nx; // -> 1\ny; // -> 2\nz; // -> { a: 3, b: 4 }\n\nlet n = { x, y, ...z };\nn; // -> { x: 1, y: 2, a: 3, b: 4 }\n```\n\nAs with other operators, whitespace is allowed between the rest or spread operator and the expression it is operating on, which can lead to inconsistent spacing within a codebase.\n\n## Rule Details\n\nThis rule aims to enforce consistent spacing between rest and spread operators and their expressions. The rule also supports object rest and spread properties in ES2018:\n\n```json\n{\n    \"parserOptions\": {\n        \"ecmaVersion\": 2018\n    }\n}\n```\n\nPlease read the user guide's section on [configuring parser options](/docs/user-guide/configuring#specifying-parser-options) to learn more.\n\n## Options\n\nThis rule takes one option: a string with the value of `\"never\"` or `\"always\"`. The default value is `\"never\"`.\n\n### \"never\"\n\nWhen using the default `\"never\"` option, whitespace is not allowed between spread operators and their expressions.\n\n```json\nrest-spread-spacing: [\"error\"]\n```\n\nor\n\n```json\nrest-spread-spacing: [\"error\", \"never\"]\n```\n\nExamples of **incorrect** code for this rule with `\"never\"`:\n\n```js\n/*eslint rest-spread-spacing: [\"error\", \"never\"]*/\n\nfn(... args)\n[... arr, 4, 5, 6]\nlet [a, b, ... arr] = [1, 2, 3, 4, 5];\nfunction fn(... args) { console.log(args); }\nlet { x, y, ... z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ... z };\n```\n\nExamples of **correct** code for this rule with `\"never\"`:\n\n```js\n/*eslint rest-spread-spacing: [\"error\", \"never\"]*/\n\nfn(...args)\n[...arr, 4, 5, 6]\nlet [a, b, ...arr] = [1, 2, 3, 4, 5];\nfunction fn(...args) { console.log(args); }\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ...z };\n```\n\n### \"always\"\n\nWhen using the `\"always\"` option, whitespace is required between spread operators and their expressions.\n\n```json\nrest-spread-spacing: [\"error\", \"always\"]\n```\n\nExamples of **incorrect** code for this rule with `\"always\"`:\n\n```js\n/*eslint rest-spread-spacing:[\"error\", \"always\"]*/\n\nfn(...args)\n[...arr, 4, 5, 6]\nlet [a, b, ...arr] = [1, 2, 3, 4, 5];\nfunction fn(...args) { console.log(args); }\nlet { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ...z };\n```\n\nExamples of **correct** code for this rule with `\"always\"`:\n\n```js\n/*eslint rest-spread-spacing: [\"error\", \"always\"]*/\n\nfn(... args)\n[... arr, 4, 5, 6]\nlet [a, b, ... arr] = [1, 2, 3, 4, 5];\nfunction fn(... args) { console.log(args); }\nlet { x, y, ... z } = { x: 1, y: 2, a: 3, b: 4 };\nlet n = { x, y, ... z };\n```\n\n## When Not To Use It\n\nYou can safely disable this rule if you do not care about enforcing consistent spacing between spread operators and their expressions.\n\n## Further Reading\n\n* [Object Rest/Spread Properties for ECMAScript](https://github.com/tc39/proposal-object-rest-spread)\n"
	],
	[
		"semi",
		"# require or disallow semicolons instead of ASI (semi)\n\nJavaScript is unique amongst the C-like languages in that it doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as **automatic semicolon insertion (ASI)** and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:\n\n```js\nvar name = \"ESLint\"\nvar website = \"eslint.org\";\n```\n\nOn the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.\n\nIn the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn't exist and always include semicolons manually. The rationale is that it's easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.\n\nHowever, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:\n\n```js\nreturn\n{\n    name: \"ESLint\"\n};\n```\n\nThis may look like a `return` statement that returns an object literal, however, the JavaScript engine will interpret this code as:\n\n```js\nreturn;\n{\n    name: \"ESLint\";\n}\n```\n\nEffectively, a semicolon is inserted after the `return` statement, causing the code below it (a labeled literal inside a block) to be unreachable. This rule and the [no-unreachable](no-unreachable.md) rule will protect your code from such cases.\n\nOn the other side of the argument are those who say that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:\n\n```js\nvar globalCounter = { }\n\n(function () {\n    var n = 0\n    globalCounter.increment = function () {\n        return ++n\n    }\n})()\n```\n\nIn this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it's a function). The [no-unexpected-multiline](no-unexpected-multiline.md) rule can protect your code from such cases.\n\nAlthough ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a `\\n` character always ends a statement (just like a semicolon) unless one of the following is true:\n\n1. The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with `.` or `,`.)\n1. The line is `--` or `++` (in which case it will decrement/increment the next token.)\n1. It is a `for()`, `while()`, `do`, `if()`, or `else`, and there is no `{`\n1. The next line starts with `[`, `(`, `+`, `*`, `/`, `-`, `,`, `.`, or some other binary operator that can only be found between two tokens in a single expression.\n\n## Rule Details\n\nThis rule enforces consistent use of semicolons.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"always\"` (default) requires semicolons at the end of statements\n* `\"never\"` disallows semicolons as the end of statements (except to disambiguate statements beginning with `[`, `(`, `/`, `+`, or `-`)\n\nObject option (when `\"always\"`):\n\n* `\"omitLastInOneLineBlock\": true` ignores the last semicolon in a block in which its braces (and therefore the content of the block) are in the same line\n\nObject option (when `\"never\"`):\n\n* `\"beforeStatementContinuationChars\": \"any\"` (default) ignores semicolons (or lacking semicolon) at the end of statements if the next line starts with `[`, `(`, `/`, `+`, or `-`.\n* `\"beforeStatementContinuationChars\": \"always\"` requires semicolons at the end of statements if the next line starts with `[`, `(`, `/`, `+`, or `-`.\n* `\"beforeStatementContinuationChars\": \"never\"` disallows semicolons as the end of statements if it doesn't make ASI hazard even if the next line starts with `[`, `(`, `/`, `+`, or `-`.\n\n### always\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: [\"error\", \"always\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint semi: \"error\"*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint semi: [\"error\", \"never\"]*/\n\nvar name = \"ESLint\"\n\nobject.method = function() {\n    // ...\n}\n\nvar name = \"ESLint\"\n\n;(function() {\n    // ...\n})()\n\nimport a from \"a\"\n(function() {\n    // ...\n})()\n\nimport b from \"b\"\n;(function() {\n    // ...\n})()\n```\n\n#### omitLastInOneLineBlock\n\nExamples of additional **correct** code for this rule with the `\"always\", { \"omitLastInOneLineBlock\": true }` options:\n\n```js\n/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineBlock\": true}] */\n\nif (foo) { bar() }\n\nif (foo) { bar(); baz() }\n```\n\n#### beforeStatementContinuationChars\n\nExamples of additional **incorrect** code for this rule with the `\"never\", { \"beforeStatementContinuationChars\": \"always\" }` options:\n\n```js\n/*eslint semi: [\"error\", \"never\", { \"beforeStatementContinuationChars\": \"always\"}] */\nimport a from \"a\"\n\n(function() {\n    // ...\n})()\n```\n\nExamples of additional **incorrect** code for this rule with the `\"never\", { \"beforeStatementContinuationChars\": \"never\" }` options:\n\n```js\n/*eslint semi: [\"error\", \"never\", { \"beforeStatementContinuationChars\": \"never\"}] */\nimport a from \"a\"\n\n;(function() {\n    // ...\n})()\n```\n\n## When Not To Use It\n\nIf you do not want to enforce semicolon usage (or omission) in any particular way, then you can turn this rule off.\n\n## Further Reading\n\n* [An Open Letter to JavaScript Leaders Regarding Semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)\n* [JavaScript Semicolon Insertion](http://inimino.org/~inimino/blog/javascript_semicolons)\n\n## Related Rules\n\n* [no-extra-semi](no-extra-semi.md)\n* [no-unexpected-multiline](no-unexpected-multiline.md)\n* [semi-spacing](semi-spacing.md)\n"
	],
	[
		"semi-spacing",
		"# Enforce spacing before and after semicolons (semi-spacing)\n\nJavaScript allows you to place unnecessary spaces before or after a semicolon.\n\nDisallowing or enforcing space around a semicolon can improve the readability of your program.\n\n```js\nvar a = \"b\" ;\n\nvar c = \"d\";var e = \"f\";\n```\n\n## Rule Details\n\nThis rule aims to enforce spacing around a semicolon. This rule prevents the use of spaces before a semicolon in expressions.\n\nThis rule doesn't check spacing in the following cases:\n\n* The spacing after the semicolon if it is the first token in the line.\n\n* The spacing before the semicolon if it is after an opening parenthesis (`(` or `{`), or the spacing after the semicolon if it is before a closing parenthesis (`)` or `}`). That spacing is checked by `space-in-parens` or `block-spacing`.\n\n* The spacing around the semicolon in a for loop with an empty condition (`for(;;)`).\n\n## Options\n\nThe rule takes one option, an object, which has two keys `before` and `after` having boolean values `true` or `false`.\nIf `before` is `true`, space is enforced before semicolons and if it's `false`, space is disallowed before semicolons.\nIf `after` is `true`, space is enforced after semicolons and if it's `false`, space is disallowed after semicolons.\nThe `after` option will be only applied if a semicolon is not at the end of line.\n\nThe default is `{\"before\": false, \"after\": true}`.\n\n```json\n    \"semi-spacing\": [\"error\", {\"before\": false, \"after\": true}]\n```\n\n### `{\"before\": false, \"after\": true}`\n\nThis is the default option. It enforces spacing after semicolons and disallows spacing before semicolons.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint semi-spacing: \"error\"*/\n\nvar foo ;\nvar foo;var bar;\nthrow new Error(\"error\") ;\nwhile (a) { break ; }\nfor (i = 0 ; i < 10 ; i++) {}\nfor (i = 0;i < 10;i++) {}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint semi-spacing: \"error\"*/\n\nvar foo;\nvar foo; var bar;\nthrow new Error(\"error\");\nwhile (a) { break; }\nfor (i = 0; i < 10; i++) {}\nfor (;;) {}\nif (true) {;}\n;foo();\n```\n\n### `{\"before\": true, \"after\": false}`\n\nThis option enforces spacing before semicolons and disallows spacing after semicolons.\n\nExamples of **incorrect** code for this rule with the `{\"before\": true, \"after\": false}` option:\n\n```js\n/*eslint semi-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo;\nvar foo ; var bar;\nthrow new Error(\"error\");\nwhile (a) { break; }\nfor (i = 0;i < 10;i++) {}\nfor (i = 0; i < 10; i++) {}\n```\n\nExamples of **correct** code for this rule with the `{\"before\": true, \"after\": false}` option:\n\n```js\n/*eslint semi-spacing: [\"error\", { \"before\": true, \"after\": false }]*/\n\nvar foo ;\nvar foo ;var bar ;\nthrow new Error(\"error\") ;\nwhile (a) {break ;}\nfor (i = 0 ;i < 10 ;i++) {}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing before or after semicolons.\n\n## Related Rules\n\n* [semi](semi.md)\n* [no-extra-semi](no-extra-semi.md)\n* [comma-spacing](comma-spacing.md)\n* [block-spacing](block-spacing.md)\n* [space-in-parens](space-in-parens.md)\n"
	],
	[
		"semi-style",
		"# Enforce location of semicolons (semi-style)\n\nGenerally, semicolons are at the end of lines. However, in semicolon-less style, semicolons are at the beginning of lines. This rule enforces that semicolons are at the configured location.\n\n## Rule Details\n\nThis rule reports line terminators around semicolons.\n\nThis rule has an option.\n\n```json\n{\n    \"semi-style\": [\"error\", \"last\"],\n}\n```\n\n- `\"last\"` (Default) enforces that semicolons are at the end of statements.\n- `\"first\"` enforces that semicolons are at the beginning of statements. Semicolons of `for` loop heads (`for(a;b;c){}`) should be at the end of lines even if you use this option.\n\nExamples of **incorrect** code for this rule with `\"last\"` option:\n\n```js\n/*eslint semi-style: [\"error\", \"last\"]*/\n\nfoo()\n;[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0\n    ; i < 10\n    ; ++i\n) {\n    foo()\n}\n```\n\nExamples of **correct** code for this rule with `\"last\"` option:\n\n```js\n/*eslint semi-style: [\"error\", \"last\"]*/\n\nfoo();\n[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0;\n    i < 10;\n    ++i\n) {\n    foo()\n}\n```\n\nExamples of **incorrect** code for this rule with `\"first\"` option:\n\n```js\n/*eslint semi-style: [\"error\", \"first\"]*/\n\nfoo();\n[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0\n    ; i < 10\n    ; ++i\n) {\n    foo()\n}\n```\n\nExamples of **correct** code for this rule with `\"first\"` option:\n\n```js\n/*eslint semi-style: [\"error\", \"first\"]*/\n\nfoo()\n;[1, 2, 3].forEach(bar)\n\nfor (\n    var i = 0;\n    i < 10;\n    ++i\n) {\n    foo()\n}\n```\n\n## When Not To Use It\n\nIf you don't want to notify the location of semicolons, then it's safe to disable this rule.\n\n## Related rules\n\n- [no-extra-semi](./no-extra-semi.md)\n- [semi](./semi.md)\n- [semi-spacing](./semi-spacing.md)\n"
	],
	[
		"sort-imports",
		"# Import Sorting (sort-imports)\n\nThe import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:\n\n```js\n// single - Import single member.\nimport myMember from \"my-module.js\";\n\n// multiple - Import multiple members.\nimport {foo, bar} from \"my-module.js\";\n\n// all - Import all members, where myModule contains all the exported bindings.\nimport * as myModule from \"my-module.js\";\n```\n\nThe import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.\n\n```js\n// none - Import module without exported bindings.\nimport \"my-module.js\"\n```\n\nWhen declaring multiple imports, a sorted list of import declarations make it easier for developers to read the code and find necessary imports later. This rule is purely a matter of style.\n\n\n## Rule Details\n\nThis rule checks all import declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.\n\nThe `--fix` option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g. `import { b, a } from 'foo.js'` is corrected to `import { a, b } from 'foo.js'`), but multiple lines are not reordered.\n\n## Options\n\nThis rule accepts an object with its properties as\n\n* `ignoreCase` (default: `false`)\n* `ignoreDeclarationSort` (default: `false`)\n* `ignoreMemberSort` (default: `false`)\n* `memberSyntaxSortOrder` (default: `[\"none\", \"all\", \"multiple\", \"single\"]`); all 4 items must be present in the array, but you can change the order:\n    * `none` = import module without exported bindings.\n    * `all` = import all members provided by exported bindings.\n    * `multiple` = import multiple members.\n    * `single` = import single member.\n\nDefault option settings are:\n\n```json\n{\n    \"sort-imports\": [\"error\", {\n        \"ignoreCase\": false,\n        \"ignoreDeclarationSort\": false,\n        \"ignoreMemberSort\": false,\n        \"memberSyntaxSortOrder\": [\"none\", \"all\", \"multiple\", \"single\"]\n    }]\n}\n```\n\n## Examples\n\n### Default settings\n\nExamples of **correct** code for this rule when using default options:\n\n```js\n/*eslint sort-imports: \"error\"*/\nimport 'module-without-export.js';\nimport * as bar from 'bar.js';\nimport * as foo from 'foo.js';\nimport {alpha, beta} from 'alpha.js';\nimport {delta, gamma} from 'delta.js';\nimport a from 'baz.js';\nimport b from 'qux.js';\n\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport b from 'bar.js';\nimport c from 'baz.js';\n\n/*eslint sort-imports: \"error\"*/\nimport 'foo.js'\nimport * as bar from 'bar.js';\nimport {a, b} from 'baz.js';\nimport c from 'qux.js';\n\n/*eslint sort-imports: \"error\"*/\nimport {a, b, c} from 'foo.js'\n```\n\nExamples of **incorrect** code for this rule when using default options:\n\n```js\n/*eslint sort-imports: \"error\"*/\nimport b from 'foo.js';\nimport a from 'bar.js';\n\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport A from 'bar.js';\n\n/*eslint sort-imports: \"error\"*/\nimport {b, c} from 'foo.js';\nimport {a, b} from 'bar.js';\n\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport {b, c} from 'bar.js';\n\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport * as b from 'bar.js';\n\n/*eslint sort-imports: \"error\"*/\nimport {b, a, c} from 'foo.js'\n```\n\n### `ignoreCase`\n\nWhen `true` the rule ignores the case-sensitivity of the imports local name.\n\nExamples of **incorrect** code for this rule with the `{ \"ignoreCase\": true }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"ignoreCase\": true }]*/\n\nimport B from 'foo.js';\nimport a from 'bar.js';\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreCase\": true }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"ignoreCase\": true }]*/\n\nimport a from 'foo.js';\nimport B from 'bar.js';\nimport c from 'baz.js';\n```\n\nDefault is `false`.\n\n### `ignoreDeclarationSort`\n\nIgnores the sorting of import declaration statements.\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreDeclarationSort\": false }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"ignoreDeclarationSort\": false }]*/\nimport b from 'foo.js'\nimport a from 'bar.js'\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreDeclarationSort\": true }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"ignoreDeclarationSort\": true }]*/\nimport a from 'foo.js'\nimport b from 'bar.js'\n```\n\n```js\n/*eslint sort-imports: [\"error\", { \"ignoreDeclarationSort\": true }]*/\nimport b from 'foo.js'\nimport a from 'bar.js'\n```\n\nDefault is `false`.\n\n### `ignoreMemberSort`\n\nIgnores the member sorting within a `multiple` member import declaration.\n\nExamples of **incorrect** code for this rule with the default `{ \"ignoreMemberSort\": false }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"ignoreMemberSort\": false }]*/\nimport {b, a, c} from 'foo.js'\n```\n\nExamples of **correct** code for this rule with the `{ \"ignoreMemberSort\": true }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"ignoreMemberSort\": true }]*/\nimport {b, a, c} from 'foo.js'\n```\n\nDefault is `false`.\n\n### `memberSyntaxSortOrder`\n\nThere are four different styles and the default member syntax sort order is:\n\n* `none` - import module without exported bindings.\n* `all` - import all members provided by exported bindings.\n* `multiple` - import multiple members.\n* `single` - import single member.\n\nAll four options must be specified in the array, but you can customize their order.\n\nExamples of **incorrect** code for this rule with the default `{ \"memberSyntaxSortOrder\": [\"none\", \"all\", \"multiple\", \"single\"] }` option:\n\n```js\n/*eslint sort-imports: \"error\"*/\nimport a from 'foo.js';\nimport * as b from 'bar.js';\n```\n\nExamples of **correct** code for this rule with the `{ \"memberSyntaxSortOrder\": ['single', 'all', 'multiple', 'none'] }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"memberSyntaxSortOrder\": ['single', 'all', 'multiple', 'none'] }]*/\n\nimport a from 'foo.js';\nimport * as b from 'bar.js';\n```\n\nExamples of **correct** code for this rule with the `{ \"memberSyntaxSortOrder\": ['all', 'single', 'multiple', 'none'] }` option:\n\n```js\n/*eslint sort-imports: [\"error\", { \"memberSyntaxSortOrder\": ['all', 'single', 'multiple', 'none'] }]*/\n\nimport * as foo from 'foo.js';\nimport z from 'zoo.js';\nimport {a, b} from 'foo.js';\n```\n\nDefault is `[\"none\", \"all\", \"multiple\", \"single\"]`.\n\n## When Not To Use It\n\nThis rule is a formatting preference and not following it won't negatively affect the quality of your code. If alphabetizing imports isn't a part of your coding standards, then you can leave this rule disabled.\n\n## Related Rules\n\n* [sort-keys](sort-keys.md)\n* [sort-vars](sort-vars.md)\n"
	],
	[
		"sort-keys",
		"# require object keys to be sorted (sort-keys)\n\nWhen declaring multiple properties, some developers prefer to sort property names alphabetically to be able to find necessary property easier at the later time. Others feel that it adds complexity and becomes burden to maintain.\n\n## Rule Details\n\nThis rule checks all property definitions of object expressions and verifies that all variables are sorted alphabetically.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint sort-keys: \"error\"*/\n/*eslint-env es6*/\n\nlet obj = {a: 1, c: 3, b: 2};\nlet obj = {a: 1, \"c\": 3, b: 2};\n\n// Case-sensitive by default.\nlet obj = {a: 1, b: 2, C: 3};\n\n// Non-natural order by default.\nlet obj = {1: a, 2: c, 10: b};\n\n// This rule checks computed properties which have a simple name as well.\n// Simple names are names which are expressed by an Identifier node or a Literal node.\nconst S = Symbol(\"s\")\nlet obj = {a: 1, [\"c\"]: 3, b: 2};\nlet obj = {a: 1, [S]: 3, b: 2};\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint sort-keys: \"error\"*/\n/*eslint-env es6*/\n\nlet obj = {a: 1, b: 2, c: 3};\nlet obj = {a: 1, \"b\": 2, c: 3};\n\n// Case-sensitive by default.\nlet obj = {C: 3, a: 1, b: 2};\n\n// Non-natural order by default.\nlet obj = {1: a, 10: b, 2: c};\n\n// This rule checks computed properties which have a simple name as well.\nlet obj = {a: 1, [\"b\"]: 2, c: 3};\nlet obj = {a: 1, [b]: 2, c: 3};\n\n// This rule ignores computed properties which have a non-simple name.\nlet obj = {a: 1, [c + d]: 3, b: 2};\nlet obj = {a: 1, [\"c\" + \"d\"]: 3, b: 2};\nlet obj = {a: 1, [`${c}`]: 3, b: 2};\nlet obj = {a: 1, [tag`c`]: 3, b: 2};\n\n// This rule does not report unsorted properties that are separated by a spread property.\nlet obj = {b: 1, ...c, a: 2};\n```\n\n## Options\n\n```json\n{\n    \"sort-keys\": [\"error\", \"asc\", {\"caseSensitive\": true, \"natural\": false, \"minKeys\": 2}]\n}\n```\n\nThe 1st option is `\"asc\"` or `\"desc\"`.\n\n* `\"asc\"` (default) - enforce properties to be in ascending order.\n* `\"desc\"` - enforce properties to be in descending order.\n\nThe 2nd option is an object which has 3 properties.\n\n* `caseSensitive` - if `true`, enforce properties to be in case-sensitive order. Default is `true`.\n* `minKeys` - Specifies the minimum number of keys that an object should have in order for the object's unsorted keys to produce an error. Default is `2`, which means by default all objects with unsorted keys will result in lint errors.\n* `natural` - if `true`, enforce properties to be in natural order. Default is `false`. Natural Order compares strings containing combination of letters and numbers in the way a human being would sort. It basically sorts numerically, instead of sorting alphabetically. So the number 10 comes after the number 3 in Natural Sorting.\n\nExample for a list:\n\nWith `natural` as true, the ordering would be\n1\n3\n6\n8\n10\n\nWith `natural` as false, the ordering would be\n1\n10\n3\n6\n8\n\n### desc\n\nExamples of **incorrect** code for the `\"desc\"` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"desc\"]*/\n/*eslint-env es6*/\n\nlet obj = {b: 2, c: 3, a: 1};\nlet obj = {\"b\": 2, c: 3, a: 1};\n\n// Case-sensitive by default.\nlet obj = {C: 1, b: 3, a: 2};\n\n// Non-natural order by default.\nlet obj = {10: b, 2: c, 1: a};\n```\n\nExamples of **correct** code for the `\"desc\"` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"desc\"]*/\n/*eslint-env es6*/\n\nlet obj = {c: 3, b: 2, a: 1};\nlet obj = {c: 3, \"b\": 2, a: 1};\n\n// Case-sensitive by default.\nlet obj = {b: 3, a: 2, C: 1};\n\n// Non-natural order by default.\nlet obj = {2: c, 10: b, 1: a};\n```\n\n### insensitive\n\nExamples of **incorrect** code for the `{caseSensitive: false}` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"asc\", {caseSensitive: false}]*/\n/*eslint-env es6*/\n\nlet obj = {a: 1, c: 3, C: 4, b: 2};\nlet obj = {a: 1, C: 3, c: 4, b: 2};\n```\n\nExamples of **correct** code for the `{caseSensitive: false}` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"asc\", {caseSensitive: false}]*/\n/*eslint-env es6*/\n\nlet obj = {a: 1, b: 2, c: 3, C: 4};\nlet obj = {a: 1, b: 2, C: 3, c: 4};\n```\n\n### natural\n\nExamples of **incorrect** code for the `{natural: true}` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"asc\", {natural: true}]*/\n/*eslint-env es6*/\n\nlet obj = {1: a, 10: c, 2: b};\n```\n\nExamples of **correct** code for the `{natural: true}` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"asc\", {natural: true}]*/\n/*eslint-env es6*/\n\nlet obj = {1: a, 2: b, 10: c};\n```\n\n### minKeys\n\nExamples of **incorrect** code for the `{minKeys: 4}` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}]*/\n/*eslint-env es6*/\n\n// 4 keys\nlet obj = {\n    b: 2,\n    a: 1, // not sorted correctly (should be 1st key)\n    c: 3,\n    d: 4,\n};\n\n// 5 keys\nlet obj = {\n    2: 'a',\n    1: 'b', // not sorted correctly (should be 1st key)\n    3: 'c',\n    4: 'd',\n    5: 'e',\n};\n```\n\nExamples of **correct** code for the `{minKeys: 4}` option:\n\n```js\n/*eslint sort-keys: [\"error\", \"asc\", {minKeys: 4}]*//\n/*eslint-env es6*/\n\n// 3 keys\nlet obj = {\n    b: 2,\n    a: 1,\n    c: 3,\n};\n\n// 2 keys\nlet obj = {\n    2: 'b',\n    1: 'a',\n};\n```\n\n## When Not To Use It\n\nIf you don't want to notify about properties' order, then it's safe to disable this rule.\n\n## Related Rules\n\n* [sort-imports](sort-imports.md)\n* [sort-vars](sort-vars.md)\n\n## Compatibility\n\n* **JSCS:** [validateOrderInObjectKeys](https://jscs-dev.github.io/rule/validateOrderInObjectKeys)\n"
	],
	[
		"sort-vars",
		"# Variable Sorting (sort-vars)\n\nWhen declaring multiple variables within the same block, some developers prefer to sort variable names alphabetically to be able to find necessary variable easier at the later time. Others feel that it adds complexity and becomes burden to maintain.\n\n## Rule Details\n\nThis rule checks all variable declaration blocks and verifies that all variables are sorted alphabetically.\nThe default configuration of the rule is case-sensitive.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint sort-vars: \"error\"*/\n\nvar b, a;\n\nvar a, B, c;\n\nvar a, A;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint sort-vars: \"error\"*/\n\nvar a, b, c, d;\n\nvar _a = 10;\nvar _b = 20;\n\nvar A, a;\n\nvar B, a, c;\n```\n\nAlphabetical list is maintained starting from the first variable and excluding any that are considered problems. So the following code will produce two problems:\n\n```js\n/*eslint sort-vars: \"error\"*/\n\nvar c, d, a, b;\n```\n\nBut this one, will only produce one:\n\n```js\n/*eslint sort-vars: \"error\"*/\n\nvar c, d, a, e;\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"ignoreCase\": true` (default `false`) ignores the case-sensitivity of the variables order\n\n### ignoreCase\n\nExamples of **correct** code for this rule with the `{ \"ignoreCase\": true }` option:\n\n```js\n/*eslint sort-vars: [\"error\", { \"ignoreCase\": true }]*/\n\nvar a, A;\n\nvar a, B, c;\n```\n\n## When Not To Use It\n\nThis rule is a formatting preference and not following it won't negatively affect the quality of your code. If you alphabetizing variables isn't a part of your coding standards, then you can leave this rule off.\n\n## Related Rules\n\n* [sort-keys](sort-keys.md)\n* [sort-imports](sort-imports.md)\n"
	],
	[
		"space-before-blocks",
		"# Require Or Disallow Space Before Blocks (space-before-blocks)\n\nConsistency is an important part of any style guide.\nWhile it is a personal preference where to put the opening brace of blocks,\nit should be consistent across a whole project.\nHaving an inconsistent style distracts the reader from seeing the important parts of the code.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing before blocks. It is only applied on blocks that don’t begin on a new line.\n\n* This rule ignores spacing which is between `=>` and a block. The spacing is handled by the `arrow-spacing` rule.\n* This rule ignores spacing which is between a keyword and a block. The spacing is handled by the `keyword-spacing` rule.\n\n## Options\n\nThis rule takes one argument. If it is `\"always\"` then blocks must always have at least one preceding space. If `\"never\"`\nthen all blocks should never have any preceding space. If different spacing is desired for function\nblocks, keyword blocks and classes, an optional configuration object can be passed as the rule argument to\nconfigure the cases separately. If any value in the configuration object is `\"off\"`, then neither style will be enforced for blocks of that kind.\n\n( e.g. `{ \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"always\" }` )\n\nThe default is `\"always\"`.\n\n### \"always\"\n\nExamples of **incorrect** code for this rule with the \"always\" option:\n\n```js\n/*eslint space-before-blocks: \"error\"*/\n\nif (a){\n    b();\n}\n\nfunction a(){}\n\nfor (;;){\n    b();\n}\n\ntry {} catch(a){}\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint space-before-blocks: \"error\"*/\n\nif (a) {\n    b();\n}\n\nif (a) {\n    b();\n} else{ /*no error. this is checked by `keyword-spacing` rule.*/\n    c();\n}\n\n\nfunction a() {}\n\nfor (;;) {\n    b();\n}\n\ntry {} catch(a) {}\n```\n\n### \"never\"\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint space-before-blocks: [\"error\", \"never\"]*/\n\nif (a) {\n    b();\n}\n\nfunction a() {}\n\nfor (;;) {\n    b();\n}\n\ntry {} catch(a) {}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint space-before-blocks: [\"error\", \"never\"]*/\n\nif (a){\n    b();\n}\n\nfunction a(){}\n\nfor (;;){\n    b();\n}\n\ntry{} catch(a){}\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **incorrect** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }`:\n\n```js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction a() {}\n\ntry {} catch(a){}\n\nclass Foo{\n  constructor() {}\n}\n```\n\nExamples of **correct** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }`:\n\n```js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"always\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nfor (;;) {\n  // ...\n}\n\ndescribe(function(){\n  // ...\n});\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **incorrect** code for this rule when configured `{ \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }`:\n\n```js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nfunction a(){}\n\ntry {} catch(a) {}\n\nclass Foo {\n  constructor(){}\n}\n```\n\nExamples of **correct** code for this rule when configured `{ \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }`:\n\n```js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"always\", \"keywords\": \"never\", \"classes\": \"never\" }]*/\n/*eslint-env es6*/\n\nif (a){\n  b();\n}\n\nvar a = function() {}\n\nclass Foo{\n  constructor() {}\n}\n```\n\nExamples of **incorrect** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }`:\n\n```js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }]*/\n/*eslint-env es6*/\n\nclass Foo{\n  constructor(){}\n}\n```\n\nExamples of **correct** code for this rule when configured `{ \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }`:\n\n```js\n/*eslint space-before-blocks: [\"error\", { \"functions\": \"never\", \"keywords\": \"never\", \"classes\": \"always\" }]*/\n/*eslint-env es6*/\n\nclass Foo {\n  constructor(){}\n}\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing before blocks.\n\n## Related Rules\n\n* [keyword-spacing](keyword-spacing.md)\n* [arrow-spacing](arrow-spacing.md)\n* [brace-style](brace-style.md)\n"
	],
	[
		"space-before-function-paren",
		"# Require or disallow a space before function parenthesis (space-before-function-paren)\n\nWhen formatting a function, whitespace is allowed between the function name or `function` keyword and the opening paren. Named functions also require a space between the `function` keyword and the function name, but anonymous functions require no whitespace. For example:\n\n```js\nfunction withoutSpace(x) {\n    // ...\n}\n\nfunction withSpace (x) {\n    // ...\n}\n\nvar anonymousWithoutSpace = function() {};\n\nvar anonymousWithSpace = function () {};\n```\n\nStyle guides may require a space after the `function` keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.\n\n## Rule Details\n\nThis rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn't match the preferences specified.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```js\n{\n    \"space-before-function-paren\": [\"error\", \"always\"],\n    // or\n    \"space-before-function-paren\": [\"error\", {\n        \"anonymous\": \"always\",\n        \"named\": \"always\",\n        \"asyncArrow\": \"always\"\n    }],\n}\n```\n\n* `always` (default) requires a space followed by the `(` of arguments.\n* `never` disallows any space followed by the `(` of arguments.\n\nThe string option does not check async arrow function expressions for backward compatibility.\n\nYou can also use a separate option for each type of function.\nEach of the following options can be set to `\"always\"`, `\"never\"`, or `\"ignore\"`. The default is `\"always\"`.\n\n* `anonymous` is for anonymous function expressions (e.g. `function () {}`).\n* `named` is for named function expressions (e.g. `function foo () {}`).\n* `asyncArrow` is for async arrow function expressions (e.g. `async () => {}`).\n\n### \"always\"\n\nExamples of **incorrect** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint space-before-function-paren: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n\nvar foo = async() => 1\n```\n\nExamples of **correct** code for this rule with the default `\"always\"` option:\n\n```js\n/*eslint space-before-function-paren: \"error\"*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n\nvar foo = async () => 1\n```\n\n### \"never\"\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n\nvar foo = async () => 1\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", \"never\"]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n\nvar foo = async() => 1\n```\n\n### `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n\nvar foo = async(a) => await a\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", {\"anonymous\": \"always\", \"named\": \"never\", \"asyncArrow\": \"always\"}]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n\nvar foo = async (a) => await a\n```\n\n### `{\"anonymous\": \"never\", \"named\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"never\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"never\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"never\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo () {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n```\n\n### `{\"anonymous\": \"ignore\", \"named\": \"always\"}`\n\nExamples of **incorrect** code for this rule with the `{\"anonymous\": \"ignore\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nfunction foo() {\n    // ...\n}\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar foo = {\n    bar() {\n        // ...\n    }\n};\n```\n\nExamples of **correct** code for this rule with the `{\"anonymous\": \"ignore\", \"named\": \"always\"}` option:\n\n```js\n/*eslint space-before-function-paren: [\"error\", { \"anonymous\": \"ignore\", \"named\": \"always\" }]*/\n/*eslint-env es6*/\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function () {\n    // ...\n};\n\nfunction foo () {\n    // ...\n}\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar foo = {\n    bar () {\n        // ...\n    }\n};\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing before function parenthesis.\n\n## Related Rules\n\n* [space-after-keywords](space-after-keywords.md)\n* [space-return-throw-case](space-return-throw-case.md)\n"
	],
	[
		"space-in-parens",
		"# Disallow or enforce spaces inside of parentheses (space-in-parens)\n\nSome style guides require or disallow spaces inside of parentheses:\n\n```js\nfoo( 'bar' );\nvar x = ( 1 + 2 ) * 3;\n\nfoo('bar');\nvar x = (1 + 2) * 3;\n```\n\n## Rule Details\n\nThis rule will enforce consistency of spacing directly inside of parentheses, by disallowing or requiring one or more spaces to the right of `(` and to the left of `)`. In either case, `()` will still be allowed.\n\n## Options\n\nThere are two options for this rule:\n\n* `\"never\"` (default) enforces zero spaces inside of parentheses\n* `\"always\"` enforces a space inside of parentheses\n\nDepending on your coding conventions, you can choose either option by specifying it in your configuration:\n\n```json\n\"space-in-parens\": [\"error\", \"always\"]\n```\n\n### \"never\"\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\"]*/\n\nfoo( 'bar');\nfoo('bar' );\nfoo( 'bar' );\n\nvar foo = ( 1 + 2 ) * 3;\n( function () { return 'bar'; }() );\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\"]*/\n\nfoo();\n\nfoo('bar');\n\nvar foo = (1 + 2) * 3;\n(function () { return 'bar'; }());\n```\n\n### \"always\"\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\"]*/\n\nfoo( 'bar');\nfoo('bar' );\nfoo('bar');\n\nvar foo = (1 + 2) * 3;\n(function () { return 'bar'; }());\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\"]*/\n\nfoo();\n\nfoo( 'bar' );\n\nvar foo = ( 1 + 2 ) * 3;\n( function () { return 'bar'; }() );\n```\n\n### Exceptions\n\nAn object literal may be used as a third array item to specify exceptions, with the key `\"exceptions\"` and an array as the value. These exceptions work in the context of the first option. That is, if `\"always\"` is set to enforce spacing, then any \"exception\" will *disallow* spacing. Conversely, if `\"never\"` is set to disallow spacing, then any \"exception\" will *enforce* spacing.\n\nThe following exceptions are available: `[\"{}\", \"[]\", \"()\", \"empty\"]`.\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"{}\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo({bar: 'baz'});\nfoo(1, {bar: 'baz'});\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"{}\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo( {bar: 'baz'} );\nfoo(1, {bar: 'baz'} );\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"{}\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo( {bar: 'baz'} );\nfoo( 1, {bar: 'baz'} );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"{}\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\"] }]*/\n\nfoo({bar: 'baz'});\nfoo( 1, {bar: 'baz'});\n```\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"[]\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo([bar, baz]);\nfoo([bar, baz], 1);\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"[]\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo( [bar, baz] );\nfoo( [bar, baz], 1);\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"[]\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo( [bar, baz] );\nfoo( [bar, baz], 1 );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"[]\"] }` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"[]\"] }]*/\n\nfoo([bar, baz]);\nfoo([bar, baz], 1 );\n```\n\nExamples of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"()\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"()\"] }]*/\n\nfoo((1 + 2));\nfoo((1 + 2), 1);\n```\n\nExamples of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"()\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"()\"] }]*/\n\nfoo( (1 + 2) );\nfoo( (1 + 2), 1);\n```\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"()\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"()\"] }]*/\n\nfoo( ( 1 + 2 ) );\nfoo( ( 1 + 2 ), 1 );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"()\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"()\"] }]*/\n\nfoo(( 1 + 2 ));\nfoo(( 1 + 2 ), 1 );\n```\n\nThe `\"empty\"` exception concerns empty parentheses, and works the same way as the other exceptions, inverting the first option.\n\nExample of **incorrect** code for this rule with the `\"never\", { \"exceptions\": [\"empty\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo();\n```\n\nExample of **correct** code for this rule with the `\"never\", { \"exceptions\": [\"empty\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"never\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo( );\n```\n\nExample of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"empty\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo( );\n```\n\nExample of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"empty\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo();\n```\n\nYou can include multiple entries in the `\"exceptions\"` array.\n\nExamples of **incorrect** code for this rule with the `\"always\", { \"exceptions\": [\"{}\", \"[]\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\", \"[]\"] }]*/\n\nbar( {bar:'baz'} );\nbaz( 1, [1,2] );\nfoo( {bar: 'baz'}, [1, 2] );\n```\n\nExamples of **correct** code for this rule with the `\"always\", { \"exceptions\": [\"{}\", \"[]\"] }]` option:\n\n```js\n/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"{}\", \"[]\"] }]*/\n\nbar({bar:'baz'});\nbaz( 1, [1,2]);\nfoo({bar: 'baz'}, [1, 2]);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing between parentheses.\n\n## Related Rules\n\n* [space-in-brackets](space-in-brackets.md) (deprecated)\n"
	],
	[
		"space-infix-ops",
		"# require spacing around infix operators (space-infix-ops)\n\nWhile formatting preferences are very personal, a number of style guides require spaces around operators, such as:\n\n```js\nvar sum = 1 + 2;\n```\n\nThe proponents of these extra spaces believe it make the code easier to read and can more easily highlight potential errors, such as:\n\n```js\nvar sum = i+++2;\n```\n\nWhile this is valid JavaScript syntax, it is hard to determine what the author intended.\n\n## Rule Details\n\nThis rule is aimed at ensuring there are spaces around infix operators.\n\n## Options\n\nThis rule accepts a single options argument with the following defaults:\n\n```json\n\"space-infix-ops\": [\"error\", {\"int32Hint\": false}]\n```\n\n### `int32Hint`\n\nSet the `int32Hint` option to `true` (default is `false`) to allow write `a|0` without space.\n\n```js\nvar foo = bar|0; // `foo` is forced to be signed 32 bit integer\n```\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint space-infix-ops: \"error\"*/\n/*eslint-env es6*/\n\na+b\n\na+ b\n\na +b\n\na?b:c\n\nconst a={b:1};\n\nvar {a=0}=bar;\n\nfunction foo(a=0) { }\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint space-infix-ops: \"error\"*/\n/*eslint-env es6*/\n\na + b\n\na       + b\n\na ? b : c\n\nconst a = {b:1};\n\nvar {a = 0} = bar;\n\nfunction foo(a = 0) { }\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with the consistency of spacing around infix operators.\n"
	],
	[
		"space-unary-ops",
		"# Require or disallow spaces before/after unary operators (space-unary-ops)\n\nSome style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.\n\n## Rule Details\n\nThis rule enforces consistency regarding the spaces after `words` unary operators and after/before `nonwords` unary operators.\n\nExamples of unary `words` operators:\n\n```js\n// new\nvar joe = new Person();\n\n// delete\nvar obj = {\n    foo: 'bar'\n};\ndelete obj.foo;\n\n// typeof\ntypeof {} // object\n\n// void\nvoid 0 // undefined\n```\n\nExamples of unary `nonwords` operators:\n\n```js\nif ([1,2,3].indexOf(1) !== -1) {};\nfoo = --foo;\nbar = bar++;\nbaz = !foo;\nqux = !!baz;\n```\n\n## Options\n\nThis rule has three options:\n\n* `words` - applies to unary word operators such as: `new`, `delete`, `typeof`, `void`, `yield`\n* `nonwords` - applies to unary operators such as: `-`, `+`, `--`, `++`, `!`, `!!`\n* `overrides` - specifies overwriting usage of spacing for each\n  operator, word or non word. This is empty by default, but can be used\n  to enforce or disallow spacing around operators. For example:\n\n```js\n    \"space-unary-ops\": [\n        2, {\n          \"words\": true,\n          \"nonwords\": false,\n          \"overrides\": {\n            \"new\": false,\n            \"++\": true\n          }\n    }]\n```\n\nIn this case, spacing will be disallowed after a `new` operator and required before/after a `++` operator.\n\nExamples of **incorrect** code for this rule with the default `{\"words\": true, \"nonwords\": false}` option:\n\n```js\n/*eslint space-unary-ops: \"error\"*/\n\ntypeof!foo;\n\nvoid{foo:0};\n\nnew[foo][0];\n\ndelete(foo.bar);\n\n++ foo;\n\nfoo --;\n\n- foo;\n\n+ \"3\";\n```\n\n```js\n/*eslint space-unary-ops: \"error\"*/\n/*eslint-env es6*/\n\nfunction *foo() {\n    yield(0)\n}\n```\n\n```js\n/*eslint space-unary-ops: \"error\"*/\n\nasync function foo() {\n    await(bar);\n}\n```\n\nExamples of **correct** code for this rule with the `{\"words\": true, \"nonwords\": false}` option:\n\n```js\n/*eslint space-unary-ops: \"error\"*/\n\n// Word unary operator \"delete\" is followed by a whitespace.\ndelete foo.bar;\n\n// Word unary operator \"new\" is followed by a whitespace.\nnew Foo;\n\n// Word unary operator \"void\" is followed by a whitespace.\nvoid 0;\n\n// Unary operator \"++\" is not followed by whitespace.\n++foo;\n\n// Unary operator \"--\" is not preceded by whitespace.\nfoo--;\n\n// Unary operator \"-\" is not followed by whitespace.\n-foo;\n\n// Unary operator \"+\" is not followed by whitespace.\n+\"3\";\n```\n\n```js\n/*eslint space-unary-ops: \"error\"*/\n/*eslint-env es6*/\n\nfunction *foo() {\n    yield (0)\n}\n```\n\n```js\n/*eslint space-unary-ops: \"error\"*/\n\nasync function foo() {\n    await (bar);\n}\n```\n"
	],
	[
		"spaced-comment",
		"# Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)\n\nSome style guides require or disallow a whitespace immediately after the initial `//` or `/*` of a comment.\nWhitespace after the `//` or `/*` makes it easier to read text in comments.\nOn the other hand, commenting out code is easier without having to put a whitespace right after the `//` or `/*`.\n\n## Rule Details\n\nThis rule will enforce consistency of spacing after the start of a comment `//` or `/*`. It also provides several\nexceptions for various documentation styles.\n\n## Options\n\nThe rule takes two options.\n\n* The first is a string which be either `\"always\"` or `\"never\"`. The default is `\"always\"`.\n\n    * If `\"always\"` then the `//` or `/*` must be followed by at least one whitespace.\n\n    * If `\"never\"` then there should be no whitespace following.\n\n* This rule can also take a 2nd option, an object with any of the following keys: `\"exceptions\"` and `\"markers\"`.\n\n    * The `\"exceptions\"` value is an array of string patterns which are considered exceptions to the rule.\n    Please note that exceptions are ignored if the first argument is `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }]\n    ```\n\n    * The `\"markers\"` value is an array of string patterns which are considered markers for docblock-style comments,\n    such as an additional `/`, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters.\n    The `\"markers\"` array will apply regardless of the value of the first argument, e.g. `\"always\"` or `\"never\"`.\n\n    ```\n    \"spaced-comment\": [\"error\", \"always\", { \"markers\": [\"/\"] }]\n    ```\n\nThe difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas\nexceptions can occur anywhere in the comment string.\n\nYou can also define separate exceptions and markers for block and line comments. The `\"block\"` object can have an additional key `\"balanced\"`, a boolean that specifies if inline block comments should have balanced spacing. The default value is `false`.\n\n* If `\"balanced\": true` and `\"always\"` then the `/*` must be followed by at least one whitespace, and the `*/` must be preceded by at least one whitespace.\n\n* If `\"balanced\": true` and `\"never\"` then there should be no whitespace following `/*` or preceding `*/`.\n\n* If `\"balanced\": false` then balanced whitespace is not enforced.\n\n```json\n\"spaced-comment\": [\"error\", \"always\", {\n    \"line\": {\n        \"markers\": [\"/\"],\n        \"exceptions\": [\"-\", \"+\"]\n    },\n    \"block\": {\n        \"markers\": [\"!\"],\n        \"exceptions\": [\"*\"],\n        \"balanced\": true\n    }\n}]\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\"]*/\n\n//This is a comment with no whitespace at the beginning\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"balanced\": true } }] */\n/* This is a comment with whitespace at the beginning but not the end*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/*\n * This is a comment with a whitespace at the beginning\n */\n\n/*\nThis comment has a newline\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\"] */\n\n/**\n* I am jsdoc\n*/\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n// This is a comment with a whitespace at the beginning\n\n/* This is a comment with a whitespace at the beginning */\n\n/* \\nThis is a comment with a whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"balanced\": true } }]*/\n/*This is a comment with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/*This is a comment with no whitespace at the beginning */\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\"]*/\n\n/**\n* I am jsdoc\n*/\n```\n\n### exceptions\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n//------++++++++\n// Comment block\n//------++++++++\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\", \"+\"] }] */\n\n/*------++++++++*/\n/* Comment block */\n/*------++++++++*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"exceptions\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-\"] }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"line\": { \"exceptions\": [\"-\"] } }] */\n\n//--------------\n// Comment block\n//--------------\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"*\"] }] */\n\n/****************\n * Comment block\n ****************/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"exceptions\": [\"-+\"] }] */\n\n//-+-+-+-+-+-+-+\n// Comment block\n//-+-+-+-+-+-+-+\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"exceptions\": [\"-+\"] } }] */\n\n/*-+-+-+-+-+-+-+*/\n// Comment block\n/*-+-+-+-+-+-+-+*/\n```\n\n### markers\n\nExamples of **incorrect** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n///This is a comment with a marker but without whitespace\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"always\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*! This is a comment with a marker but without whitespace at the end*/\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"block\": { \"markers\": [\"!\"], \"balanced\": true } }]*/\n/*!This is a comment with a marker but with whitespace at the end */\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option combined with `\"markers\"`:\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"/\"] }] */\n\n/// This is a comment with a marker\n```\n\n```js\n/*eslint spaced-comment: [\"error\", \"never\", { \"markers\": [\"!<\"] }]*/\n\n//!<This is a line comment with a marker\n\n/*!<this is a block comment with a marker\nsubsequent lines are ignored\n*/\n```\n\n```js\n/* eslint spaced-comment: [\"error\", \"always\", { \"markers\": [\"global\"] }] */\n\n/*global ABC*/\n```\n\n\n## Related Rules\n\n* [spaced-line-comment](spaced-line-comment.md)\n"
	],
	[
		"strict",
		"# require or disallow strict mode directives (strict)\n\nA strict mode directive is a `\"use strict\"` literal at the beginning of a script or function body. It enables strict mode semantics.\n\nWhen a directive occurs in global scope, strict mode applies to the entire script:\n\n```js\n\"use strict\";\n\n// strict mode\n\nfunction foo() {\n    // strict mode\n}\n```\n\nWhen a directive occurs at the beginning of a function body, strict mode applies only to that function, including all contained functions:\n\n```js\nfunction foo() {\n    \"use strict\";\n    // strict mode\n}\n\nfunction foo2() {\n    // not strict mode\n};\n\n(function() {\n    \"use strict\";\n    function bar() {\n        // strict mode\n    }\n}());\n```\n\nIn the **CommonJS** module system, a hidden function wraps each module and limits the scope of a \"global\" strict mode directive.\n\nIn **ECMAScript** modules, which always have strict mode semantics, the directives are unnecessary.\n\n## Rule Details\n\nThis rule requires or disallows strict mode directives.\n\nThis rule disallows strict mode directives, no matter which option is specified, if ESLint configuration specifies either of the following as [parser options](/docs/user-guide/configuring.md#specifying-parser-options):\n\n* `\"sourceType\": \"module\"` that is, files are **ECMAScript** modules\n* `\"impliedStrict\": true` property in the `ecmaFeatures` object\n\nThis rule disallows strict mode directives, no matter which option is specified, in functions with non-simple parameter lists (for example, parameter lists with default parameter values) because that is a syntax error in **ECMAScript 2016** and later. See the examples of the [function](#function) option.\n\nThe `--fix` option on the command line does not insert new `\"use strict\"` statements, but only removes unneeded statements.\n\n## Options\n\nThis rule has a string option:\n\n* `\"safe\"` (default) corresponds either of the following options:\n    * `\"global\"` if ESLint considers a file to be a **CommonJS** module\n    * `\"function\"` otherwise\n* `\"global\"` requires one strict mode directive in the global scope (and disallows any other strict mode directives)\n* `\"function\"` requires one strict mode directive in each top-level function declaration or expression (and disallows any other strict mode directives)\n* `\"never\"` disallows strict mode directives\n\n### safe\n\nThe `\"safe\"` option corresponds to the `\"global\"` option if ESLint considers a file to be a **Node.js** or **CommonJS** module because the configuration specifies either of the following:\n\n* `node` or `commonjs` [environments](/docs/user-guide/configuring.md#specifying-environments)\n* `\"globalReturn\": true` property in the `ecmaFeatures` object of [parser options](/docs/user-guide/configuring.md#specifying-parser-options)\n\nOtherwise the `\"safe\"` option corresponds to the `\"function\"` option. Note that if `\"globalReturn\": false` is explicitly specified in the configuration, the `\"safe\"` option will correspond to the `\"function\"` option regardless of the specified environment.\n\n### global\n\nExamples of **incorrect** code for this rule with the `\"global\"` option:\n\n```js\n/*eslint strict: [\"error\", \"global\"]*/\n\nfunction foo() {\n}\n```\n\n```js\n/*eslint strict: [\"error\", \"global\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\n```js\n/*eslint strict: [\"error\", \"global\"]*/\n\n\"use strict\";\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\nExamples of **correct** code for this rule with the `\"global\"` option:\n\n```js\n/*eslint strict: [\"error\", \"global\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n### function\n\nThis option ensures that all function bodies are strict mode code, while global code is not. Particularly if a build step concatenates multiple scripts, a strict mode directive in global code of one script could unintentionally enable strict mode in another script that was not intended to be strict code.\n\nExamples of **incorrect** code for this rule with the `\"function\"` option:\n\n```js\n/*eslint strict: [\"error\", \"function\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n```js\n/*eslint strict: [\"error\", \"function\"]*/\n\nfunction foo() {\n}\n\n(function() {\n    function bar() {\n        \"use strict\";\n    }\n}());\n```\n\n```js\n/*eslint strict: [\"error\", \"function\"]*/\n/*eslint-env es6*/\n\n// Illegal \"use strict\" directive in function with non-simple parameter list.\n// This is a syntax error since ES2016.\nfunction foo(a = 1) {\n    \"use strict\";\n}\n\n// We cannot write \"use strict\" directive in this function.\n// So we have to wrap this function with a function with \"use strict\" directive.\nfunction foo(a = 1) {\n}\n```\n\nExamples of **correct** code for this rule with the `\"function\"` option:\n\n```js\n/*eslint strict: [\"error\", \"function\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n\n(function() {\n    \"use strict\";\n\n    function bar() {\n    }\n\n    function baz(a = 1) {\n    }\n}());\n\nvar foo = (function() {\n    \"use strict\";\n\n    return function foo(a = 1) {\n    };\n}());\n```\n\n### never\n\nExamples of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint strict: [\"error\", \"never\"]*/\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n```js\n/*eslint strict: [\"error\", \"never\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\nExamples of **correct** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint strict: [\"error\", \"never\"]*/\n\nfunction foo() {\n}\n```\n\n### earlier default (removed)\n\n(removed) The default option (that is, no string option specified) for this rule was **removed** in ESLint v1.0. The `\"function\"` option is most similar to the removed option.\n\nThis option ensures that all functions are executed in strict mode. A strict mode directive must be present in global code or in every top-level function declaration or expression. It does not concern itself with unnecessary strict mode directives in nested functions that are already strict, nor with multiple strict mode directives at the same level.\n\nExamples of **incorrect** code for this rule with the earlier default option which has been removed:\n\n```js\n// \"strict\": \"error\"\n\nfunction foo() {\n}\n```\n\n```js\n// \"strict\": \"error\"\n\n(function() {\n    function bar() {\n        \"use strict\";\n    }\n}());\n```\n\nExamples of **correct** code for this rule with the earlier default option which has been removed:\n\n```js\n// \"strict\": \"error\"\n\n\"use strict\";\n\nfunction foo() {\n}\n```\n\n```js\n// \"strict\": \"error\"\n\nfunction foo() {\n    \"use strict\";\n}\n```\n\n```js\n// \"strict\": \"error\"\n\n(function() {\n    \"use strict\";\n    function bar() {\n        \"use strict\";\n    }\n}());\n```\n\n## When Not To Use It\n\nIn a codebase that has both strict and non-strict code, either turn this rule off, or [selectively disable it](/docs/user-guide/configuring.md) where necessary. For example, functions referencing `arguments.callee` are invalid in strict mode. A [full list of strict mode differences](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode#Differences_from_non-strict_to_strict) is available on MDN.\n"
	],
	[
		"switch-colon-spacing",
		"# Enforce spacing around colons of switch statements (switch-colon-spacing)\n\nSpacing around colons improves readability of `case`/`default` clauses.\n\n## Rule Details\n\nThis rule controls spacing around colons of `case` and `default` clauses in `switch` statements.\nThis rule does the check only if the consecutive tokens exist on the same line.\n\nThis rule has 2 options that are boolean value.\n\n```json\n{\n    \"switch-colon-spacing\": [\"error\", {\"after\": true, \"before\": false}]\n}\n```\n\n- `\"after\": true` (Default) requires one or more spaces after colons.\n- `\"after\": false` disallows spaces after colons.\n- `\"before\": true` requires one or more spaces before colons.\n- `\"before\": false` (Default) disallows before colons.\n\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint switch-colon-spacing: \"error\"*/\n\nswitch (a) {\n    case 0 :break;\n    default :foo();\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint switch-colon-spacing: \"error\"*/\n\nswitch (a) {\n    case 0: foo(); break;\n    case 1:\n        bar();\n        break;\n    default:\n        baz();\n        break;\n}\n```\n\nExamples of **incorrect** code for this rule with `{\"after\": false, \"before\": true}` option:\n\n```js\n/*eslint switch-colon-spacing: [\"error\", {\"after\": false, \"before\": true}]*/\n\nswitch (a) {\n    case 0: break;\n    default: foo();\n}\n```\n\nExamples of **correct** code for this rule with `{\"after\": false, \"before\": true}` option:\n\n```js\n/*eslint switch-colon-spacing: [\"error\", {\"after\": false, \"before\": true}]*/\n\nswitch (a) {\n    case 0 :foo(); break;\n    case 1 :\n        bar();\n        break;\n    default :\n        baz();\n        break;\n}\n```\n\n## When Not To Use It\n\nIf you don't want to notify spacing around colons of switch statements, then it's safe to disable this rule.\n"
	],
	[
		"symbol-description",
		"# require symbol description (symbol-description)\n\nThe `Symbol` function may have optional description:\n\n```js\nvar foo = Symbol(\"some description\");\n\nvar someString = \"some description\";\nvar bar = Symbol(someString);\n```\n\n\nUsing `description` promotes easier debugging: when a symbol is logged the description is used:\n\n```js\nvar foo = Symbol(\"some description\");\n\n> console.log(foo);\n// Symbol(some description)\n```\n\nIt may facilitate identifying symbols when one is observed during debugging.\n\n\n## Rule Details\n\nThis rules requires a description when creating symbols.\n\n\n## Examples\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint symbol-description: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = Symbol();\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint symbol-description: \"error\"*/\n/*eslint-env es6*/\n\nvar foo = Symbol(\"some description\");\n\nvar someString = \"some description\";\nvar bar = Symbol(someString);\n```\n\n\n## When Not To Use It\n\nThis rule should not be used in ES3/5 environments.\nIn addition, this rule can be safely turned off if you don't want to enforce presence of `description` when creating Symbols.\n\n## Further Reading\n\n* [Symbol Objects specification: Symbol description](https://www.ecma-international.org/ecma-262/6.0/#sec-symbol-description)\n"
	],
	[
		"template-curly-spacing",
		"# Enforce Usage of Spacing in Template Strings (template-curly-spacing)\n\nWe can embed expressions in template strings with using a pair of `${` and `}`.\n\nThis rule can force usage of spacing _within_ the curly brace pair according to style guides.\n\n```js\nlet hello = `hello, ${people.name}!`;\n```\n\n## Rule Details\n\nThis rule aims to maintain consistency around the spacing inside of template literals.\n\n## Options\n\n```json\n{\n    \"template-curly-spacing\": [\"error\", \"never\"]\n}\n```\n\nThis rule has one option which has either `\"never\"` or `\"always\"` as value.\n\n* `\"never\"` (by default) - Disallows spaces inside of the curly brace pair.\n* `\"always\"` - Requires one or more spaces inside of the curly brace pair.\n\n## Examples\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint template-curly-spacing: \"error\"*/\n\n`hello, ${ people.name}!`;\n`hello, ${people.name }!`;\n\n`hello, ${ people.name }!`;\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint template-curly-spacing: \"error\"*/\n\n`hello, ${people.name}!`;\n\n`hello, ${\n    people.name\n}!`;\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint template-curly-spacing: [\"error\", \"always\"]*/\n\n`hello, ${ people.name}!`;\n`hello, ${people.name }!`;\n\n`hello, ${people.name}!`;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint template-curly-spacing: [\"error\", \"always\"]*/\n\n`hello, ${ people.name }!`;\n\n`hello, ${\n    people.name\n}!`;\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about usage of spacing inside of template strings, then it's safe to disable this rule.\n"
	],
	[
		"template-tag-spacing",
		"# Require or disallow spacing between template tags and their literals (template-tag-spacing)\n\nWith ES6, it's possible to create functions called [tagged template literals](#further-reading) where the function parameters consist of a template literal's strings and expressions.\n\nWhen using tagged template literals, it's possible to insert whitespace between the tag function and the template literal. Since this whitespace is optional, the following lines are equivalent:\n\n```js\nlet hello = func`Hello world`;\nlet hello = func `Hello world`;\n```\n\n## Rule Details\n\nThis rule aims to maintain consistency around the spacing between template tag functions and their template literals.\n\n## Options\n\n```json\n{\n    \"template-tag-spacing\": [\"error\", \"never\"]\n}\n```\n\nThis rule has one option whose value can be set to `\"never\"` or `\"always\"`\n\n* `\"never\"` (default) - Disallows spaces between a tag function and its template literal.\n* `\"always\"` - Requires one or more spaces between a tag function and its template literal.\n\n## Examples\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint template-tag-spacing: \"error\"*/\n\nfunc `Hello world`;\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint template-tag-spacing: \"error\"*/\n\nfunc`Hello world`;\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint template-tag-spacing: [\"error\", \"always\"]*/\n\nfunc`Hello world`;\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint template-tag-spacing: [\"error\", \"always\"]*/\n\nfunc `Hello world`;\n```\n\n## When Not To Use It\n\nIf you don't want to be notified about usage of spacing between tag functions and their template literals, then it's safe to disable this rule.\n\n## Further Reading\n\nIf you want to learn more about tagged template literals, check out the links below:\n\n* [Template literals (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals)\n* [Examples of using tagged template literals (Exploring ES6)](http://exploringjs.com/es6/ch_template-literals.html#_examples-of-using-tagged-template-literals)\n"
	],
	[
		"unicode-bom",
		"# Require or disallow the Unicode Byte Order Mark (BOM) (unicode-bom)\n\nThe Unicode Byte Order Mark (BOM) is used to specify whether code units are big\nendian or little endian. That is, whether the most significant or least\nsignificant bytes come first. UTF-8 does not require a BOM because byte ordering\ndoes not matter when characters are a single byte. Since UTF-8 is the dominant\nencoding of the web, we make `\"never\"` the default option.\n\n## Rule Details\n\nIf the `\"always\"` option is used, this rule requires that files always begin\nwith the Unicode BOM character U+FEFF. If `\"never\"` is used, files must never\nbegin with U+FEFF.\n\n## Options\n\nThis rule has a string option:\n\n* `\"always\"` files must begin with the Unicode BOM\n* `\"never\"` (default) files must not begin with the Unicode BOM\n\n### always\n\nExample of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint unicode-bom: [\"error\", \"always\"]*/\n\nU+FEFF\nvar abc;\n```\n\nExample of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint unicode-bom: [\"error\", \"always\"]*/\n\nvar abc;\n```\n\n### never\n\nExample of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint unicode-bom: [\"error\", \"never\"]*/\n\nvar abc;\n```\n\nExample of **incorrect** code for this rule with the `\"never\"` option:\n\n```js\n/*eslint unicode-bom: [\"error\", \"never\"]*/\n\nU+FEFF\nvar abc;\n```\n\n## When Not To Use It\n\nIf you use some UTF-16 or UTF-32 files and you want to allow a file to\noptionally begin with a Unicode BOM, you should turn this rule off.\n"
	],
	[
		"use-isnan",
		"# require calls to `isNaN()` when checking for `NaN` (use-isnan)\n\nIn JavaScript, `NaN` is a special value of the `Number` type. It's used to represent any of the \"not-a-number\" values represented by the double-precision 64-bit format as specified by the IEEE Standard for Binary Floating-Point Arithmetic.\n\nBecause `NaN` is unique in JavaScript by not being equal to anything, including itself, the results of comparisons to `NaN` are confusing:\n\n* `NaN === NaN` or `NaN == NaN` evaluate to false\n* `NaN !== NaN` or `NaN != NaN` evaluate to true\n\nTherefore, use `Number.isNaN()` or global `isNaN()` functions to test whether a value is `NaN`.\n\n## Rule Details\n\nThis rule disallows comparisons to 'NaN'.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint use-isnan: \"error\"*/\n\nif (foo == NaN) {\n    // ...\n}\n\nif (foo != NaN) {\n    // ...\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint use-isnan: \"error\"*/\n\nif (isNaN(foo)) {\n    // ...\n}\n\nif (!isNaN(foo)) {\n    // ...\n}\n```\n"
	],
	[
		"valid-jsdoc",
		"# enforce valid JSDoc comments (valid-jsdoc)\n\nThis rule was [**deprecated**](https://eslint.org/blog/2018/11/jsdoc-end-of-life) in ESLint v5.10.0.\n\n[JSDoc](http://usejsdoc.org) generates application programming interface (API) documentation from specially-formatted comments in JavaScript code. For example, this is a JSDoc comment for a function:\n\n```js\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\nIf comments are invalid because of typing mistakes, then documentation will be incomplete.\n\nIf comments are inconsistent because they are not updated when function definitions are modified, then readers might become confused.\n\n## Rule Details\n\nThis rule enforces valid and consistent JSDoc comments. It reports any of the following problems:\n\n* missing parameter tag: `@arg`, `@argument`, or `@param`\n* inconsistent order of parameter names in a comment compared to the function or method\n* missing return tag: `@return` or `@returns`\n* missing parameter or return type\n* missing parameter or return description\n* syntax error\n\nThis rule does not report missing JSDoc comments for classes, functions, or methods.\n\n**Note:** This rule does not support all of the Google Closure documentation tool's use cases. As such, some code such as `(/**number*/ n => n * 2);` will be flagged as missing appropriate function JSDoc comments even though `/**number*/` is intended to be a type hint and not a documentation block for the function. We don't recommend using this rule if you use type hints in this way.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint valid-jsdoc: \"error\"*/\n\n// expected @param tag for parameter num1 but found num instead\n// missing @param tag for parameter num2\n// missing return type\n/**\n * Add two numbers.\n * @param {number} num The first number.\n * @returns The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n\n// missing brace\n// missing @returns tag\n/**\n * @param {string name Whom to greet.\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n\n// missing parameter type for num1\n// missing parameter description for num2\n/**\n * Represents a sum.\n * @constructor\n * @param num1 The first number.\n * @param {number} num2\n */\nfunction sum(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint valid-jsdoc: \"error\"*/\n/*eslint-env es6*/\n\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n\n// default options allow missing function description\n// return type `void` means the function has no `return` statement\n/**\n * @param {string} name Whom to greet.\n * @returns {void}\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n\n// @constructor tag allows missing @returns tag\n/**\n * Represents a sum.\n * @constructor\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n */\nfunction sum(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n}\n\n// class constructor allows missing @returns tag\n/**\n * Represents a sum.\n */\nclass Sum {\n    /**\n     * @param {number} num1 The first number.\n     * @param {number} num2 The second number.\n     */\n    constructor(num1, num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n}\n\n// @abstract tag allows @returns tag without `return` statement\nclass Widget {\n    /**\n    * When the state changes, does it affect the rendered appearance?\n    * @abstract\n    * @param {Object} state The new state of the widget.\n    * @returns {boolean} Is current appearance inconsistent with new state?\n    */\n    mustRender (state) {\n        throw new Error(\"Widget subclass did not implement mustRender\");\n    }\n}\n\n// @override tag allows missing @param and @returns tags\nclass WonderfulWidget extends Widget {\n    /**\n     * @override\n     */\n    mustRender (state) {\n        return state !== this.state; // shallow comparison\n    }\n}\n```\n\n## Options\n\nThis rule has an object option:\n\n* `\"prefer\"` enforces consistent documentation tags specified by an object whose properties mean instead of key use value (for example, `\"return\": \"returns\"` means instead of `@return` use `@returns`)\n* `\"preferType\"` enforces consistent type strings specified by an object whose properties mean instead of key use value (for example, `\"object\": \"Object\"` means instead of `object` use `Object`)\n* `\"requireReturn\"` requires a return tag:\n    * `true` (default) **even if** the function or method does not have a `return` statement (this option value does not apply to constructors)\n    * `false` **if and only if** the function or method has a `return` statement or returns a value e.g. `async` function (this option value does apply to constructors)\n* `\"requireReturnType\": false` allows missing type in return tags\n* `\"matchDescription\"` specifies (as a string) a regular expression to match the description in each JSDoc comment (for example, `\".+\"` requires a description; this option does not apply to descriptions in parameter or return tags)\n* `\"requireParamDescription\": false` allows missing description in parameter tags\n* `\"requireReturnDescription\": false` allows missing description in return tags\n* `\"requireParamType\": false` allows missing type in parameter tags\n\n### prefer\n\nExamples of additional **incorrect** code for this rule with sample `\"prefer\": { \"arg\": \"param\", \"argument\": \"param\", \"class\": \"constructor\", \"return\": \"returns\", \"virtual\": \"abstract\" }` options:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"prefer\": { \"arg\": \"param\", \"argument\": \"param\", \"class\": \"constructor\", \"return\": \"returns\", \"virtual\": \"abstract\" } }]*/\n/*eslint-env es6*/\n\n/**\n * Add two numbers.\n * @arg {int} num1 The first number.\n * @arg {int} num2 The second number.\n * @return {int} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n\n/**\n * Represents a sum.\n * @class\n * @argument {number} num1 The first number.\n * @argument {number} num2 The second number.\n */\nfunction sum(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n}\n\nclass Widget {\n    /**\n     * When the state changes, does it affect the rendered appearance?\n     * @virtual\n     * @argument {Object} state The new state of the widget.\n     * @return {boolean} Is current appearance inconsistent with new state?\n     */\n    mustRender (state) {\n        throw new Error(\"Widget subclass did not implement mustRender\");\n    }\n}\n```\n\n### preferType\n\nExamples of additional **incorrect** code for this rule with sample `\"preferType\": { \"Boolean\": \"boolean\", \"Number\": \"number\", \"object\": \"Object\", \"String\": \"string\" }` options:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"preferType\": { \"Boolean\": \"boolean\", \"Number\": \"number\", \"object\": \"Object\", \"String\": \"string\" } }]*/\n/*eslint-env es6*/\n\n/**\n * Add two numbers.\n * @param {Number} num1 The first number.\n * @param {Number} num2 The second number.\n * @returns {Number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n\n/**\n * Output a greeting as a side effect.\n * @param {String} name Whom to greet.\n * @returns {void}\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n\nclass Widget {\n    /**\n     * When the state changes, does it affect the rendered appearance?\n     * @abstract\n     * @param {object} state The new state of the widget.\n     * @returns {Boolean} Is current appearance inconsistent with new state?\n     */\n    mustRender (state) {\n        throw new Error(\"Widget subclass did not implement mustRender\");\n    }\n}\n```\n\n### requireReturn\n\nExamples of additional **incorrect** code for this rule with the `\"requireReturn\": false` option:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"requireReturn\": false }]*/\n\n// unexpected @returns tag because function has no `return` statement\n/**\n * @param {string} name Whom to greet.\n * @returns {string} The greeting.\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n\n// add @abstract tag to allow @returns tag without `return` statement\nclass Widget {\n    /**\n     * When the state changes, does it affect the rendered appearance?\n     * @param {Object} state The new state of the widget.\n     * @returns {boolean} Is current appearance inconsistent with new state?\n     */\n    mustRender (state) {\n        throw new Error(\"Widget subclass did not implement mustRender\");\n    }\n}\n```\n\nExample of additional **correct** code for this rule with the `\"requireReturn\": false` option:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"requireReturn\": false }]*/\n\n/**\n * @param {string} name Whom to greet.\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n```\n\n### requireReturnType\n\nExample of additional **correct** code for this rule with the `\"requireReturnType\": false` option:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"requireReturnType\": false }]*/\n\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\n### requireParamType\n\nExample of additional **correct** code for this rule with the `\"requireParamType\": false` option:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"requireParamType\": false }]*/\n\n/**\n * Add two numbers.\n * @param num1 The first number.\n * @param num2 The second number.\n * @returns {number} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\n### matchDescription\n\nExample of additional **incorrect** code for this rule with a sample `\"matchDescription\": \".+\"` option:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"matchDescription\": \".+\" }]*/\n\n// missing function description\n/**\n * @param {string} name Whom to greet.\n * @returns {void}\n */\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n```\n\n### requireParamDescription\n\nExample of additional **correct** code for this rule with the `\"requireParamDescription\": false` option:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"requireParamDescription\": false }]*/\n\n/**\n * Add two numbers.\n * @param {int} num1\n * @param {int} num2\n * @returns {int} The sum of the two numbers.\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\n### requireReturnDescription\n\nExample of additional **correct** code for this rule with the `\"requireReturnDescription\": false` option:\n\n```js\n/*eslint valid-jsdoc: [\"error\", { \"requireReturnDescription\": false }]*/\n\n/**\n * Add two numbers.\n * @param {number} num1 The first number.\n * @param {number} num2 The second number.\n * @returns {number}\n */\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n```\n\n## When Not To Use It\n\nIf you aren't using JSDoc, then you can safely turn this rule off.\n\n## Further Reading\n\n* [JSDoc](http://usejsdoc.org)\n\n## Related Rules\n\n* [require-jsdoc](require-jsdoc.md)\n"
	],
	[
		"valid-typeof",
		"# enforce comparing `typeof` expressions against valid strings (valid-typeof)\n\nFor a vast majority of use cases, the result of the `typeof` operator is one of the following string literals: `\"undefined\"`, `\"object\"`, `\"boolean\"`, `\"number\"`, `\"string\"`, `\"function\"`, `\"symbol\"`, and `\"bigint\"`. It is usually a typing mistake to compare the result of a `typeof` operator to other string literals.\n\n## Rule Details\n\nThis rule enforces comparing `typeof` expressions to valid string literals.\n\n## Options\n\nThis rule has an object option:\n\n* `\"requireStringLiterals\": true` requires `typeof` expressions to only be compared to string literals or other `typeof` expressions, and disallows comparisons to any other value.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint valid-typeof: \"error\"*/\n\ntypeof foo === \"strnig\"\ntypeof foo == \"undefimed\"\ntypeof bar != \"nunber\"\ntypeof bar !== \"fucntion\"\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint valid-typeof: \"error\"*/\n\ntypeof foo === \"string\"\ntypeof bar == \"undefined\"\ntypeof foo === baz\ntypeof bar === typeof qux\n```\n\nExamples of **incorrect** code with the `{ \"requireStringLiterals\": true }` option:\n\n```js\ntypeof foo === undefined\ntypeof bar == Object\ntypeof baz === \"strnig\"\ntypeof qux === \"some invalid type\"\ntypeof baz === anotherVariable\ntypeof foo == 5\n```\n\nExamples of **correct** code with the `{ \"requireStringLiterals\": true }` option:\n\n```js\ntypeof foo === \"undefined\"\ntypeof bar == \"object\"\ntypeof baz === \"string\"\ntypeof bar === typeof qux\n```\n\n## When Not To Use It\n\nYou may want to turn this rule off if you will be using the `typeof` operator on host objects.\n\n## Further Reading\n\n* [MDN: `typeof` documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)\n"
	],
	[
		"vars-on-top",
		"# Require Variable Declarations to be at the top of their scope (vars-on-top)\n\nThe `vars-on-top` rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program.\nBy default variable declarations are always moved (“hoisted”) invisibly to the top of their containing scope by the JavaScript interpreter.\nThis rule forces the programmer to represent that behavior by manually moving the variable declaration to the top of its containing scope.\n\n## Rule Details\n\nThis rule aims to keep all variable declarations in the leading series of statements.\nAllowing multiple declarations helps promote maintainability and is thus allowed.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint vars-on-top: \"error\"*/\n\n// Variable declarations in a block:\nfunction doSomething() {\n    var first;\n    if (true) {\n        first = true;\n    }\n    var second;\n}\n\n// Variable declaration in for initializer:\nfunction doSomething() {\n    for (var i=0; i<10; i++) {}\n}\n```\n\n```js\n/*eslint vars-on-top: \"error\"*/\n\n// Variables after other statements:\nf();\nvar a;\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint vars-on-top: \"error\"*/\n\nfunction doSomething() {\n    var first;\n    var second; //multiple declarations are allowed at the top\n    if (true) {\n        first = true;\n    }\n}\n\nfunction doSomething() {\n    var i;\n    for (i=0; i<10; i++) {}\n}\n```\n\n```js\n/*eslint vars-on-top: \"error\"*/\n\nvar a;\nf();\n```\n\n```js\n/*eslint vars-on-top: \"error\"*/\n\n// Directives may precede variable declarations.\n\"use strict\";\nvar a;\nf();\n\n// Comments can describe variables.\nfunction doSomething() {\n    // this is the first var.\n    var first;\n    // this is the second var.\n    var second\n}\n```\n\n## Further Reading\n\n* [JavaScript Scoping and Hoisting](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html)\n* [var Hoisting](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting)\n* [A criticism of the Single Var Pattern in JavaScript, and a simple alternative](http://danielhough.co.uk/blog/single-var-pattern-rant/)\n* [Multiple var statements in JavaScript, not superfluous](http://benalman.com/news/2012/05/multiple-var-statements-javascript/)\n"
	],
	[
		"wrap-iife",
		"# Require IIFEs to be Wrapped (wrap-iife)\n\nYou can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.\n\n```js\n// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError\n```\n\n## Rule Details\n\nThis rule requires all immediately-invoked function expressions to be wrapped in parentheses.\n\n## Options\n\nThis rule has two options, a string option and an object option.\n\nString option:\n\n* `\"outside\"` enforces always wrapping the *call* expression. The default is `\"outside\"`.\n* `\"inside\"` enforces always wrapping the *function* expression.\n* `\"any\"` enforces always wrapping, but allows either style.\n\nObject option:\n\n* `\"functionPrototypeMethods\": true` additionally enforces wrapping function expressions invoked using `.call` and `.apply`. The default is `false`.\n\n### outside\n\nExamples of **incorrect** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\nExamples of **correct** code for the default `\"outside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"outside\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\n### inside\n\nExamples of **incorrect** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\n```\n\nExamples of **correct** code for the `\"inside\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"inside\"]*/\n\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### any\n\nExamples of **incorrect** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = function () { return { y: 1 };}(); // unwrapped\n```\n\nExamples of **correct** code for the `\"any\"` option:\n\n```js\n/*eslint wrap-iife: [\"error\", \"any\"]*/\n\nvar x = (function () { return { y: 1 };}()); // wrapped call expression\nvar x = (function () { return { y: 1 };})(); // wrapped function expression\n```\n\n### functionPrototypeMethods\n\nExamples of **incorrect** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = function(){ foo(); }()\nvar x = (function(){ foo(); }())\nvar x = function(){ foo(); }.call(bar)\nvar x = (function(){ foo(); }.call(bar))\n```\n\nExamples of **correct** code for this rule with the `\"inside\", { \"functionPrototypeMethods\": true }` options:\n\n```js\n/* eslint wrap-iife: [2, \"inside\", { functionPrototypeMethods: true }] */\n\nvar x = (function(){ foo(); })()\nvar x = (function(){ foo(); }).call(bar)\n```\n"
	],
	[
		"wrap-regex",
		"# Require Regex Literals to be Wrapped (wrap-regex)\n\nWhen a regular expression is used in certain situations, it can end up looking like a division operator. For example:\n\n```js\nfunction a() {\n    return /foo/.test(\"bar\");\n}\n```\n\n## Rule Details\n\nThis is used to disambiguate the slash operator and facilitates more readable code.\n\nExample of **incorrect** code for this rule:\n\n```js\n/*eslint wrap-regex: \"error\"*/\n\nfunction a() {\n    return /foo/.test(\"bar\");\n}\n```\n\nExample of **correct** code for this rule:\n\n```js\n/*eslint wrap-regex: \"error\"*/\n\nfunction a() {\n    return (/foo/).test(\"bar\");\n}\n```\n"
	],
	[
		"yield-star-spacing",
		"# Enforce spacing around the `*` in `yield*` expressions (yield-star-spacing)\n\n## Rule Details\n\nThis rule enforces spacing around the `*` in `yield*` expressions.\n\nTo use this rule you either need to [use the `es6` environment](../user-guide/configuring.md#specifying-environments) or\n[set `ecmaVersion` to `6` in `parserOptions`](../user-guide/configuring.md#specifying-parser-options).\n\n## Options\n\nThe rule takes one option, an object, which has two keys `before` and `after` having boolean values `true` or `false`.\n\n* `before` enforces spacing between the `yield` and the `*`.\n  If `true`, a space is required, otherwise spaces are disallowed.\n\n* `after` enforces spacing between the `*` and the argument.\n  If it is `true`, a space is required, otherwise spaces are disallowed.\n\nThe default is `{\"before\": false, \"after\": true}`.\n\n```json\n\"yield-star-spacing\": [\"error\", {\"before\": true, \"after\": false}]\n```\n\nThe option also has a string shorthand:\n\n* `{\"before\": false, \"after\": true}` → `\"after\"`\n* `{\"before\": true, \"after\": false}` → `\"before\"`\n* `{\"before\": true, \"after\": true}` → `\"both\"`\n* `{\"before\": false, \"after\": false}` → `\"neither\"`\n\n```json\n\"yield-star-spacing\": [\"error\", \"after\"]\n```\n\n## Examples\n\n### after\n\nExamples of **correct** code for this rule with the default `\"after\"` option:\n\n```js\n/*eslint yield-star-spacing: [\"error\", \"after\"]*/\n/*eslint-env es6*/\n\nfunction* generator() {\n  yield* other();\n}\n```\n\n### before\n\nExamples of **correct** code for this rule with the `\"before\"` option:\n\n```js\n/*eslint yield-star-spacing: [\"error\", \"before\"]*/\n/*eslint-env es6*/\n\nfunction *generator() {\n  yield *other();\n}\n```\n\n### both\n\nExamples of **correct** code for this rule with the `\"both\"` option:\n\n```js\n/*eslint yield-star-spacing: [\"error\", \"both\"]*/\n/*eslint-env es6*/\n\nfunction * generator() {\n  yield * other();\n}\n```\n\n### neither\n\nExamples of **correct** code for this rule with the `\"neither\"` option:\n\n```js\n/*eslint yield-star-spacing: [\"error\", \"neither\"]*/\n/*eslint-env es6*/\n\nfunction*generator() {\n  yield*other();\n}\n```\n\n## When Not To Use It\n\nIf your project will not be using generators or you are not concerned with spacing consistency, you do not need this rule.\n\n## Further Reading\n\n* [Understanding ES6: Generators](https://leanpub.com/understandinges6/read/#leanpub-auto-generators)\n"
	],
	[
		"yoda",
		"# Require or disallow Yoda Conditions (yoda)\n\nYoda conditions are so named because the literal value of the condition comes first while the variable comes second. For example, the following is a Yoda condition:\n\n```js\nif (\"red\" === color) {\n    // ...\n}\n```\n\nThis is called a Yoda condition because it reads as, \"if red equals the color\", similar to the way the Star Wars character Yoda speaks. Compare to the other way of arranging the operands:\n\n```js\nif (color === \"red\") {\n    // ...\n}\n```\n\nThis typically reads, \"if the color equals red\", which is arguably a more natural way to describe the comparison.\n\nProponents of Yoda conditions highlight that it is impossible to mistakenly use `=` instead of `==` because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on. This practice was therefore very common in early programming where tools were not yet available.\n\nOpponents of Yoda conditions point out that tooling has made us better programmers because tools will catch the mistaken use of `=` instead of `==` (ESLint will catch this for you). Therefore, they argue, the utility of the pattern doesn't outweigh the readability hit the code takes while using Yoda conditions.\n\n## Rule Details\n\nThis rule aims to enforce consistent style of conditions which compare a variable to a literal value.\n\n## Options\n\nThis rule can take a string option:\n\n* If it is the default `\"never\"`, then comparisons must never be Yoda conditions.\n* If it is `\"always\"`, then the literal value must always come first.\n\nThe default `\"never\"` option can have exception options in an object literal:\n\n* If the `\"exceptRange\"` property is `true`, the rule *allows* yoda conditions in range comparisons which are wrapped directly in parentheses, including the parentheses of an `if` or `while` condition. The default value is `false`. A *range* comparison tests whether a variable is inside or outside the range between two literal values.\n* If the `\"onlyEquality\"` property is `true`, the rule reports yoda conditions *only* for the equality operators `==` and `===`. The default value is `false`.\n\nThe `onlyEquality` option allows a superset of the exceptions which `exceptRange` allows, thus both options are not useful together.\n\n### never\n\nExamples of **incorrect** code for the default `\"never\"` option:\n\n```js\n/*eslint yoda: \"error\"*/\n\nif (\"red\" === color) {\n    // ...\n}\n\nif (true == flag) {\n    // ...\n}\n\nif (5 > count) {\n    // ...\n}\n\nif (-1 < str.indexOf(substr)) {\n    // ...\n}\n\nif (0 <= x && x < 1) {\n    // ...\n}\n```\n\nExamples of **correct** code for the default `\"never\"` option:\n\n```js\n/*eslint yoda: \"error\"*/\n\nif (5 & value) {\n    // ...\n}\n\nif (value === \"red\") {\n    // ...\n}\n```\n\n### exceptRange\n\nExamples of **correct** code for the `\"never\", { \"exceptRange\": true }` options:\n\n```js\n/*eslint yoda: [\"error\", \"never\", { \"exceptRange\": true }]*/\n\nfunction isReddish(color) {\n    return (color.hue < 60 || 300 < color.hue);\n}\n\nif (x < -1 || 1 < x) {\n    // ...\n}\n\nif (count < 10 && (0 <= rand && rand < 1)) {\n    // ...\n}\n\nfunction howLong(arr) {\n    return (0 <= arr.length && arr.length < 10) ? \"short\" : \"long\";\n}\n```\n\n### onlyEquality\n\nExamples of **correct** code for the `\"never\", { \"onlyEquality\": true }` options:\n\n```js\n/*eslint yoda: [\"error\", \"never\", { \"onlyEquality\": true }]*/\n\nif (x < -1 || 9 < x) {\n}\n\nif (x !== 'foo' && 'bar' != x) {\n}\n```\n\n### always\n\nExamples of **incorrect** code for the `\"always\"` option:\n\n```js\n/*eslint yoda: [\"error\", \"always\"]*/\n\nif (color == \"blue\") {\n    // ...\n}\n```\n\nExamples of **correct** code for the `\"always\"` option:\n\n```js\n/*eslint yoda: [\"error\", \"always\"]*/\n\nif (\"blue\" == value) {\n    // ...\n}\n\nif (-1 < str.indexOf(substr)) {\n    // ...\n}\n```\n\n## Further Reading\n\n* [Yoda Conditions](https://en.wikipedia.org/wiki/Yoda_conditions)\n* [Yoda Notation and Safe Switching](http://thomas.tuerke.net/on/design/?with=1249091668#msg1146181680)\n"
	]
]
