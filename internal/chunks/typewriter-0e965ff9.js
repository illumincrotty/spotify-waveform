import{w as r}from"./writeEffect-e90d86a1.js";import"./sleep-2a65a24a.js";import"./vendor-cee53150.js";const o=(t,e)=>{new MutationObserver(n=>{n.forEach(c=>{const a=c.type==="attributes",i=c.target.classList.contains("typing");a&&i&&e()})}).observe(t,{attributes:!0,childList:!0,subtree:!0})},d=t=>t.forEach(e=>e.currentNode.textContent=""),h=async(t,e)=>{if(e.cascade)d(t);else{const{getLongestTextElement:s}=await import("./getLongestTextElement-b6c28c09.js"),n=s(t);o(n,()=>e.dispatch("done"))}for(const s of t)e.cascade?(await r(s,e),s.currentNode.classList.replace("typing","finished-typing")):r(s,e).then(()=>{s.currentNode.classList.replace("typing","finished-typing")});e.cascade&&e.dispatch("done")};export{h as mode};
